<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android icon 大小</title>
    <url>/2021/04/17/android-icon%E5%A4%87%E6%B3%A8/</url>
    <content><![CDATA[<h5 id="launcher图标"><a href="#launcher图标" class="headerlink" title="launcher图标"></a>launcher图标</h5><table>
<thead>
<tr>
<th>名称</th>
<th>像素</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>mdpi（160dpi）</td>
<td>48 * 48</td>
<td>1x</td>
</tr>
<tr>
<td>hdpi （240dpi）</td>
<td>72 * 72</td>
<td>1.5x</td>
</tr>
<tr>
<td>xhdpi （320dpi）</td>
<td>96 * 96</td>
<td>2x</td>
</tr>
<tr>
<td>xxhdpi （480dpi）</td>
<td>144 * 144</td>
<td>3x</td>
</tr>
<tr>
<td>xxxhdpi （640dpi）</td>
<td>192 * 192</td>
<td>4x</td>
</tr>
</tbody></table>
<h4 id="dpi表"><a href="#dpi表" class="headerlink" title="dpi表"></a>dpi表</h4><table>
<thead>
<tr>
<th>dpi范围</th>
<th>名称</th>
</tr>
</thead>
<tbody><tr>
<td>0-120dpi</td>
<td>ldpi</td>
</tr>
<tr>
<td>120-160dpi</td>
<td>mdpi</td>
</tr>
<tr>
<td>160-240dpi</td>
<td>hdpi</td>
</tr>
<tr>
<td>240-320dpi</td>
<td>xhdpi</td>
</tr>
<tr>
<td>320-480dpi</td>
<td>xxhdpi</td>
</tr>
<tr>
<td>480-640dpi</td>
<td>xxxhdpi</td>
</tr>
</tbody></table>
<h4 id="drawable查找顺序"><a href="#drawable查找顺序" class="headerlink" title="drawable查找顺序"></a>drawable查找顺序</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">手机dpi处于320-480之间，属于xxhdpi的范围，drawable的查找顺序</span><br><span class="line">xxhdpi -&gt; xxxhdpi -&gt; nohdpi -&gt; xhdpi -&gt; hdpi -&gt; mdpi -&gt; ldpi</span><br></pre></td></tr></table></figure>


<h5 id="单位计算"><a href="#单位计算" class="headerlink" title="单位计算"></a>单位计算</h5><p><code>dpi</code> 像素密度，屏幕单位面积内的像素数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpi &#x3D; 屏幕宽度&#x2F;屏幕宽度英寸 或者  dpi &#x3D; 屏幕高度&#x2F;屏幕高度英寸</span><br><span class="line">dp &#x3D; (宽度像素 x 160)&#x2F; dpi </span><br><span class="line">例如  一加 8 手机， dpi为 411 ，屏幕分辨率 1080 * 2400 ，屏幕尺寸 2.8 * 5.9 </span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">分辨率 px</th>
<th align="left">dpi</th>
<th align="left">像素比</th>
<th align="left">示例 dp</th>
<th align="left">对应像素</th>
</tr>
</thead>
<tbody><tr>
<td align="left">xxxhdpi</td>
<td align="left">2160 x 3840</td>
<td align="left">640</td>
<td align="left">4.0</td>
<td align="left">48dp</td>
<td align="left">192px</td>
</tr>
<tr>
<td align="left">xxhdpi</td>
<td align="left">1080 x 1920</td>
<td align="left">480</td>
<td align="left">3.0</td>
<td align="left">48dp</td>
<td align="left">144px</td>
</tr>
<tr>
<td align="left">xhdpi</td>
<td align="left">720 x 1280</td>
<td align="left">320</td>
<td align="left">2.0</td>
<td align="left">48dp</td>
<td align="left">96px</td>
</tr>
<tr>
<td align="left">hdpi</td>
<td align="left">480 x 800</td>
<td align="left">240</td>
<td align="left">1.5</td>
<td align="left">48dp</td>
<td align="left">72px</td>
</tr>
<tr>
<td align="left">mdpi</td>
<td align="left">320 x 480</td>
<td align="left">160</td>
<td align="left">1.0</td>
<td align="left">48dp</td>
<td align="left">48px</td>
</tr>
</tbody></table>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p><code> mipmap</code> 和 <code>drawable</code>区别  <code>mipmap</code>文件夹只用于存放应用的启动icon </p>
<p><code>通知栏icon</code> 大小 <code>24 * 24</code>   <code>ActionBar</code> 高度 <code>56</code>  <code>48</code> 基准</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://developer.android.com/training/multiscreen/screendensities?hl=zh-cn">官网</a></p>
<p><a href="https://uiiiuiii.com/screen/android.htm">参考1</a></p>
<p><a href="https://www.zybuluo.com/TryLoveCatch/note/590965">参考2</a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>icon</tag>
      </tags>
  </entry>
  <entry>
    <title>Binder</title>
    <url>/2021/07/03/android-binder/</url>
    <content><![CDATA[<h4 id="什么是Binder"><a href="#什么是Binder" class="headerlink" title="什么是Binder"></a>什么是Binder</h4><p><code>android.os.Binder</code> 一个实现了IBinder接口的类，Binder是Android中的一种跨进程通信方式，Binder是ServiceManager连接各种Manager和相应ManagerService的桥梁，Binder是客户端和服务端进行通信的媒介，当bindService的时候，服务端会返回一个Binder对象，通过这个Binder对象，客户端就可以获取服务端提供的服务或者数据</p>
<h4 id="为什么使用Binder"><a href="#为什么使用Binder" class="headerlink" title="为什么使用Binder"></a>为什么使用Binder</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Linux中的IPC方式有管道、信号量、共享内存、消息队列、Socket，Android使用的Binder机制不属于Linux。</span><br><span class="line">Binder以C/S架构的通信方式,Linux的五种IPC机制中，只有Socket支持这种通信方式。</span><br><span class="line">  <span class="number">1.</span> 传输性能上说</span><br><span class="line">Socket作为一款通用接口，其传输效率低，开销大，主要用在跨网络的进程间通信和本机上进程间的低速通信；消息队列和管道采用存储-转发方式，即数据先从发送方拷贝到内存开辟的缓存区中，然后再从内核缓存区拷贝到接收方缓存区，至少有两次拷贝过程；共享内存虽然无需拷贝，但控制复杂，难以使用；Binder只需要拷贝一次；</span><br><span class="line">	<span class="number">2.</span> 安全性上说</span><br><span class="line">  Linux传统的IPC没有任何安全措施，完全依赖上层协议来确保，传统IPC的接收方无法获得对方可靠的UID/PID，无法鉴别对方身份，使用传统IPC时只能由用户在数据包里填入UID/PID，但这样不可靠，容易被恶意程序利用。传统IPC的访问接入点是开放的，无法建立私有通信，只要知道这些接入点的程序都可以和对端建立连接，这样无法阻止恶意程序通过猜测接收方的地址获得连接。</span><br><span class="line">  </span><br><span class="line">Binder是一种基于Client-Server通信模式的通信方式，传输过程只需要一次拷贝，可以为发送方添加UID/PID身份，支持实名Binder和匿名Binder，安全性高。</span><br></pre></td></tr></table></figure>
<h4 id="Binder的组成"><a href="#Binder的组成" class="headerlink" title="Binder的组成"></a>Binder的组成</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Binder由四部分组成：Binder客户端、Binder服务端、Binder驱动、服务登记查询模块。</span><br><span class="line">客户端先通过Binder拿到一个服务端进程中的一个对象的引用，通过这个引用，直接调用对象的方法获取结果。在这个引用对象执行方法时，它是先将方法调用的请求传给Binder驱动；然后Binder驱动再将请求传给服务端进程；服务端进程收到请求后，调用服务端“真正”的对象来执行所调用的方法；得出结果后，将结果发给Binder驱动；Binder驱动再将结果发给我们的客户端；最终，我们在客户端进程的调用就有了返回值。Binder驱动，相当于一个中转者的角色。通过这个中转者的帮忙，我们就可以调用其它进程中的对象。</span><br><span class="line">Service Manager（服务登记查询模块）</span><br><span class="line">我们调用其它进程里面的对象时，首先要获取这个对象。这个对象其实代表了另外一个进程能给我们提供什么样的服务（再直接一点，就是：对象中有哪些方法可以让客户端进程调用）。首先服务端进程要在某个地方注册登记一下，告诉系统我有个对象可以公开给其它进程来提供服务。当客户端进程需要这个服务时，就去这个登记的地方通过查询来找到这个对象。</span><br></pre></td></tr></table></figure>
<h4 id="Binder工作流程"><a href="#Binder工作流程" class="headerlink" title="Binder工作流程"></a>Binder工作流程</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">假设：客户端的程序Client运行在进程A中，服务端的程序Server运行在进程B中。</span><br><span class="line">由于进程的隔离性，Client不能读写Server中的内容，但内核可以，而Binder驱动就是运行在内核态，因此Binder驱动帮我们进行请求的中转。</span><br><span class="line">有了Binder驱动，Client和Server之间就可以打交道了，但是为了实现功能的单一性，我们为Client和Server分别设置一个代理：Client的代理Proxy和Server的代理Stub。这样，由进程A中的Proxy和进程B中的Stub通过Binder驱动进行数据交流，Server和Client直接调用Stub和Proxy的接口返回数据即可。</span><br><span class="line">此时，Client直接调用Proxy这个聚合了Binder的类，我们可以使用一系列的Manager来屏蔽掉Binder的实现细节，Client直接调用Manager中的方法获取数据，这样做的好处是Client不需要知道Binder具体怎么工作。</span><br><span class="line">最后还有一个问题，就是Client想要获得的服务多种多样，那么它是怎么获取Proxy或Manager的呢？答案是通过Service Manager进程来获取的。Service Manager总是第一个启动的服务，其他服务端进程启动后，可以在Service Manager中注册，这样Client就可以通过Service Manager来获取服务器的服务列表，进而选择具体调用的服务器进程方法。</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.boundless1024.robot.binder</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent</span><br><span class="line"><span class="keyword">import</span> android.os.*</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.LifecycleService</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：//TODO</span></span><br><span class="line"><span class="comment"> * 文件名称：ProxyStub.kt</span></span><br><span class="line"><span class="comment"> * 创建者: hallo</span></span><br><span class="line"><span class="comment"> * 邮箱: hallo<span class="doctag">@xxx</span>.xx</span></span><br><span class="line"><span class="comment"> * 时间: 2021/7/6 4:55 下午</span></span><br><span class="line"><span class="comment"> * 版本：V1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(<span class="keyword">val</span> name: String?) :Parcelable &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(parcel: Parcel) : <span class="keyword">this</span>(parcel.readString()) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">writeToParcel</span><span class="params">(parcel: <span class="type">Parcel</span>, flags: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        parcel.writeString(name)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">describeContents</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> CREATOR : Parcelable.Creator&lt;Person&gt; &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">createFromParcel</span><span class="params">(parcel: <span class="type">Parcel</span>)</span></span>: Person &#123;</span><br><span class="line">            <span class="keyword">return</span> Person(parcel)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">newArray</span><span class="params">(size: <span class="type">Int</span>)</span></span>: Array&lt;Person?&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> arrayOfNulls(size)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">&quot;【 name = <span class="variable">$name</span> 】&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonManager</span> :<span class="type">IInterface &#123;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">printPerson</span><span class="params">(person: <span class="type">Person</span>)</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinderService</span> : <span class="type">LifecycleService</span></span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> stub = <span class="keyword">object</span> : Stub() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">printPerson</span><span class="params">(person: <span class="type">Person</span>)</span></span> &#123;</span><br><span class="line">            println(<span class="string">&quot;BinderService printPerson person <span class="variable">$person</span>  <span class="subst">$&#123;Process.myPid()&#125;</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBind</span><span class="params">(intent: <span class="type">Intent</span>)</span></span>: IBinder? &#123;</span><br><span class="line">        <span class="keyword">super</span>.onBind(intent)</span><br><span class="line">        stub.attachInterface(stub,Stub.DESCRIPTOR)</span><br><span class="line">        <span class="keyword">return</span> stub</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> binder: IBinder?) : PersonManager &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">printPerson</span><span class="params">(person: <span class="type">Person</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Proxy printPerson person <span class="variable">$person</span> <span class="subst">$&#123;Process.myPid()&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> <span class="keyword">data</span> = Parcel.obtain()</span><br><span class="line">        <span class="keyword">val</span> replay = Parcel.obtain()</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">data</span>.writeInterfaceToken(Stub.DESCRIPTOR)</span><br><span class="line">            <span class="keyword">if</span> (person != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">data</span>.writeInt(<span class="number">1</span>);</span><br><span class="line">                person.writeToParcel(<span class="keyword">data</span>, <span class="number">0</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">data</span>.writeInt(<span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            println(<span class="string">&quot;Proxy transact person <span class="variable">$person</span> <span class="subst">$&#123;Process.myPid()&#125;</span>&quot;</span>)</span><br><span class="line">            binder?.transact(Stub.TRANSACTION_PRINT_PERSON, <span class="keyword">data</span>, replay, <span class="number">0</span>);</span><br><span class="line">            replay.readException()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: RemoteException) &#123;</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            replay.recycle()</span><br><span class="line">            <span class="keyword">data</span>.recycle()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">asBinder</span><span class="params">()</span></span>: IBinder? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> : <span class="type">Binder</span></span>(), PersonManager &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> DESCRIPTOR = <span class="string">&quot;com.boundless1024.robot.binder.Stub&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> TRANSACTION_PRINT_PERSON = IBinder.FIRST_CALL_TRANSACTION + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">asInterface</span><span class="params">(iBinder: <span class="type">IBinder</span>?)</span></span>: PersonManager &#123;</span><br><span class="line">            <span class="comment">//同一个进程，interfaceObj为StubBinder , 如果不是同一个进程  interfaceObj为null</span></span><br><span class="line">            <span class="keyword">val</span> interfaceObj: IInterface? = iBinder?.queryLocalInterface(DESCRIPTOR)</span><br><span class="line">            println(<span class="string">&quot;StubBinder asInterface interfaceObj <span class="variable">$interfaceObj</span>  <span class="subst">$&#123;Process.myPid()&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">if</span> (<span class="literal">null</span> != interfaceObj &amp;&amp; interfaceObj <span class="keyword">is</span> PersonManager) &#123;</span><br><span class="line">                interfaceObj <span class="keyword">as</span> PersonManager</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Proxy(iBinder)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">asBinder</span><span class="params">()</span></span>: IBinder = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTransact</span><span class="params">(code: <span class="type">Int</span>, <span class="keyword">data</span>: <span class="type">Parcel</span>, reply: <span class="type">Parcel</span>?, flags: <span class="type">Int</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">when</span> (code) &#123;</span><br><span class="line">            INTERFACE_TRANSACTION -&gt; &#123;</span><br><span class="line">                reply?.writeString(<span class="string">&quot;&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            TRANSACTION_PRINT_PERSON -&gt; &#123;</span><br><span class="line">                println(<span class="string">&quot;Stub onTransact data <span class="variable">$data</span>  <span class="subst">$&#123;Process.myPid()&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">data</span>.enforceInterface(DESCRIPTOR);</span><br><span class="line">                <span class="keyword">var</span> arg0: Person? = <span class="literal">null</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">data</span>.readInt() != <span class="number">0</span>) &#123;</span><br><span class="line">                    arg0 = Person.createFromParcel(<span class="keyword">data</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>.printPerson(arg0!!)</span><br><span class="line">                reply?.writeNoException()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, <span class="keyword">data</span>, reply, flags)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2021-07-06 17:05:39.676 21185-21185/com.boundless1024.robot I/System.out: BinderService服务绑定连接成功 com.boundless1024.robot.binder.BinderService$stub$1@2364a5c  21185</span></span><br><span class="line"><span class="comment">2021-07-06 17:05:39.676 21185-21185/com.boundless1024.robot I/System.out: StubBinder asInterface interfaceObj com.boundless1024.robot.binder.BinderService$stub$1@2364a5c  21185</span></span><br><span class="line"><span class="comment">2021-07-06 17:05:39.676 21185-21185/com.boundless1024.robot I/System.out: BinderService printPerson person 【 name = LEO 】  21185</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">android:process=&quot;:push&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2021-07-06 17:06:23.110 21186-21186/com.boundless1024.robot I/System.out: BinderService服务绑定连接成功 android.os.BinderProxy<span class="doctag">@ab</span>63dde  21186</span></span><br><span class="line"><span class="comment">2021-07-06 17:06:23.110 21186-21186/com.boundless1024.robot I/System.out: StubBinder asInterface interfaceObj null  21186</span></span><br><span class="line"><span class="comment">2021-07-06 17:06:23.111 21186-21186/com.boundless1024.robot I/System.out: Proxy printPerson person 【 name = LEO 】 21186</span></span><br><span class="line"><span class="comment">2021-07-06 17:06:23.111 21186-21186/com.boundless1024.robot I/System.out: Proxy transact person 【 name = LEO 】 21186</span></span><br><span class="line"><span class="comment">2021-07-06 17:06:23.112 21187-22346/com.boundless1024.robot I/System.out: Stub onTransact data android.os.Parcel@6f5c501  21187</span></span><br><span class="line"><span class="comment">2021-07-06 17:06:23.113 21187-22346/com.boundless1024.robot I/System.out: BinderService printPerson person 【 name = LEO 】  21187</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.huaweicloud.com/articles/bf23e373e2603558e1f5068b29fc44f2.html">参考1</a></p>
<p><a href="https://juejin.cn/post/6844903764986462221#:~:text=Binder%E6%98%AF%E5%9F%BA%E4%BA%8EC%2FS,Server%E4%B8%AD%E6%8F%90%E4%BE%9B%E7%9A%84%E8%8A%82%E7%82%B9%EF%BC%8C">参考2</a></p>
<p><a href="https://blog.csdn.net/carson_ho/article/details/73560642">参考3</a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>adb命令相关记录</title>
    <url>/2020/01/01/adb%E5%91%BD%E4%BB%A4%E7%9B%B8%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h5 id="设备相关"><a href="#设备相关" class="headerlink" title="设备相关"></a>设备相关</h5><ul>
<li>adb devices          <code>显示连接到计算机的设备</code></li>
<li>adb  [-s] shell        <code>进入设备的shell界面</code></li>
<li>adb kill-server       <code>终止adb服务进程</code></li>
<li>adb start-server     <code>重启adb服务进程</code></li>
<li>adb connect ip       <code>连接到指定的ip,配合无线调试</code></li>
</ul>
<h5 id="应用管理"><a href="#应用管理" class="headerlink" title="应用管理"></a>应用管理</h5><ul>
<li>adb  shell pm    <code>和包相关的操作</code></li>
<li>adb shell pm path 包名         <code>打印出给定包名对应应用的apk路径</code><pre><code>- adb shell pm list packages    ```列出包相关的信息，参考[-f] [-d] [-e] [-s] [-3] [-i] [-l] [-u] [-U]……```
- adb shell pm list permissions     ```列出权限相关的```
- adb install apk文件       ```安装apk```
- adb uninstall 包名        ```卸载apk```
- adb shell pm start 包名/启动activity       ```启动apk```
- adb shell pm clear 包名      ```清除apk数据```
</code></pre>
</li>
</ul>
<h5 id="内存、进程相关"><a href="#内存、进程相关" class="headerlink" title="内存、进程相关"></a>内存、进程相关</h5><ul>
<li>adb  shell dumpsys cupinfo     <code>查看CPU信息</code></li>
<li>adb shell dumpsys meminfo  [包名]   <code>查看应用的内存信息</code></li>
<li>adb shell top          <code>查看设备cpu和内存占用情况</code></li>
<li>adb shell top -m 2       <code>查看占用内存前2的app</code></li>
<li>adb shell ps | grep[findStr] 关键字         <code>查看某一程序进程</code></li>
<li>adb shell ps -x [PID]        <code>查看指定进程状态</code></li>
<li>adb shell kill [PID]        <code>杀死进程</code></li>
<li>adb shell top -n 1       <code>刷新一次内存信息，然后返回</code></li>
<li>adb shell cat /proc/meminfo     <code>查看当前内存占用</code></li>
</ul>
<h5 id="Android四大组件"><a href="#Android四大组件" class="headerlink" title="Android四大组件"></a>Android四大组件</h5><p>![image-20201022173705225](/Users/libo/Library/Application Support/typora-user-images/image-20201022173705225.png)</p>
<ul>
<li>adb shell dumpsys activity top      <code>查看栈顶Activity</code></li>
<li>adb shell dumpsys activity activities | grep mResumedActivity   <code>查看当前正在显示的activity</code></li>
<li>adb shell am      <code>和activity相关 start、force-stop 包名、kill-all、kill 包名</code></li>
<li>adb shell service list     <code>查看后台services信息</code></li>
<li>adb shell dumpsys notification      <code>获取通知信息</code></li>
</ul>
<h5 id="文件相关"><a href="#文件相关" class="headerlink" title="文件相关"></a>文件相关</h5><ul>
<li>adb shell cd  <code>进入某个目录</code></li>
<li>adb shell ls -a   <code>查看这个目录下的文件</code></li>
<li>adb pull 远程路径(手机) 本地路径(电脑) <code>手机复制文件出来</code></li>
<li>adb push 本地路径(电脑)  远程路径(手机)  <code>向手机发送文件</code></li>
<li>adb shell makedir   <code>创建一个文件夹</code></li>
<li>adb shell cat      ````查看文件内容```</li>
</ul>
<h5 id="屏幕截图"><a href="#屏幕截图" class="headerlink" title="屏幕截图"></a>屏幕截图</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell screencap -p &#x2F;sdcard&#x2F;sc.png</span><br></pre></td></tr></table></figure>
<h5 id="视频录制"><a href="#视频录制" class="headerlink" title="视频录制"></a>视频录制</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell screenrecord &#x2F;sdcard&#x2F;filename.mp4</span><br></pre></td></tr></table></figure>
<h5 id="获取手机中的apk"><a href="#获取手机中的apk" class="headerlink" title="获取手机中的apk"></a>获取手机中的apk</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys activity activities | grep mResumedActivity   --获取包名</span><br><span class="line">adb shell pm path com.aoyindsptv.phonelive --获取安装包地址</span><br><span class="line">adb pull 安装包地址  电脑地址</span><br></pre></td></tr></table></figure>
<h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys activity activities | grep mResumedActivity --查看包名和Activity</span><br><span class="line">adb shell dumpsys window | grep mCurrentFocus --同上</span><br></pre></td></tr></table></figure>


<p><a href="https://www.jianshu.com/p/0693b841c83b">参考</a></p>
<p><a href="https://weiwangqiang.github.io/2020/03/16/dumpsys-debug-detail/">参考2</a></p>
<div class="gallery-group-main">

  <figure class="gallery-group">
  <img class="gallery-group-img" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">壁紙</div>
  <p>收藏的一些壁紙</p>
  <a href='/Gallery/wallpaper'></a>
  </figcaption>
  </figure>
  

  <figure class="gallery-group">
  <img class="gallery-group-img" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">漫威</div>
  <p>關於漫威的圖片</p>
  <a href='/Gallery/marvel'></a>
  </figcaption>
  </figure>
  

  <figure class="gallery-group">
  <img class="gallery-group-img" src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg' alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">OH MY GIRL</div>
  <p>關於OH MY GIRL的圖片</p>
  <a href='/Gallery/ohmygirl'></a>
  </figcaption>
  </figure>
  
</div>

]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title>android library上传</title>
    <url>/2021/01/01/android-library%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h5 id="Android-Library上传"><a href="#Android-Library上传" class="headerlink" title="Android Library上传"></a>Android Library上传</h5><ol>
<li>登录注册账号  <a href="https://bintray.com/login?forwardedFrom=/">地址</a><img src="https://i.loli.net/2021/02/22/GDEqge4TCznH3Rb.png" alt="image-20201027185936082.png"></li>
<li>创建仓库  <img src="https://i.loli.net/2021/02/22/ig6aCvcEZ8M73WN.png" alt="image-20201027190240356.png"></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">说明：这里也可以不创建maven仓库， 那么在后续的库上传时需要指定仓库，repoName</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><p>创建自己的library库<img src="https://i.loli.net/2021/02/22/SVP1HCnsie5tE4w.png" alt="image-20201027190709179.png"><img src="https://i.loli.net/2021/02/22/j5LkmT4nKeCNytu.png" alt="image-20201027190546331.png"></p>
</li>
<li><p>获取上传时用到的apikey<img src="https://i.loli.net/2021/02/22/IbhcKMPYVkTeyol.png" alt="image-20201027190851669.png"></p>
</li>
<li><p>上传代码到library<img src="https://i.loli.net/2021/02/22/pTzOrf7xc31hGDZ.png" alt="image-20201027191204862.png"></p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;gradlew clean build bintrayUpload -PbintrayUser&#x3D;boundless1024 -PbintrayKey&#x3D;d59a0923f6a03320d40be3b8e36e407ec1fc7b4d -PdryRun&#x3D;false</span><br></pre></td></tr></table></figure>
<ol start="6">
<li><p> 使用library<img src="https://i.loli.net/2021/02/22/YLCpOvhSxca9flX.png" alt="image-20201027191733290.png"><img src="https://i.loli.net/2021/02/22/VsMvBKOopSZRx7q.png" alt="image-20201027191815006.png"></p>
</li>
<li><p>同步到jcenter<img src="https://i.loli.net/2021/02/22/KveaF5bEgAqfhTn.png" alt="image-20201027192049858.png"></p>
</li>
</ol>
<p>参考</p>
<ol>
<li><p><a href="https://bintray.com/">参考1</a></p>
</li>
<li><p><a href="https://github.com/ddnosh/ARabbit/blob/master/sdk/build.gradle">参考2</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/677601f192e5">参考3</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>library</tag>
      </tags>
  </entry>
  <entry>
    <title>Android跳转到Setting界面Action</title>
    <url>/2021/03/14/android-%E8%B7%B3%E8%BD%AC-settings%E7%95%8C%E9%9D%A2-intent/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">跳转到Android系统界面的action收集。</span><br></pre></td></tr></table></figure>


<h3 id="Action列表"><a href="#Action列表" class="headerlink" title="Action列表"></a>Action列表</h3><table>
<thead>
<tr>
<th>action</th>
<th>界面</th>
</tr>
</thead>
<tbody><tr>
<td>ACTION_SETTINGS</td>
<td>系统设置界面</td>
</tr>
<tr>
<td>ACTION_APN_SETTINGS</td>
<td>APN设置界面</td>
</tr>
<tr>
<td>ACTION_LOCATION_SOURCE_SETTINGS</td>
<td>定位设置界面</td>
</tr>
<tr>
<td>ACTION_AIRPLANE_MODE_SETTINGS</td>
<td>更多连接方式设置界面</td>
</tr>
<tr>
<td>ACTION_DATA_ROAMING_SETTINGS</td>
<td>双卡和移动网络设置界面</td>
</tr>
<tr>
<td>ACTION_ACCESSIBILITY_SETTINGS</td>
<td>无障碍设置界面/辅助功能界面</td>
</tr>
<tr>
<td>ACTION_SYNC_SETTINGS</td>
<td>同步设置界面</td>
</tr>
<tr>
<td>ACTION_ADD_ACCOUNT</td>
<td>添加账户界面</td>
</tr>
<tr>
<td>ACTION_NETWORK_OPERATOR_SETTINGS</td>
<td>选取运营商的界面</td>
</tr>
<tr>
<td>ACTION_SECURITY_SETTINGS</td>
<td>安全设置界面</td>
</tr>
<tr>
<td>ACTION_PRIVACY_SETTINGS</td>
<td>备份重置设置界面</td>
</tr>
<tr>
<td>ACTION_VPN_SETTINGS</td>
<td>VPN设置界面,可能不存在</td>
</tr>
<tr>
<td>ACTION_WIFI_SETTINGS</td>
<td>无线网设置界面</td>
</tr>
<tr>
<td>ACTION_WIFI_IP_SETTINGS</td>
<td>WIFI的IP设置</td>
</tr>
<tr>
<td>ACTION_BLUETOOTH_SETTINGS</td>
<td>蓝牙设置</td>
</tr>
<tr>
<td>ACTION_CAST_SETTINGS</td>
<td>投射设置</td>
</tr>
<tr>
<td>ACTION_DATE_SETTINGS</td>
<td>日期时间设置</td>
</tr>
<tr>
<td>ACTION_SOUND_SETTINGS</td>
<td>声音设置</td>
</tr>
<tr>
<td>ACTION_DISPLAY_SETTINGS</td>
<td>显示设置</td>
</tr>
<tr>
<td>ACTION_LOCALE_SETTINGS</td>
<td>语言设置</td>
</tr>
<tr>
<td>ACTION_VOICE_INPUT_SETTINGS</td>
<td>辅助应用和语音输入设置</td>
</tr>
<tr>
<td>ACTION_INPUT_METHOD_SETTINGS</td>
<td>语言和输入法设置</td>
</tr>
<tr>
<td>ACTION_USER_DICTIONARY_SETTINGS</td>
<td>个人字典设置界面</td>
</tr>
<tr>
<td>ACTION_INTERNAL_STORAGE_SETTINGS</td>
<td>存储空间设置的界面</td>
</tr>
<tr>
<td>ACTION_SEARCH_SETTINGS</td>
<td>搜索设置界面</td>
</tr>
<tr>
<td>ACTION_APPLICATION_DEVELOPMENT_SETTINGS</td>
<td>开发者选项</td>
</tr>
<tr>
<td>ACTION_DEVICE_INFO_SETTINGS</td>
<td>手机状态信息的界面</td>
</tr>
<tr>
<td>ACTION_DREAM_SETTINGS</td>
<td>互动屏保设置的界面</td>
</tr>
<tr>
<td>ACTION_NOTIFICATION_LISTENER_SETTINGS</td>
<td>通知使用权设置的界面</td>
</tr>
<tr>
<td>ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS</td>
<td>勿扰权限设置的界面</td>
</tr>
<tr>
<td>ACTION_CAPTIONING_SETTINGS</td>
<td>字幕设置的界面</td>
</tr>
<tr>
<td>ACTION_PRINT_SETTINGS</td>
<td>打印设置界面</td>
</tr>
<tr>
<td>ACTION_BATTERY_SAVER_SETTINGS</td>
<td>节电助手界面</td>
</tr>
<tr>
<td>ACTION_HOME_SETTINGS</td>
<td>主屏幕设置界面</td>
</tr>
<tr>
<td>ACTION_APPLICATION_DETAILS_SETTINGS</td>
<td>根据包名跳转到系统自带的应用程序信息</td>
</tr>
<tr>
<td>ACTION_APPLICATION_SETTINGS</td>
<td>应用程序列表</td>
</tr>
<tr>
<td>ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS</td>
<td>应用程序界面【所有的】</td>
</tr>
<tr>
<td>ACTION_MANAGE_APPLICATIONS_SETTINGS</td>
<td>应用程序列表界面【已安装的】</td>
</tr>
<tr>
<td>ACTION_INPUT_METHOD_SUBTYPE_SETTINGS</td>
<td>【API 11及以上】语言选择界面 【多国语言选择】</td>
</tr>
<tr>
<td>ACTION_NFCSHARING_SETTINGS</td>
<td>显示NFC共享设置【API 14及以上】</td>
</tr>
<tr>
<td>ACTION_NFC_SETTINGS</td>
<td>显示NFC设置【API 16及以上】</td>
</tr>
<tr>
<td>ACTION_QUICK_LAUNCH_SETTINGS</td>
<td>快速启动设置界面</td>
</tr>
</tbody></table>
<h3 id="样例代码"><a href="#样例代码" class="headerlink" title="样例代码"></a>样例代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);</span><br><span class="line">intent.setData(Uri.parse(requireActivity().getPackageName()));</span><br><span class="line">requireActivity().startActivity(intent);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>intent</tag>
      </tags>
  </entry>
  <entry>
    <title>android10创建文件失败</title>
    <url>/2021/01/11/android10-create-file/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">今天在练习通过xposed来改变app是否展示广告，遇到了【open failed: EACCES (Permission denied)】</span><br><span class="line">，已经提前申请好存储权限了，怎么还会报这个错？？,通过查看和学习了解到只有10及以上的系统才会有问题，</span><br><span class="line">做备注记录。</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/02/27/tQTKmborEf728gh.png" alt="iShot2021-02-27下午03.46.07.png"></p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p>在<code>AndroidManifest.xml</code>中 添加<code>requestLegacyExternalStorage=&quot;true&quot;</code> ,此时 <code>targetSdkVersion</code>版本不受约束。<br><img src="https://i.loli.net/2021/02/27/VpTFQ7G6icobMhI.png" alt="iShot2021-02-27下午03.55.30.png"></p>
<h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><p>在<code>build.gradle</code>中修改  <code>targetSdkVersion</code>在29以下<br><img src="https://i.loli.net/2021/02/27/kzdbB7rCFVK6YLX.png" alt="iShot2021-02-27下午03.59.08.png"></p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p><code>Android 10 不允许应用随意创建文件夹</code><br><code>Android 11 中的存储机制更新</code> </p>
<p><a href="https://blog.csdn.net/m0_37707561/article/details/105563569?utm_medium=distribute.pc_relevant_download.none-task-blog-baidujs-3.nonecase&depth_1-utm_source=distribute.pc_relevant_download.none-task-blog-baidujs-3.nonecase">参考1</a><br><a href="https://www.jianshu.com/p/0f1b18497ca1">参考2</a><br><a href="https://developer.android.com/training/data-storage/use-cases#if_your_app_targets">android10-停用分区存储</a><br><a href="https://developer.android.com/about/versions/11/privacy/storage?hl=zh-cn">Android11-中的存储机制更新</a> </p>
<p><img src="https://i.loli.net/2021/02/27/IHNS12T6jXblVzM.png" alt="iShot2021-02-27下午04.19.00.png"><br><img src="https://i.loli.net/2021/02/27/Dz3jJZ8OdQbsYwu.png" alt="iShot2021-02-27下午04.19.17.png"></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>es</title>
    <url>/2018/08/27/elasticsearch%E5%A4%87%E6%B3%A8/</url>
    <content><![CDATA[<h4 id="ES介绍"><a href="#ES介绍" class="headerlink" title="ES介绍"></a>ES介绍</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Elasticsearch 是一个分布式的免费开源搜索和分析引擎，适用于包括文本、数字、地理空间、结构化和非结构化数据等在内的所有类型的数据。Elasticsearch 在 Apache Lucene 的基础上开发而成，由 Elasticsearch N.V.（即现在的 Elastic）于 <span class="number">2010</span> 年首次发布，Elasticsearch 以其简单的 REST 风格 API、分布式特性、速度和可扩展性而闻名，可用于多种用例</span><br><span class="line">  - 应用程序搜索、网站搜索、企业搜索</span><br><span class="line">  - 日志处理和分析、安全分析、业务分析</span><br><span class="line">  - 基础设施指标和容器监测、应用程序性能监测</span><br></pre></td></tr></table></figure>


<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul>
<li><p>索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在ES中索引（index）类似mysql的表，代表文档数据的集合，文档指的是ES中存储的一条数据</span><br></pre></td></tr></table></figure>

</li>
<li><p>类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在新版的ES（7.0+）中，已经不使用文档类型了，在ES老的版本中文档类型，代表一类文档的集合，index(索引)类似mysql的数据库、文档类型类似Mysql的表</span><br></pre></td></tr></table></figure>

</li>
<li><p>文档</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ES是面向文档的数据库，文档是最基本的存储单元，文档类似mysql表中的一行数据。</span><br><span class="line">简单的说在ES中，文档指的就是一条JSON数据。</span><br><span class="line">ES中文档使用json格式存储，因此存储上比Mysql要灵活的多，ES支持任意格式的json数据。</span><br></pre></td></tr></table></figure></li>
<li><p>字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文档由多个json字段（Field）组成， 这里的字段类似mysql中表的字段。</span><br><span class="line">当然ES中字段也有类型的，下面是常用的字段类型:</span><br><span class="line">数值类型（包括: long、integer、short、byte、double、float）</span><br><span class="line">- text - 支持全文搜索</span><br><span class="line">- keyword - 不支持全文搜索，例如：email、电话这些数据，作为一个整体进行匹配就可以，不需要分词处理。</span><br><span class="line">- date - 日期类型</span><br><span class="line">- boolean</span><br></pre></td></tr></table></figure></li>
<li><p>映射</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ES的mapping (映射)类似mysql中的表结构定义，每个索引都有一个映射规则，我们可以通过定义索引的映射规则，提前定义好文档的json结构和字段类型，如果没有定义索引的映射规则，ES会在写入数据的时候，根据我们写入的数据字段推测出对应的字段类型，相当于自动定义索引的映射规则</span><br></pre></td></tr></table></figure>
<p>![image-20211115165535149](/Users/libo/Library/Application Support/typora-user-images/image-20211115165535149.png)</p>
</li>
</ul>
<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">官网下载最新的包,解压后进入bin目录下执行elasticsearch文件，成功后访问http:&#x2F;&#x2F;localhost:9200 。</span><br></pre></td></tr></table></figure>
<p>![image-20211115184539401](/Users/libo/Library/Application Support/typora-user-images/image-20211115184539401.png)</p>
<p>![image-20211115184653097](/Users/libo/Library/Application Support/typora-user-images/image-20211115184653097.png)</p>
<h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;&#123;index&#125;&#x2F;&#123;type&#125;&#x2F;&#123;id&#125;</span><br><span class="line">json数据</span><br><span class="line">- index:索引名</span><br><span class="line">- type:类型</span><br><span class="line">- id:唯一id， 可以不指定, 如果不指定id, 需要使用POST发送请求</span><br></pre></td></tr></table></figure>
<p>![image-20211115185238036](/Users/libo/Library/Application Support/typora-user-images/image-20211115185238036.png)</p>
<ul>
<li>_index - 代表当前JSON文档所属的文档名字</li>
<li>_type - 代表当前JSON文档所属的类型，虽然新版ES废弃了type的用法，但是元数据还是可以看到。</li>
<li>_id - 文档唯一Id, 如果我们没有为文档指定id，系统会自动生成</li>
<li>_source - 代表我们插入进去的JSON数据</li>
<li>_version - 文档的版本号，每修改一次文档数据，字段就会加1， 这个字段新版的ES已经不使用了</li>
<li>_seq_no - 文档的版本号, 替代老的_version字段</li>
<li>_primary_term - 文档所在主分区，这个可以跟_seq_no字段搭配实现乐观锁。</li>
</ul>
<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;&#123;index&#125;&#x2F;&#123;type&#125;&#x2F;&#123;id&#125;</span><br></pre></td></tr></table></figure>
<p>![image-20211115185740234](/Users/libo/Library/Application Support/typora-user-images/image-20211115185740234.png)</p>
<h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;&#123;index&#125;&#x2F;_update&#x2F;&#123;id&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;:&#123; &#x2F;&#x2F; 在doc字段中指定需要更新的字段</span><br><span class="line">    &#x2F;&#x2F; 需要更新的字段列表</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>![image-20211115190042603](/Users/libo/Library/Application Support/typora-user-images/image-20211115190042603.png)</p>
<p>![image-20211115190122392](/Users/libo/Library/Application Support/typora-user-images/image-20211115190122392.png)</p>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE &#x2F;&#123;index&#125;&#x2F;&#123;type&#125;&#x2F;&#123;id&#125;</span><br></pre></td></tr></table></figure>
<p>![image-20211115190255979](/Users/libo/Library/Application Support/typora-user-images/image-20211115190255979.png)</p>
<p>![image-20211115190326653](/Users/libo/Library/Application Support/typora-user-images/image-20211115190326653.png)</p>
<h4 id="ES数据基础类型"><a href="#ES数据基础类型" class="headerlink" title="ES数据基础类型"></a>ES数据基础类型</h4><ul>
<li>字符串 <code>主要包括: text和keyword两种类型，keyword代表精确值不会参与分词，text类型的字符串会参与分词处理</code></li>
<li>数值   <code>包括: long, integer, short, byte, double, float</code></li>
<li>布尔值   <code>boolean</code></li>
<li>时间     <code>date</code></li>
<li>数组   <code>数组类型不需要专门定义，只要插入的字段值是json数组就行。</code></li>
<li>GEO类型  <code>主要涉及地理信息检索、多边形区域的表达</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">text类型，会涉及分词处理，存储到ES中的数据不是原始数据，是一个个关键词。实际项目中，如果不需要模糊搜索的字符类型，可以选择keyword类型，例如：手机号、email、微信的openid等等，如果选text类型，可能会出现搜出一大堆相似的数据，而且不是精确的数据。</span><br></pre></td></tr></table></figure>


<h4 id="创建映射"><a href="#创建映射" class="headerlink" title="创建映射"></a>创建映射</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;&#123;索引名字&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123; &#x2F;&#x2F; 表示定义映射规则</span><br><span class="line">    &quot;properties&quot;: &#123; &#x2F;&#x2F; 定义属性，也就是字段类型</span><br><span class="line">      &quot;字段名1&quot;:    &#123; &quot;type&quot;: &quot;字段类型&quot; &#125;,  </span><br><span class="line">      &quot;字段名2&quot;:    &#123; &quot;type&quot;: &quot;字段类型&quot; &#125;</span><br><span class="line">      ...(提示：最后一行末尾不要加逗号)...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>![image-20211115191802837](/Users/libo/Library/Application Support/typora-user-images/image-20211115191802837.png)</p>
<h4 id="查看映射"><a href="#查看映射" class="headerlink" title="查看映射"></a>查看映射</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;索引名&#x2F;_mapping</span><br></pre></td></tr></table></figure>
<p>![image-20211115191847445](/Users/libo/Library/Application Support/typora-user-images/image-20211115191847445.png)</p>
<p>![image-20211115192740138](/Users/libo/Library/Application Support/typora-user-images/image-20211115192740138.png)</p>
<h4 id="查询语法"><a href="#查询语法" class="headerlink" title="查询语法"></a>查询语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;&#123;索引名&#125;&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">	&quot;from&quot; : 0,  &#x2F;&#x2F; 返回搜索结果的开始位置</span><br><span class="line">  	&quot;size&quot; : 10, &#x2F;&#x2F; 分页大小，一次返回多少数据</span><br><span class="line">  	&quot;_source&quot; :[ ...需要返回的字段数组... ],</span><br><span class="line">	&quot;query&quot; : &#123; ...query子句... &#125;,</span><br><span class="line">	&quot;aggs&quot; : &#123; ..aggs子句..  &#125;,</span><br><span class="line">	&quot;sort&quot; : &#123; ..sort子句..  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">ES查询</th>
<th align="center">SQL类比</th>
</tr>
</thead>
<tbody><tr>
<td align="center">query子句</td>
<td align="center">类似SQL的Where语句</td>
</tr>
<tr>
<td align="center">aggs子句</td>
<td align="center">类似SQL的group by语句</td>
</tr>
<tr>
<td align="center">sort子句</td>
<td align="center">类似SQL的order by语句</td>
</tr>
<tr>
<td align="center">分页通过from和size参数</td>
<td align="center">类似MYSQL 的limit和offset语句</td>
</tr>
</tbody></table>
<p>![image-20211116171437939](/Users/libo/Library/Application Support/typora-user-images/image-20211116171437939.png)</p>
<h5 id="匹配单个字段"><a href="#匹配单个字段" class="headerlink" title="匹配单个字段"></a>匹配单个字段</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;&#123;索引名&#125;&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;&#123;FIELD&#125;&quot;: &quot;&#123;TEXT&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;FIELD&#125; - 就是我们需要匹配的字段名    &#123;TEXT&#125; - 就是我们需要匹配的内容</span><br><span class="line">如果match字段的数据类型是text类型，搜索关键词会进行分词处理。</span><br></pre></td></tr></table></figure>
<p>![image-20211116172706629](/Users/libo/Library/Application Support/typora-user-images/image-20211116172706629.png)</p>
<h5 id="精确匹配单个字段"><a href="#精确匹配单个字段" class="headerlink" title="精确匹配单个字段"></a>精确匹配单个字段</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;&#123;索引名&#125;&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;&#123;FIELD&#125;&quot;: &quot;&#123;VALUE&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;FIELD&#125; - 就是我们需要匹配的字段名 &#123;VALUE&#125; - 就是我们需要匹配的内容，除了TEXT类型字段以外的任意类型。</span><br><span class="line"></span><br><span class="line">GET &#x2F;order_v2&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;terms&quot;: &#123;</span><br><span class="line">      &quot;&#123;FIELD&#125;&quot;: [</span><br><span class="line">        &quot;&#123;VALUE1&#125;&quot;,</span><br><span class="line">        &quot;&#123;VALUE2&#125;&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>![image-20211116173815155](/Users/libo/Library/Application Support/typora-user-images/image-20211116173815155.png)</p>
<p>![image-20211116173842691](/Users/libo/Library/Application Support/typora-user-images/image-20211116173842691.png)</p>
<p>![image-20211116174005736](/Users/libo/Library/Application Support/typora-user-images/image-20211116174005736.png)</p>
<h5 id="聚合查询（aggs"><a href="#聚合查询（aggs" class="headerlink" title="聚合查询（aggs"></a>聚合查询（aggs</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ES聚合查询类似SQL的group by，对查询的数据首先进行一轮分组，可以设置分组条件。ES中对满足特定条件的文档的集合，叫做桶（桶等同于组，分桶和分组是一个意思，ES使用桶代表一组相同特征的数据），ES中桶聚合，指的就是先对数据进行分组。</span><br><span class="line">&#123;</span><br><span class="line">  &quot;aggregations&quot; : &#123;</span><br><span class="line">    &quot;&lt;aggregation_name&gt;&quot; : &#123;</span><br><span class="line">        &quot;&lt;aggregation_type&gt;&quot; : &#123;</span><br><span class="line">            &lt;aggregation_body&gt;</span><br><span class="line">        &#125;</span><br><span class="line">        [,&quot;aggregations&quot; : &#123; [&lt;sub_aggregation&gt;]+ &#125; ]? &#x2F;&#x2F; 嵌套聚合查询，支持多层嵌套</span><br><span class="line">    &#125;</span><br><span class="line">    [,&quot;&lt;aggregation_name_2&gt;&quot; : &#123; ... &#125; ]* &#x2F;&#x2F; 多个聚合查询，每个聚合查询取不同的名字</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">- aggregations - 代表聚合查询语句，可以简写为aggs</span><br><span class="line">- &lt;aggregation_name&gt; - 代表一个聚合计算的名字，可以随意命名，因为ES支持一次进行多次统计分析查询，后面需要通过这个名字在查询结果中找到我们想要的计算结果。</span><br><span class="line">- &lt;aggregation_type&gt; - 聚合类型，代表我们想要怎么统计数据，主要有两大类聚合类型，桶聚合和指标聚合，这两类聚合又包括多种聚合类型，例如：指标聚合：sum、avg， 桶聚合：terms、Date histogram等等。</span><br><span class="line">- &lt;aggregation_body&gt; - 聚合类型的参数，选择不同的聚合类型，有不同的参数。</span><br><span class="line">- aggregation_name_2 - 代表其他聚合计算的名字，意思就是可以一次进行多种类型的统计。</span><br></pre></td></tr></table></figure>
<p>![image-20211116181319731](/Users/libo/Library/Application Support/typora-user-images/image-20211116181319731.png)</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.elastic.co/cn/downloads/elasticsearch">安装包地址</a></p>
<p><a href="https://www.tizi365.com/archives/590.html">参考1</a></p>
<p><a href="https://www.elastic.co/cn/what-is/elasticsearch">参考2</a></p>
]]></content>
      <categories>
        <category>es</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>frida安装</title>
    <url>/2021/01/02/frida-install/</url>
    <content><![CDATA[<h5 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mac系统自带python，但是版本比较低，可以自行安装新的版本。</span><br></pre></td></tr></table></figure>
<p><a href="https://www.python.org/getit/">python官网</a></p>
<p>下面的操作都在python3下操作</p>
<h5 id="安装frida"><a href="#安装frida" class="headerlink" title="安装frida"></a>安装frida</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install frida</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/02/22/bOXJuYajNCIGzxt.png" alt="image-20200729105621345.png"><br><img src="https://i.loli.net/2021/02/22/c2PzduwxK4GFlfM.png" alt="image-20200729105702901.png"></p>
<h5 id="安装frida-tools"><a href="#安装frida-tools" class="headerlink" title="安装frida-tools"></a>安装frida-tools</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install frida-tools</span><br></pre></td></tr></table></figure>
<h5 id="检测是否安装成功"><a href="#检测是否安装成功" class="headerlink" title="检测是否安装成功"></a>检测是否安装成功</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">frida-ps</span><br></pre></td></tr></table></figure>
<h5 id="下载frida-server"><a href="#下载frida-server" class="headerlink" title="下载frida-server"></a>下载frida-server</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Frida-server的版本必须跟你宿主机的Frida版本一致。</span><br></pre></td></tr></table></figure>
<p><a href="%5Bhttps://github.com/frida/frida/releases">下载地址</a></p>
<h5 id="推送frida-server到root过的手机"><a href="#推送frida-server到root过的手机" class="headerlink" title="推送frida-server到root过的手机"></a>推送frida-server到root过的手机</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载后解压文件，并将文件重命名为: frida-server，然后推送到手机</span><br><span class="line">adb push frida-server &#x2F;data&#x2F;local&#x2F;tmp&#x2F;</span><br></pre></td></tr></table></figure>
<h5 id="修改权限并运行frida-server"><a href="#修改权限并运行frida-server" class="headerlink" title="修改权限并运行frida-server"></a>修改权限并运行frida-server</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">cd &#x2F;data&#x2F;local&#x2F;tmp&#x2F;</span><br><span class="line">chmod 777 frida-server</span><br><span class="line">.&#x2F;frida-server</span><br></pre></td></tr></table></figure>


<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.jianshu.com/p/15a4bf14d0a5">参考1</a></p>
<p><a href="https://github.com/hluwa/FRIDA-DEXDump">参考2</a></p>
<p><a href="https://www.jianshu.com/p/5aa3f08736c5">参考3</a></p>
<p><a href="https://www.52pojie.cn/forum.php?mod=viewthread&tid=931872">frida hook java教程</a></p>
<p><a href="https://frida.re/docs/installation/">frida官网安装</a></p>
]]></content>
      <categories>
        <category>frida</category>
      </categories>
      <tags>
        <tag>frida</tag>
      </tags>
  </entry>
  <entry>
    <title>frida测试-修改vip</title>
    <url>/2021/02/23/frida_test/</url>
    <content><![CDATA[<p>项目开发的过程中，需要用户不同的身份状态展示相对应的UI界面时，比如VIP用户展示更多的功能……。此时，我们可以有多种方式来做开发测试，下面通过frida动态修改用户的身份状态来实现，仅做测试。</p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><pre><code>frida -U -f com.dewu.sxttpjc -l vip.js
</code></pre>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改用户的vip状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> packageName = <span class="string">&quot;com.dewu.sxttpjc.util&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> className = <span class="string">&quot;UserUtils&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> UserUtils = Java.use(packageName+ <span class="string">&quot;.&quot;</span>+ className);</span><br><span class="line">        UserUtils.isVip.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">var</span> originValue =  <span class="built_in">this</span>.isVip();</span><br><span class="line">           <span class="built_in">console</span>.warn(<span class="string">&quot;originValue = &quot;</span> + originValue);</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(makeVip,<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://i.loli.net/2021/02/23/pBKbst26HNTkVX7.png" alt="2021-02-23-16-09.png"></p>
]]></content>
      <categories>
        <category>frida</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>frida</tag>
      </tags>
  </entry>
  <entry>
    <title>git-log备注</title>
    <url>/2021/04/27/git-log%E5%A4%87%E6%B3%A8/</url>
    <content><![CDATA[<h5 id="git-log-备注"><a href="#git-log-备注" class="headerlink" title="git log 备注"></a>git log 备注</h5><table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>%H</td>
<td>提交的完整哈希值</td>
</tr>
<tr>
<td>%h</td>
<td>提交的简写哈希值</td>
</tr>
<tr>
<td>%T</td>
<td>树的完整哈希值</td>
</tr>
<tr>
<td>%t</td>
<td>树的简写哈希值</td>
</tr>
<tr>
<td>%P</td>
<td>父提交的完整哈希值</td>
</tr>
<tr>
<td>%p</td>
<td>父提交的简写哈希值</td>
</tr>
<tr>
<td>%an</td>
<td>作者名字</td>
</tr>
<tr>
<td>%ae</td>
<td>作者的电子邮件地址</td>
</tr>
<tr>
<td>%ad</td>
<td>作者修订日期(可以用 –date=选项 来定制格式)</td>
</tr>
<tr>
<td>%ar</td>
<td>作者修订日期，按多久以前的方式显示</td>
</tr>
<tr>
<td>%cn</td>
<td>提交者的名字</td>
</tr>
<tr>
<td>%ce</td>
<td>提交者的电子邮件地址</td>
</tr>
<tr>
<td>%cd</td>
<td>提交日期</td>
</tr>
<tr>
<td>%cr</td>
<td>提交日期(距今多长时间)</td>
</tr>
<tr>
<td>%s</td>
<td>提交说明</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log    </span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/04/30/Csgyt2ej8ScYDdo.png" alt="iShot2021-04-30下午05.45.46.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log --oneline</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/04/30/M6O4d1XrGuHgcwL.png" alt="iShot2021-04-30下午04.00.11.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git shortlog  </span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/04/30/dLzT7g4ODRbXFW8.png" alt="iShot2021-04-30下午04.07.27.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git lg </span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/04/30/YfJw4PqBZ5ozOAa.png" alt="iShot2021-04-30下午04.08.49.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git lg --pretty&#x3D;format:%cr-%s --after&#x3D;&quot;yesterday&quot; --before&#x3D;&quot;2021-04-30&quot; </span><br></pre></td></tr></table></figure>
<p><code>after</code> 的参数可以很丰富 例如 <code>3.weeks.ago</code>、<code>2021-04-20</code>、<code>yesterday</code> ……</p>
<h5 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h5><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取昨天到今天的Git日志信息</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">def</span> getGitLog() &#123;</span><br><span class="line">    <span class="keyword">def</span> todayYmd = <span class="keyword">new</span> Date().format(<span class="string">&quot;yyyy-MM-dd&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> beginYmd =<span class="string">&quot;yesterday&quot;</span></span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;currentTime = &quot;</span> +System.currentTimeMillis())</span><br><span class="line">    StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer()</span><br><span class="line">    stringBuffer.append(<span class="string">&quot; git log&quot;</span>)</span><br><span class="line">    stringBuffer.append(<span class="string">&quot; --pretty=format:%cr-%s&quot;</span>)</span><br><span class="line">    stringBuffer.append(<span class="string">&quot; --after=\&quot;$&#123;beginYmd&#125;\&quot;&quot;</span>)</span><br><span class="line">    stringBuffer.append(<span class="string">&quot; --before=\&quot;$&#123;todayYmd&#125;\&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> cmd = stringBuffer.toString()</span><br><span class="line">    println(<span class="string">&quot;cmd =$cmd&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span>  cmd.execute().text.trim()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取编译当前安装包的时间</span></span><br><span class="line"><span class="keyword">def</span> buildAppTime() &#123;</span><br><span class="line">    <span class="keyword">def</span> buildTime = <span class="keyword">new</span> Date().format(<span class="string">&quot;MM_dd_HH_mm&quot;</span>)</span><br><span class="line"><span class="comment">//    def buildTime = new Date().format(&quot;yyyy_MM_dd_HH_mm&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> buildTime</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出git日志信息到文件中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">def</span> buildLog() &#123;</span><br><span class="line">    FileWriter fw = <span class="keyword">new</span> FileWriter(project.rootDir.absolutePath + File.separator + <span class="string">&quot;log.txt&quot;</span>)</span><br><span class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    builder.append(<span class="string">&quot;[构建时间]=&quot;</span> + buildAppTime())</span><br><span class="line">    builder.append(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">    builder.append(<span class="string">&quot;[版本编号]=&quot;</span> + project.android.defaultConfig.versionCode)</span><br><span class="line">    builder.append(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">    builder.append(<span class="string">&quot;[版本名称]=&quot;</span> + project.android.defaultConfig.versionName)</span><br><span class="line">    builder.append(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">    builder.append(<span class="string">&quot;[提交记录]=\r\n&quot;</span> + getGitLog())</span><br><span class="line">    println(<span class="string">&quot;kkkkk = $&#123;builder.toString()&#125;&quot;</span>)</span><br><span class="line">    fw.write(builder.toString())</span><br><span class="line">    fw.flush()</span><br><span class="line">    fw.close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="重命名打包信息"><a href="#重命名打包信息" class="headerlink" title="重命名打包信息"></a>重命名打包信息</h5><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//备注 gradle插件版本  classpath &#x27;com.android.tools.build:gradle:3.2.0&#x27; </span></span><br><span class="line"><span class="comment">//应用名称缩写</span></span><br><span class="line"><span class="keyword">def</span> APP_NAME_ABBREVIATION = <span class="string">&quot;SXTTPJC&quot;</span></span><br><span class="line"><span class="keyword">def</span> DEFAULT_CHANNEL = <span class="string">&quot;official&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//修改打包后apk的名称</span></span><br><span class="line">    <span class="comment">//给打包出来的Apk修改一下名字</span></span><br><span class="line">    android.applicationVariants.all &#123; variant -&gt;</span><br><span class="line">        variant.outputs.all &#123;</span><br><span class="line"><span class="comment">//            println(&quot;variant = &quot; + variant)</span></span><br><span class="line">            <span class="keyword">def</span> outputDir = variant.getPackageApplication().outputDirectory.getParentFile().getAbsoluteFile()</span><br><span class="line"><span class="comment">//            println(&quot;outputDir = $&#123;outputDir&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//重新定义生成的apk目录信息</span></span><br><span class="line">            <span class="keyword">def</span> newOutputDir = <span class="keyword">new</span> File(outputDir, <span class="string">&quot;$&#123;File.separator&#125;$&#123;APP_NAME_ABBREVIATION&#125;$&#123;File.separator&#125;$&#123;variant.buildType.name&#125;&quot;</span>)</span><br><span class="line">            println(<span class="string">&quot;newOutputDir = $&#123;newOutputDir&#125;&quot;</span>)</span><br><span class="line">            variant.getPackageApplication().outputDirectory = newOutputDir</span><br><span class="line"></span><br><span class="line">            <span class="keyword">def</span> versionName = project.android.defaultConfig.versionName</span><br><span class="line">            <span class="keyword">def</span> versionCode = project.android.defaultConfig.versionCode</span><br><span class="line"><span class="comment">//            versionName = versionName.replaceAll(&quot;\\.&quot;, &quot;_&quot;)</span></span><br><span class="line"><span class="comment">//            def newApkName = &quot;app-$&#123;variant.buildType.name&#125;_$&#123;APP_NAME&#125;_$&#123;DEFAULT_CHANNEL&#125;_$&#123;versionName&#125;_$&#123;versionCode&#125;_$&#123;buildAppTime()&#125;.apk&quot;</span></span><br><span class="line">            <span class="comment">//新的apk名称</span></span><br><span class="line">            <span class="keyword">def</span> newApkName = <span class="string">&quot;$&#123;APP_NAME_ABBREVIATION&#125;_$&#123;DEFAULT_CHANNEL&#125;_$&#123;versionName&#125;_$&#123;variant.buildType.name&#125;_$&#123;buildAppTime()&#125;.apk&quot;</span></span><br><span class="line">            println(<span class="string">&quot;newApkName = &quot;</span> + newApkName)</span><br><span class="line">            outputFileName = newApkName</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line"><span class="comment">//2 </span></span><br><span class="line">   android.applicationVariants.all &#123; variant -&gt;</span><br><span class="line">        variant.outputs.all &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//            def outputDir = variant.getPackageApplication().getOutputDirectory().host</span></span><br><span class="line"><span class="comment">//            println(&quot;outputDir = $&#123;outputDir&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//重新定义生成的apk目录信息</span></span><br><span class="line"><span class="comment">//            def newOutputDir = new File(outputDir, &quot;$&#123;File.separator&#125;$&#123;APP_NAME_ABBREVIATION&#125;$&#123;File.separator&#125;$&#123;variant.buildType.name&#125;&quot;)</span></span><br><span class="line"><span class="comment">//            println(&quot;newOutputDir = $&#123;newOutputDir&#125;&quot;)</span></span><br><span class="line"><span class="comment">//            variant.getPackageApplication().outputDirectory = newOutputDir</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//重新定义生成的apk目录信息</span></span><br><span class="line"><span class="comment">//            def newOutputDir = new File(outputDir, &quot;$&#123;File.separator&#125;$&#123;APP_NAME_ABBREVIATION&#125;$&#123;File.separator&#125;$&#123;variant.buildType.name&#125;&quot;)</span></span><br><span class="line"><span class="comment">//            println(&quot;newOutputDir = $&#123;newOutputDir&#125;&quot;)</span></span><br><span class="line"><span class="comment">//            variant.getPackageApplication().outputDirectory = newOutputDir</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//            def versionName = project.android.defaultConfig.versionName</span></span><br><span class="line"><span class="comment">//            def versionCode = project.android.defaultConfig.versionCode</span></span><br><span class="line"><span class="comment">//            versionName = versionName.replaceAll(&quot;\\.&quot;, &quot;_&quot;)</span></span><br><span class="line"><span class="comment">//            def newApkName = &quot;app-$&#123;variant.buildType.name&#125;_$&#123;APP_NAME&#125;_$&#123;DEFAULT_CHANNEL&#125;_$&#123;versionName&#125;_$&#123;versionCode&#125;_$&#123;buildAppTime()&#125;.apk&quot;</span></span><br><span class="line">                <span class="comment">//新的apk名称</span></span><br><span class="line"><span class="comment">//            def newApkName = &quot;$&#123;APP_NAME_ABBREVIATION&#125;_$&#123;DEFAULT_CHANNEL&#125;_$&#123;versionName&#125;_$&#123;variant.buildType.name&#125;&#125;.apk&quot;</span></span><br><span class="line"><span class="comment">//            println(&quot;newApkName = &quot; + newApkName)</span></span><br><span class="line"><span class="comment">//            outputFileName = newApkName</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            output -&gt;</span><br><span class="line">                println(<span class="string">&quot;\nbuildDir = $&#123;buildDir&#125;&quot;</span>)</span><br><span class="line">                println(<span class="string">&quot;\nandroid = $&#123;android.buildOutputs&#125;&quot;</span>)</span><br><span class="line">                println(<span class="string">&quot;\nvariant = $&#123;variant.getPackageApplicationProvider()&#125;&quot;</span>)</span><br><span class="line">                println(<span class="string">&quot;\noutput = $output&quot;</span>)</span><br><span class="line">                println(<span class="string">&quot;\noutputFileName = $output.outputFileName&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        variant.getAssembleProvider().get().doLast&#123;</span><br><span class="line">            println(<span class="string">&quot;..........copy file begin.........&quot;</span>)</span><br><span class="line">            variant.outputs.forEach&#123;</span><br><span class="line">                file -&gt;</span><br><span class="line">                    println(<span class="string">&quot;\nfile = $&#123;file.outputFile&#125;&quot;</span>)</span><br><span class="line">                    copy&#123;</span><br><span class="line">                        from file.outputFile</span><br><span class="line">                        into <span class="keyword">new</span> File(<span class="string">&quot;/Users/xxx/apk&quot;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            println(<span class="string">&quot;..........copy file end.........&quot;</span>)</span><br><span class="line"></span><br><span class="line">            println(<span class="string">&quot;..........ok.........&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://www.cnblogs.com/EnSnail/p/6772454.html">参考1</a></p>
<p><a href="https://www.runoob.com/git/git-commit-history.html">参考2</a></p>
<p><a href="https://blog.csdn.net/byhook/article/details/51746825">参考3</a></p>
<p><a href="https://git-scm.com/docs/git-log">官网</a></p>
<p><a href="https://blog.csdn.net/smallbabylong/article/details/111276762">apk打包命名</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>apk代码混淆备注学习</title>
    <url>/2021/04/04/apk%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="Apk代码混淆"><a href="#Apk代码混淆" class="headerlink" title="Apk代码混淆"></a>Apk代码混淆</h4><ul>
<li><p>增加反编译后代码阅读成本</p>
</li>
<li><p>代码压缩</p>
</li>
<li><p>代码优化</p>
<p><code>依赖 -&gt; main -&gt; 渠道 -&gt; 构建类型</code>  - 合并资源时顺序</p>
</li>
</ul>
<h4 id="开启混淆"><a href="#开启混淆" class="headerlink" title="开启混淆"></a>开启混淆</h4><p>在module项目中的<code>build.gradle</code>文件中配置<code>minifyEnabled</code>为<code>true</code>，<br>混淆规则内容一般写在<code>proguard-rules.pro</code><br>一般<code>proguard-rules.pro</code>文件和<code>build.gradle</code>文件在同一目录</p>
<p><img src="https://i.loli.net/2021/04/07/2Ulb7yq41I9NmE5.png" alt="iShot2021-04-07上午11.44.39.png"></p>
<h4 id="开启混淆生成文件"><a href="#开启混淆生成文件" class="headerlink" title="开启混淆生成文件"></a>开启混淆生成文件</h4><p>生成的混淆文件信息  <code>app\build\outputs\mapping</code>  目录下,根据 <code>usage.txt</code> 文件查看是否有被误移除的代码。</p>
<p><img src="https://i.loli.net/2021/04/09/5Zbel2OpHLhERGS.png" alt="iShot2021-04-09上午10.22.24.png"></p>
<table>
<thead>
<tr>
<th>文件</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>configuration.txt</td>
<td>混淆信息</td>
</tr>
<tr>
<td>mapping.txt</td>
<td>混淆前后类、方法、类成员等的对照表</td>
</tr>
<tr>
<td>seeds.txt</td>
<td>没有被混淆的类和成员</td>
</tr>
<tr>
<td>usage.txt</td>
<td>被移除的代码</td>
</tr>
</tbody></table>
<h4 id="混淆参数说明"><a href="#混淆参数说明" class="headerlink" title="混淆参数说明"></a>混淆参数说明</h4><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-optimizationpasses</td>
<td>代码混淆的压缩比例</td>
</tr>
<tr>
<td>-dontusemixedcaseclassnames</td>
<td>混淆后类型都为小写</td>
</tr>
<tr>
<td>-dontskipnonpubliclibraryclasses</td>
<td>不去忽略非公共的库类</td>
</tr>
<tr>
<td>-dontoptimize</td>
<td>不优化输入的类文件</td>
</tr>
<tr>
<td>-dontpreverify</td>
<td>不做预校验的操作</td>
</tr>
<tr>
<td>-ignorewarnings</td>
<td>忽略警告</td>
</tr>
<tr>
<td>-verbose</td>
<td>混淆时是否记录日志</td>
</tr>
<tr>
<td>-dontnote</td>
<td>指定不打印有关配置中可能的错误或遗漏的注释</td>
</tr>
<tr>
<td>-dontwarn</td>
<td>指定不警告有关未解决的引用和其他重要问题</td>
</tr>
<tr>
<td>-keepattributes <em>Annotation</em></td>
<td>保护注解</td>
</tr>
<tr>
<td>-printmapping proguardMapping.txt</td>
<td>生成原类名和混淆后的类名的映射文件</td>
</tr>
<tr>
<td>-optimizations !code/simplification/cast,!field/,!class/merging/</td>
<td>指定混淆是采用的算法</td>
</tr>
<tr>
<td>-keepparameternames</td>
<td>指定保留所保存方法的参数名称和类型</td>
</tr>
<tr>
<td>-keeppackagenames</td>
<td>指定不混淆给定的软件包名称</td>
</tr>
<tr>
<td>-flattenpackagehierarchy</td>
<td>将所有重命名的软件包重新打包</td>
</tr>
<tr>
<td>-repackageclasses</td>
<td>将所有重命名的类文件重新打包</td>
</tr>
<tr>
<td>-obfuscationdictionary</td>
<td>指定外部模糊字典</td>
</tr>
<tr>
<td>-classobfuscationdictionary</td>
<td>指定class模糊字典</td>
</tr>
<tr>
<td>-packageobfuscationdictionary</td>
<td>指定package模糊字典</td>
</tr>
</tbody></table>
<h4 id="keep说明"><a href="#keep说明" class="headerlink" title="keep说明"></a>keep说明</h4><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-keep</td>
<td>防止类和成员被移除或者被重命名</td>
</tr>
<tr>
<td>-keepnames</td>
<td>防止类和成员被重命名</td>
</tr>
<tr>
<td>-keepclassmembers</td>
<td>防止成员被移除或者被重命名</td>
</tr>
<tr>
<td>-keepclassmembernames</td>
<td>防止成员被重命名</td>
</tr>
<tr>
<td>-keepclasseswithmembers</td>
<td>防止拥有该成员的类和成员被移除或者被重命名</td>
</tr>
<tr>
<td>-keepclasseswithmembernames</td>
<td>防止拥有该成员的类和成员被重命名</td>
</tr>
</tbody></table>
<p>keep 类修饰符 class 类名称 限定符 类{ }   例如  <code>-keep public class * extends   androidx.**</code> </p>
<ul>
<li>类修饰符：<code>public</code>、<code>protected</code>、<code>private</code></li>
<li><code>*</code> 匹配任意长度字符，但不含包名分隔符(.) </li>
<li><code>**</code> 匹配任意长度字符，并且包含包名分隔符(.) </li>
<li><code>extends</code> 可以指定类的基类 </li>
<li><code>implement</code> 匹配实现了某接口的类 </li>
<li><code>$</code> 内部类</li>
</ul>
<h4 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h4><p><code>-keep class com.xx.xx.**</code> 、<code>-keep class com.xx.xx.*</code></p>
<ul>
<li><code>**</code> 表示本包和所含子包下的类名都保持</li>
<li><code>*</code> 表示只是保持该包下的类名</li>
</ul>
<p><code>-keep class com.example.bean.** &#123; *; &#125;</code></p>
<ul>
<li>表示本包和所含子包下的类名都保持，方法名和变量名也都保持</li>
</ul>
<p><code>-keep public class com.xx.Test &#123; *; &#125;</code> 不混淆com.xx.Test类<br><code>-keep class com.xx.** &#123;*;&#125;</code> 不混淆com.xx包下所有类<br><code>-keep public class * extends com.xx.Test &#123; *; &#125;</code>  不混淆某个类的子类<br><code>-keep public class **.*model*.** &#123; *; &#125; </code> 不混淆所有类名中包含了“model”的类及其成员</p>
<p><code>-kepp class * implements com.xx.TestInterface &#123; *; &#125;</code> 不混淆TestInterface接口的实现</p>
<p><code>-keepclassmembers class com.xx.Test &#123; public (); &#125;</code>  不混淆Test的构造方法<br><code>-keepclassmembers class com.xx.Test &#123; public void test( java.lang.String )&#125;</code>  不混淆Test的特定的test方法</p>
<p><code>-keep class com.xx.Test$* &#123; *; &#125;</code> 不混淆Test类的内部类</p>
<h4 id="资源保持规则"><a href="#资源保持规则" class="headerlink" title="资源保持规则"></a>资源保持规则</h4><p><code>shrinkResources true</code> 未被使用的资源默认被移除</p>
<p>在 <code>res/raw/</code> 路径下创建一个 xml 文件，例如 <code>keep.xml</code></p>
<ul>
<li><code>tools:keep</code> 定义哪些资源需要被保留（资源之间用“,”隔开） </li>
<li><code>tools:discard</code> 定义哪些资源需要被移除（资源之间用“,”隔开） </li>
<li><code>tools:shrinkMode</code> 开启严格模式</li>
</ul>
<h4 id="模板代码"><a href="#模板代码" class="headerlink" title="模板代码"></a>模板代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#############################################</span><br><span class="line">#</span><br><span class="line"># 对于一些基本指令的添加</span><br><span class="line">#</span><br><span class="line">#############################################</span><br><span class="line"># 代码混淆压缩比，在0~7之间，默认为5，一般不做修改</span><br><span class="line">-optimizationpasses <span class="number">5</span></span><br><span class="line"></span><br><span class="line"># 混合时不使用大小写混合，混合后的类名为小写</span><br><span class="line">-dontusemixedcaseclassnames</span><br><span class="line"></span><br><span class="line"># 指定不去忽略非公共库的类</span><br><span class="line">-dontskipnonpubliclibraryclasses</span><br><span class="line"></span><br><span class="line"># 这句话能够使我们的项目混淆后产生映射文件</span><br><span class="line"># 包含有类名-&gt;混淆后类名的映射关系</span><br><span class="line">-verbose</span><br><span class="line"></span><br><span class="line"># 指定不去忽略非公共库的类成员</span><br><span class="line">-dontskipnonpubliclibraryclassmembers</span><br><span class="line"></span><br><span class="line"># 不做预校验，preverify是proguard的四个步骤之一，Android不需要preverify，去掉这一步能够加快混淆速度。</span><br><span class="line">-dontpreverify</span><br><span class="line"></span><br><span class="line"># 保留Annotation不混淆</span><br><span class="line">-keepattributes *Annotation*,InnerClasses</span><br><span class="line"></span><br><span class="line"># 避免混淆泛型</span><br><span class="line">-keepattributes Signature</span><br><span class="line"></span><br><span class="line"># 抛出异常时保留代码行号</span><br><span class="line">-keepattributes SourceFile,LineNumberTable</span><br><span class="line"></span><br><span class="line"># 指定混淆是采用的算法，后面的参数是一个过滤器</span><br><span class="line"># 这个过滤器是谷歌推荐的算法，一般不做更改</span><br><span class="line">-optimizations !code/simplification/cast,!field<span class="comment">/*,!class/merging/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#############################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Android开发中一些需要保留的公共部分</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#############################################</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 保留我们使用的四大组件，自定义的Application等等这些类不被混淆</span></span><br><span class="line"><span class="comment"># 因为这些子类都有可能被外部调用</span></span><br><span class="line"><span class="comment">-keep public class * extends android.app.Activity</span></span><br><span class="line"><span class="comment">-keep public class * extends android.app.Appliction</span></span><br><span class="line"><span class="comment">-keep public class * extends android.app.Service</span></span><br><span class="line"><span class="comment">-keep public class * extends android.content.BroadcastReceiver</span></span><br><span class="line"><span class="comment">-keep public class * extends android.content.ContentProvider</span></span><br><span class="line"><span class="comment">-keep public class * extends android.app.backup.BackupAgentHelper</span></span><br><span class="line"><span class="comment">-keep public class * extends android.preference.Preference</span></span><br><span class="line"><span class="comment">-keep public class * extends android.view.View</span></span><br><span class="line"><span class="comment">-keep public class com.android.vending.licensing.ILicensingService</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 保留support下的所有类及其内部类</span></span><br><span class="line"><span class="comment">-keep class android.support.** &#123;*;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 保留继承的</span></span><br><span class="line"><span class="comment">-keep public class * extends android.support.v4.**</span></span><br><span class="line"><span class="comment">-keep public class * extends android.support.v7.**</span></span><br><span class="line"><span class="comment">-keep public class * extends android.support.annotation.**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 保留R下面的资源</span></span><br><span class="line"><span class="comment">-keep class **.R$* &#123;*;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 保留本地native方法不被混淆</span></span><br><span class="line"><span class="comment">-keepclasseswithmembernames class * &#123;</span></span><br><span class="line"><span class="comment">    native &lt;methods&gt;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 保留在Activity中的方法参数是view的方法，</span></span><br><span class="line"><span class="comment"># 这样以来我们在layout中写的onClick就不会被影响</span></span><br><span class="line"><span class="comment">-keepclassmembers class * extends android.app.Activity&#123;</span></span><br><span class="line"><span class="comment">    public void *(android.view.View);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 保留枚举类不被混淆</span></span><br><span class="line"><span class="comment">-keepclassmembers enum * &#123;</span></span><br><span class="line"><span class="comment">    public static **[] values();</span></span><br><span class="line"><span class="comment">    public static ** valueOf(java.lang.String);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 保留我们自定义控件（继承自View）不被混淆</span></span><br><span class="line"><span class="comment">-keep public class * extends android.view.View&#123;</span></span><br><span class="line"><span class="comment">    *** get*();</span></span><br><span class="line"><span class="comment">    void set*(***);</span></span><br><span class="line"><span class="comment">    public &lt;init&gt;(android.content.Context);</span></span><br><span class="line"><span class="comment">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);</span></span><br><span class="line"><span class="comment">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 保留Parcelable序列化类不被混淆</span></span><br><span class="line"><span class="comment">-keep class * implements android.os.Parcelable &#123;</span></span><br><span class="line"><span class="comment">    public static final android.os.Parcelable$Creator *;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 保留Serializable序列化的类不被混淆</span></span><br><span class="line"><span class="comment">-keepclassmembers class * implements java.io.Serializable &#123;</span></span><br><span class="line"><span class="comment">    static final long serialVersionUID;</span></span><br><span class="line"><span class="comment">    private static final java.io.ObjectStreamField[] serialPersistentFields;</span></span><br><span class="line"><span class="comment">    !static !transient &lt;fields&gt;;</span></span><br><span class="line"><span class="comment">    !private &lt;fields&gt;;</span></span><br><span class="line"><span class="comment">    !private &lt;methods&gt;;</span></span><br><span class="line"><span class="comment">    private void writeObject(java.io.ObjectOutputStream);</span></span><br><span class="line"><span class="comment">    private void readObject(java.io.ObjectInputStream);</span></span><br><span class="line"><span class="comment">    java.lang.Object writeReplace();</span></span><br><span class="line"><span class="comment">    java.lang.Object readResolve();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 对于带有回调函数的onXXEvent、**On*Listener的，不能被混淆</span></span><br><span class="line"><span class="comment">-keepclassmembers class * &#123;</span></span><br><span class="line"><span class="comment">    void *(**On*Event);</span></span><br><span class="line"><span class="comment">    void *(**On*Listener);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># webView处理，项目中没有使用到webView忽略即可</span></span><br><span class="line"><span class="comment">-keepclassmembers class fqcn.of.javascript.interface.for.webview &#123;</span></span><br><span class="line"><span class="comment">    public *;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">-keepclassmembers class * extends android.webkit.webViewClient &#123;</span></span><br><span class="line"><span class="comment">    public void *(android.webkit.WebView, java.lang.String, android.graphics.Bitmap);</span></span><br><span class="line"><span class="comment">    public boolean *(android.webkit.WebView, java.lang.String);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">-keepclassmembers class * extends android.webkit.webViewClient &#123;</span></span><br><span class="line"><span class="comment">    public void *(android.webkit.webView, jav.lang.String);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://www.guardsquare.com/en/products/proguard">proguard官网</a></p>
<p><a href="https://www.huaweicloud.com/articles/ae151e2f60923097cefc473bd131addf.html">参考1</a></p>
<p><a href="https://blog.si-yee.com/2019/04/12/Android%E6%B7%B7%E6%B7%86-Proguard-%E8%AF%A6%E8%A7%A3/">参考2</a></p>
<p><a href="https://github.com/WrBug/FrenziedProguard">参考3-生成汉字混淆文件</a></p>
<p><a href="http://blog.skymxc.com/2018/06/03/Proguard/">参考4</a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Hexo</title>
    <url>/2020/12/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<div class="justified-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg"><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg"><br><img src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg"><br><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg"><br><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg"><br><img src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg"><br><img src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg"><br><img src="https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg"></p>
          </div>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>cross platform 个人认知</title>
    <url>/2021/01/02/cross-platform/</url>
    <content><![CDATA[<h2 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">目前流行的跨平台WebApp开发技术的特点,使用 HTML5 + CSS + JavaScript 开发、跨平台重用代码、丰富的</span><br><span class="line">UI库、提供访问设备原生API的 JavaScript API 包装器、提供打包、部署的工具或服务……，Cordova、Ionic、</span><br><span class="line">AppCan、DCloud、APICloud、React Native、Flutter</span><br></pre></td></tr></table></figure>


<h3 id="Cordova"><a href="#Cordova" class="headerlink" title="Cordova"></a>Cordova</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cordova是Apache软件基金会的一个产品。其前身是PhoneGap，由Nitobi开发，2011年10月，</span><br><span class="line">Adobe收购了Nitobi，并且PhoneGap项目也被贡献给Apache软件基金会。Apache在2012年12月，发布了Cordova。</span><br></pre></td></tr></table></figure>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>开源免费，发展早，社区生态成熟、资源多，插件丰富。</li>
<li>支持离线场景应用，开发工具选择空间大</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>在低端设备上，由于webview性能的原因，使用其他UI框架和JavaScript框架时，体验不好， 只提供基础访问设备的接口。</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://cordova.axuer.com/docs/zh-cn/latest/">中文文档</a> </p>
<h2 id="Ionic"><a href="#Ionic" class="headerlink" title="Ionic"></a>Ionic</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ionic是一个开源的移动应用程序开发框架，它可以轻松地使用web技术构建高质量的跨平台的移动应用。可以让我们</span><br><span class="line">快速开发移动App、移动端WEB页面、微信公众平台应用，混合app web页面。</span><br></pre></td></tr></table></figure>
<h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul>
<li>基于 Cordova</li>
<li>漂亮的界面，追求性能，专注原生，免费开源</li>
<li>Angular JS MVVM 开发理念，数据双向绑定</li>
<li>继承自 Cordova，可以使用 Cordova 的插件</li>
</ul>
<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>Angular JS 学习路线陡峭</li>
<li>Ionic 框架相比于原生的 Cordova 有所差异，Cordova 某些官方插件可能不适用于Ionic</li>
</ul>
<h4 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h4><p><a href="http://www.ionic.wang/">中文文档</a></p>
<h3 id="AppCan"><a href="#AppCan" class="headerlink" title="AppCan"></a>AppCan</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AppCan作为中国Hybrid混合应用开发、移动平台、移动云平台的倡导者，以“免费+开源+开放”的互联网模式，为广大</span><br><span class="line">开发者提供一站式的移动应用开发支持服务。通过AppCan IDE集成开发系统、云端打包器等，快速开发出Android、</span><br><span class="line">iOS、WP平台上的移动应用。</span><br></pre></td></tr></table></figure>
<h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ul>
<li>提供一体化解决方案，方便环境搭建、开发、调试、发布</li>
<li>框架自带UI包，包含常用控件样式，框架对UI、动画渲染进行过优化，反应速度快</li>
<li>支持本地打包、云端打包</li>
</ul>
<h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>不开源，无法修改、优化底层代码，文档偏少，分大众版和企业版，大众版免费，但功能有缺失</li>
<li>……</li>
</ul>
<h4 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.appcan.cn/">AppCan官网</a></p>
<h2 id="DCloud"><a href="#DCloud" class="headerlink" title="DCloud"></a>DCloud</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DCloud大部分产品开源，W3C会员单位，HTML5中国产业联盟的发起公司之一。旗下产品有：HBuilder、Uni-app、</span><br><span class="line">5+Runtime、MUI等</span><br></pre></td></tr></table></figure>
<h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><ul>
<li>国内厂商，中文文档，MUI 更贴近国内App使用习惯，提供模块的详细例子，如登录，个人中心</li>
<li>对HTML5的性能、工具、能力都做了深入扩展，提供 IDE 、云服务等帮助节省时间</li>
</ul>
<h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>部分操作需要具备原生开发经验，如离线打包App</li>
<li>新产品仍然有bug，还需改进</li>
</ul>
<h4 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h4><p><a href="https://dcloud.io/">DCloud官网</a><br><img src="https://i.loli.net/2021/02/24/3xCWRHbwt8p5JYV.png" alt="DCloud学习路线"></p>
<h3 id="APICloud"><a href="#APICloud" class="headerlink" title="APICloud"></a>APICloud</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">APICloud提供原生应用的功能模块（设备访问，界面布局，开放SDK等），开发者可以通过JS用。前端工程师负责页面</span><br><span class="line">布局，UI展现，及简单的交互，原生模块负责性能方面和功能实现，两者结合形成一个完整的应用。同时APICloud提供</span><br><span class="line">了云数据库的功能，前端不必了解PHP，Node.js等后端语言，通过JS接口或Restful API实现数据库的增删改查。 </span><br><span class="line">但是APICloud的更新速度很快，版本不太稳定。而且，它是为不懂APP开发的人士准备的，不适合科技公司和程序员。</span><br></pre></td></tr></table></figure>
<h4 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h4><ul>
<li>不懂原生开发，不懂后台语言就可完成APP</li>
</ul>
<h4 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>更新速度快，版本不够稳定</li>
<li>面向不懂App开发人群，不适合程序员和科技公司，过度依赖会降低技术水平</li>
<li>名声不好，涉嫌抄袭DCloud大量代码，<a href="https://www.zhihu.com/question/30994540?sort">参考</a></li>
</ul>
<h4 id="参考-4"><a href="#参考-4" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.apicloud.com/">APICloud</a></p>
<h2 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">能够在Javascript和React的基础上获得完全一致的开发体验，构建世界一流的原生APP。仅需学习一次，编写任何</span><br><span class="line">平台。(Learn once, write anywhere)。</span><br></pre></td></tr></table></figure>
<h4 id="优点-5"><a href="#优点-5" class="headerlink" title="优点"></a>优点</h4><ul>
<li>性能体验高于Hybrid,与原生体验差不多</li>
<li>开发人员可以做到,一次学习,跨平台开发</li>
</ul>
<h4 id="缺点-5"><a href="#缺点-5" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>初次学习成本高</li>
<li>必须在不同平台下写两套代码，依赖暴露的接口</li>
</ul>
<h4 id="参考-5"><a href="#参考-5" class="headerlink" title="参考"></a>参考</h4><p><a href="https://reactnative.cn/">RN中文</a></p>
<h3 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。 Flutter可以与现有的代码</span><br><span class="line">一起工作。在全世界，Flutter正在被越来越多的开发者和组织使用，并且Flutter是完全免费、开源的。</span><br></pre></td></tr></table></figure>
<h4 id="优点-6"><a href="#优点-6" class="headerlink" title="优点"></a>优点</h4><ul>
<li>性能与原生体验差不多</li>
<li>热重载，丰富的控件以及开发工具</li>
</ul>
<h4 id="缺点-6"><a href="#缺点-6" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>代码嵌套地狱，Dart语言虽然易学易用，也需要一定的学习成本</li>
<li>架构和状态管理模式还不够成熟</li>
</ul>
<h4 id="参考-6"><a href="#参考-6" class="headerlink" title="参考"></a>参考</h4><p><a href="https://flutterchina.club/">Flutter中文</a></p>
<h3 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a>其他参考</h3><p><a href="https://www.cnblogs.com/pangguoming/p/9296512.html">https://www.cnblogs.com/pangguoming/p/9296512.html</a></p>
<p><a href="https://www.cnblogs.com/songxingzheng/p/6482697.html">https://www.cnblogs.com/songxingzheng/p/6482697.html</a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>flutter</tag>
        <tag>dcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>java 23中设计模式</title>
    <url>/2018/08/27/java-design-pattern-mark/</url>
    <content><![CDATA[<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><ul>
<li><h5 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a><a href="#1">面向对象</a></h5><ol>
<li><a href="#1.1">OO特征</a></li>
<li><a href="#1.2">OO原则</a></li>
<li><a href="#1.3">设计模式一览</a></li>
</ol>
</li>
<li><h5 id="单例模式-Singleton"><a href="#单例模式-Singleton" class="headerlink" title="单例模式(Singleton)"></a><a href="#2">单例模式(Singleton)</a></h5><ol>
<li><a href="#2.1">意图</a></li>
<li><a href="#2.2">类图</a></li>
<li><a href="#2.3">单例模式VS静态变量</a></li>
</ol>
</li>
<li><h5 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a><a href="#3">策略模式</a></h5><ol>
<li><a href="#3.1">定义</a></li>
<li><a href="#3.2">类图</a></li>
<li><a href="#3.3">应用：TimeInterpolator</a></li>
</ol>
</li>
<li><h5 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a><a href="#4">观察者模式</a></h5><ol>
<li><a href="#4.1">定义</a></li>
<li><a href="#4.2">类图</a></li>
</ol>
</li>
<li><h5 id="装饰者模式-Decorator"><a href="#装饰者模式-Decorator" class="headerlink" title="装饰者模式(Decorator)"></a><a href="#5">装饰者模式(Decorator)</a></h5><ol>
<li><a href="#5.1">意图</a></li>
<li><a href="#5.2">类图</a></li>
</ol>
</li>
<li><h5 id="工厂方法模式-Factory-Method"><a href="#工厂方法模式-Factory-Method" class="headerlink" title="工厂方法模式(Factory Method)"></a><a href="#6">工厂方法模式(Factory Method)</a></h5><ol>
<li><a href="#6.1">意图</a></li>
<li><a href="#6.2">类图</a></li>
<li><a href="#6.3">应用:ThreadFactory</a></li>
</ol>
</li>
<li><h5 id="抽象工厂模式-Abstract-Factory"><a href="#抽象工厂模式-Abstract-Factory" class="headerlink" title="抽象工厂模式(Abstract Factory)"></a><a href="#7">抽象工厂模式(Abstract Factory)</a></h5><ol>
<li><a href="#7.1">意图</a></li>
<li><a href="#7.2">类图</a></li>
</ol>
</li>
<li><h5 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a><a href="#8">命令模式</a></h5><ol>
<li><a href="#8.1">定义</a></li>
<li><a href="#8.2">类图</a></li>
<li><a href="#8.3">应用:ThreadPoolExecutor</a></li>
</ol>
</li>
<li><h5 id="适配器模式-Adapter"><a href="#适配器模式-Adapter" class="headerlink" title="适配器模式(Adapter)"></a><a href="#9">适配器模式(Adapter)</a></h5><ol>
<li><a href="#9.1">意图</a></li>
<li><a href="#9.2">类图</a></li>
</ol>
</li>
<li><h5 id="外观模式-Facade"><a href="#外观模式-Facade" class="headerlink" title="外观模式(Facade)"></a><a href="#10">外观模式(Facade)</a></h5><ol>
<li><a href="#10.1">意图</a></li>
<li><a href="#10.2">类图</a></li>
</ol>
</li>
<li><h5 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a><a href="#11">模板方法模式</a></h5><ol>
<li><a href="#11.1">定义</a></li>
<li><a href="#11.2">类图</a></li>
<li><a href="#11.3">应用:View.draw</a></li>
</ol>
</li>
<li><h5 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a><a href="#12">迭代器模式</a></h5><ol>
<li><a href="#12.1">定义</a></li>
<li><a href="#12.2">类图</a></li>
</ol>
</li>
<li><h5 id="组合模式-Composite"><a href="#组合模式-Composite" class="headerlink" title="组合模式(Composite)"></a><a href="#13">组合模式(Composite)</a></h5><ol>
<li><a href="#13.1">意图</a></li>
<li><a href="#13.2">类图</a></li>
</ol>
</li>
<li><h5 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a><a href="#14">状态模式</a></h5><ol>
<li><a href="#14.1">定义</a></li>
<li><a href="#14.2">类图</a></li>
</ol>
</li>
<li><h5 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a><a href="#15">代理模式</a></h5><ol>
<li><a href="#15.1">定义</a></li>
<li><a href="#15.2">远程代理</a></li>
<li><a href="#15.3">保护代理</a></li>
<li><a href="#15.4">同步代理</a></li>
</ol>
</li>
<li><h5 id="建造者模式-Builder"><a href="#建造者模式-Builder" class="headerlink" title="建造者模式(Builder)"></a><a href="#16">建造者模式(Builder)</a></h5><ol>
<li><a href="#16.1">意图</a></li>
<li><a href="#16.2">类图</a></li>
</ol>
</li>
<li><h5 id="桥接模式-Bridge"><a href="#桥接模式-Bridge" class="headerlink" title="桥接模式(Bridge)"></a><a href="#17">桥接模式(Bridge)</a></h5><ol>
<li><a href="#17.1">意图</a></li>
<li><a href="#17.2">类图</a></li>
</ol>
</li>
<li><h5 id="原型模式-Prototype"><a href="#原型模式-Prototype" class="headerlink" title="原型模式(Prototype)"></a><a href="#18">原型模式(Prototype)</a></h5><ol>
<li><a href="#18.1">意图</a></li>
<li><a href="#18.2">类图</a></li>
</ol>
</li>
<li><h5 id="享元模式-Flyweight"><a href="#享元模式-Flyweight" class="headerlink" title="享元模式(Flyweight)"></a><a href="#19">享元模式(Flyweight)</a></h5><ol>
<li><a href="#19.1">意图</a></li>
<li><a href="#19.2">类图</a></li>
</ol>
</li>
<li><h5 id="责任链模式-Chain-Of-Responsibility"><a href="#责任链模式-Chain-Of-Responsibility" class="headerlink" title="责任链模式(Chain Of Responsibility)"></a><a href="#20">责任链模式(Chain Of Responsibility)</a></h5><ol>
<li><a href="#20.1">意图</a></li>
<li><a href="#20.2">类图</a></li>
</ol>
</li>
<li><h5 id="解释器模式-Interpreter"><a href="#解释器模式-Interpreter" class="headerlink" title="解释器模式(Interpreter)"></a><a href="#21">解释器模式(Interpreter)</a></h5><ol>
<li><a href="#21.1">意图</a></li>
<li><a href="#21.2">类图</a></li>
</ol>
</li>
<li><h5 id="中介者模式-Mediator"><a href="#中介者模式-Mediator" class="headerlink" title="中介者模式(Mediator)"></a><a href="#22">中介者模式(Mediator)</a></h5><ol>
<li><a href="#22.1">意图</a></li>
<li><a href="#22.2">类图</a></li>
</ol>
</li>
<li><h5 id="备忘录模式-Memento"><a href="#备忘录模式-Memento" class="headerlink" title="备忘录模式(Memento)"></a><a href="#23">备忘录模式(Memento)</a></h5><ol>
<li><a href="#23.1">意图</a></li>
<li><a href="#23.2">类图</a></li>
</ol>
</li>
<li><h5 id="访问者模式-Visitor"><a href="#访问者模式-Visitor" class="headerlink" title="访问者模式(Visitor)"></a><a href="#24">访问者模式(Visitor)</a></h5><ol>
<li><a href="#24.1">意图</a></li>
<li><a href="#24.2">类图</a></li>
</ol>
</li>
</ul>
<h3 id="1">面向对象</h3>

<h4 id="1.1">OO特征</h4>

<img src="https://i.loli.net/2021/04/09/qU9fmkowN2du3Br.png" alt="image.png" style="zoom:67%;" />

<h4 id="1.2">OO原则</h4>

<img src="https://i.loli.net/2021/04/09/2MTKZonjUvzXSRi.png" alt="image.png" style="zoom:67%;" />

<h4 id="1.3">设计模式一览</h4>

<img src="https://i.loli.net/2021/04/09/GNTYxEz1SktXDO5.png" alt="image.png" style="zoom:67%;" />

<h3 id="2">单例模式(Singleton)</h3>

<h4 id="2.1">意图</h4> 

<p>确保一个类只有一个实例，并提供一个全局访问点。</p>
<h4 id="2.2">类图</h4> 

<img src="https://i.loli.net/2021/04/09/DAtpxa1KSgUf3ZP.png" alt="image.png" style="zoom:67%;" />

<h4 id="2.3">单例模式VS静态变量</h4>

<img src="https://i.loli.net/2021/04/09/F4zimr9Hwl5IQxT.png" alt="image.png" style="zoom:67%;" />

<h3 id="3">策略模式</h3>

<h4 id="3.1">定义</h4> 

<p>定义算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</p>
<h4 id="3.2">类图</h4> 

<p>以动画时间插值器为例：</p>
<img src="https://i.loli.net/2021/04/09/mDSV4qJxNEt6ulj.png" alt="image.png" style="zoom:67%;" />

<h4 id="3.3">应用:TimeInterpolator</h4>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueAnimator</span> <span class="keyword">extends</span> <span class="title">Animator</span> <span class="keyword">implements</span> <span class="title">AnimationHandler</span>.<span class="title">AnimationFrameCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The time interpolator to be used if none is set on the animation</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> TimeInterpolator sDefaultInterpolator =</span><br><span class="line">            <span class="keyword">new</span> AccelerateDecelerateInterpolator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TimeInterpolator mInterpolator = sDefaultInterpolator;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInterpolator</span><span class="params">(TimeInterpolator value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mInterpolator = value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mInterpolator = <span class="keyword">new</span> LinearInterpolator();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">animateValue</span><span class="params">(<span class="keyword">float</span> fraction)</span> </span>&#123;</span><br><span class="line">        fraction = mInterpolator.getInterpolation(fraction);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4">观察者模式</h3>

<h4 id="4.1">定义</h4> 

<p>定义对象间一对多的依赖，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。</p>
<h4 id="4.2">类图</h4> 

<p>以ListView用到的观察者模式为例：</p>
<p><img src="https://i.loli.net/2021/04/09/PV5K8RoZQ3z4nWH.png" alt="image.png"></p>
<h3 id="5">装饰者模式(Decorator)</h3>

<h4 id="5.1">意图</h4> 

<p>动态地将责任附加到对象上。想要扩展功能，装饰者提供有别于继承的另一种选择。</p>
<h4 id="5.2">类图</h4> 

<p>以InputStream为例：</p>
<img src="../assets/images/edraw/uml_decorator.png?v=1" width="470">

<h3 id="6">工厂方法模式(Factory Method)</h3>

<h4 id="6.1">意图</h4> 

<p>定义一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化延迟到子类。</p>
<h4 id="6.2">类图</h4> 

<img src="../assets/images/edraw/uml_factoryMethod.png?v=1" width="600">

<h4 id="6.3">应用:ThreadFactory</h4> 

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ThreadFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Thread <span class="title">newThread</span><span class="params">(Runnable r)</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7">抽象工厂模式(Abstract Factory)</h3>

<h4 id="7.1">意图</h4> 

<p>提供一个创建一系列相关或相互依赖的对象的接口，而无需指定它们具体的类。</p>
<h4 id="7.2">类图</h4> 

<img src="../assets/images/edraw/uml_abstractFactory.png?v=1" width="900">

<h3 id="8">命令模式</h3>

<h4 id="8.1">定义</h4> 

<p>将请求封装成对象。</p>
<h4 id="8.2">类图</h4> 

<p>以线程池为例：</p>
<img src="../assets/images/edraw/uml_command.png" width="770">

<h4 id="8.3">应用:ThreadPoolExecutor</h4>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="9">适配器模式(Adapter)</h3>

<h4 id="9.1">意图</h4> 

<p>将一个类的接口，转换成客户期望的另一个接口。适配器让原本不兼容的类可以合作无间。</p>
<h4 id="9.2">类图</h4> 

<p>以ListView为例：</p>
<img src="../assets/images/edraw/uml_adapter.png?v=1" width="600">

<h3 id="10">外观模式(Facade)</h3>

<h4 id="10.1">意图</h4> 

<p>为子系统提供一个接口，便于它的使用。</p>
<h4 id="10.2">类图</h4> 

<img src="../assets/images/edraw/uml_facade.png?v=1" width="660">

<h3 id="11">模板方法模式</h3>

<h4 id="11.1">定义</h4> 

<p>在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。</p>
<h4 id="11.2">类图</h4> 

<p>以View的绘制流程为例：</p>
<img src="../assets/images/edraw/uml_templateMethod.png" width="680">

<h4 id="11.3">应用:View.draw</h4>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// draw the background, if needed</span></span><br><span class="line">    drawBackground(canvas);</span><br><span class="line">    <span class="comment">// draw the content</span></span><br><span class="line">    <span class="keyword">if</span> (!dirtyOpaque) onDraw(canvas);</span><br><span class="line">    <span class="comment">// draw the children</span></span><br><span class="line">    dispatchDraw(canvas);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="12">迭代器模式</h3>

<h4 id="12.1">定义</h4> 

<p>封装遍历，提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。</p>
<h4 id="12.2">类图</h4> 

<p>以List为例：</p>
<img src="../assets/images/edraw/uml_iterator.png" width="630">

<h3 id="13">组合模式(Composite)</h3>

<h4 id="13.1">意图</h4> 

<p>让客户以一致的方式处理个别对象以及对象组合。</p>
<h4 id="13.2">类图</h4> 

<img src="../assets/images/edraw/uml_composite.png?v=1" width="550">

<h3 id="14">状态模式</h3>

<h4 id="14.1">定义</h4> 

<p>运行对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。</p>
<h4 id="14.2">类图</h4> 

<img src="../assets/images/edraw/uml_state.png?v=1" width="500">

<h3 id="15">代理模式</h3>

<h4 id="15.1">定义</h4>

<p>为另一个对象提供一个替身或者占位符以控制对这个对象的访问。</p>
<h4 id="15.2">远程代理</h4>

<img src="../assets/images/edraw/uml_aidl.png?v=1" width="850">

<h4 id="15.3">保护代理</h4>

<img src="../assets/images/edraw/uml_protect_proxy.png" width="590">

<h4 id="15.4">同步代理</h4>

<img src="../assets/images/edraw/uml_sync_proxy.png" width="600">

<h3 id="16">建造者模式(Builder)</h3>

<h4 id="16.1">意图</h4> 

<p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
<h4 id="16.2">类图</h4> 

<img src="../assets/images/edraw/uml_builder.png" width="750">

<h3 id="17">桥接模式(Bridge)</h3>

<h4 id="17.1">意图</h4> 

<p>将抽象部分与它的实现部分分离，使它们都可以独立地变化。</p>
<h4 id="17.2">类图</h4> 

<img src="../assets/images/edraw/uml_bridge.png" width="880">

<h3 id="18">原型模式(Prototype)</h3>

<h4 id="18.1">意图</h4> 

<p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>
<h4 id="18.2">类图</h4> 

<img src="../assets/images/edraw/uml_prototype.png" width="600">

<h3 id="19">享元模式(Flyweight)</h3>

<h4 id="19.1">意图</h4> 

<p>利用共享技术有效地支持大量细粒度对象。</p>
<h4 id="19.2">类图</h4> 

<h3 id="20">责任链模式(Chain Of Responsibility)</h3>

<h4 id="20.1">意图</h4> 

<p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者直接的耦合关系。</p>
<h4 id="20.2">类图</h4> 

<img src="../assets/images/edraw/uml_responsibility.png" width="500">

<h3 id="21">解释器模式(Interpreter)</h3>

<h4 id="21.1">意图</h4> 

<p>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</p>
<h4 id="21.2">类图</h4> 

<h3 id="22">中介者模式(Mediator)</h3>

<h4 id="22.1">意图</h4> 

<p>用一个中介来封装一系列的对象交互。中介者使各个对象不需要显示地相互引用，从而使其耦合松散，而且可以独立地改变他们之间的交互。</p>
<h4 id="22.2">类图</h4> 

<h3 id="23">备忘录模式(Memento)</h3>

<h4 id="23.1">意图</h4> 

<p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样以后就可以将该对象恢复到原先保存的状态。</p>
<h4 id="23.2">类图</h4> 

<h3 id="24">访问者模式(Visitor)</h3>

<h4 id="24.1">意图</h4> 

<p>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p>
<h4 id="24.2">类图</h4> ]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>github无法访问</title>
    <url>/2021/03/14/github%E8%AE%BF%E9%97%AE%E6%85%A2or%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E5%A4%87%E6%B3%A8/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每到两会期间，github总是莫名其妙的访问慢，有时候直接无法访问，方法是参考github520大神的，</span><br><span class="line">在此只是做一个备注，以备不时之需。</span><br></pre></td></tr></table></figure>


<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="复制下面的内容"><a href="#复制下面的内容" class="headerlink" title="复制下面的内容"></a>复制下面的内容</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GitHub520 Host Start</span></span><br><span class="line">185.199.108.154               github.githubassets.com</span><br><span class="line">140.82.113.22                 central.github.com</span><br><span class="line">185.199.108.133               desktop.githubusercontent.com</span><br><span class="line">185.199.108.153               assets-cdn.github.com</span><br><span class="line">185.199.108.133               camo.githubusercontent.com</span><br><span class="line">185.199.108.133               github.map.fastly.net</span><br><span class="line">199.232.69.194                github.global.ssl.fastly.net</span><br><span class="line">140.82.114.3                  gist.github.com</span><br><span class="line">185.199.108.153               github.io</span><br><span class="line">140.82.112.3                  github.com</span><br><span class="line">140.82.113.6                  api.github.com</span><br><span class="line">185.199.108.133               raw.githubusercontent.com</span><br><span class="line">185.199.108.133               user-images.githubusercontent.com</span><br><span class="line">185.199.108.133               favicons.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars5.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars4.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars3.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars2.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars1.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars0.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars.githubusercontent.com</span><br><span class="line">140.82.113.9                  codeload.github.com</span><br><span class="line">52.217.87.140                 github-cloud.s3.amazonaws.com</span><br><span class="line">52.216.238.99                 github-com.s3.amazonaws.com</span><br><span class="line">52.216.138.163                github-production-release-asset-2e65be.s3.amazonaws.com</span><br><span class="line">52.217.101.68                 github-production-user-asset-6210df.s3.amazonaws.com</span><br><span class="line">52.217.48.84                  github-production-repository-file-5c1aeb.s3.amazonaws.com</span><br><span class="line">185.199.108.153               githubstatus.com</span><br><span class="line">64.71.168.201                 github.community</span><br><span class="line">185.199.108.133               media.githubusercontent.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Update time: 2021-03-17T16:23:14+08:00</span></span><br><span class="line"><span class="comment"># Star me GitHub url: https://github.com/521xueweihan/GitHub520</span></span><br><span class="line"><span class="comment"># GitHub520 Host End</span></span><br></pre></td></tr></table></figure>
<h4 id="手动修改host文件"><a href="#手动修改host文件" class="headerlink" title="手动修改host文件"></a>手动修改host文件</h4><ul>
<li>Windows 系统：<code>C:\Windows\System32\drivers\etc\hosts</code></li>
<li>Linux 系统：<code>/etc/hosts</code></li>
<li>Mac（苹果电脑）系统：<code>/etc/hosts</code></li>
<li>Android（安卓）系统：<code>/system/etc/hosts</code></li>
<li>iPhone（iOS）系统：<code>/etc/hosts</code></li>
</ul>
<h4 id="自动模式"><a href="#自动模式" class="headerlink" title="自动模式"></a>自动模式</h4><p>推荐 <a href="https://github.com/oldj/SwitchHosts">SwitchHosts</a> 工具管理 hosts</p>
<p><img src="https://i.loli.net/2021/03/17/S3VDhs4RgIrbMAE.png" alt="iShot2021-03-17下午06.10.01.png"></p>
<p><a href="https://github.com/521xueweihan/GitHub520/blob/main/README.md">参考</a></p>
<p><a href="http://k61.org/cc80e540.html">参考2</a></p>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>asm-gradle备注</title>
    <url>/2021/04/23/asm-%E5%AD%97%E8%8A%82%E7%A0%81/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ASM是一个通用的Java字节码操作和分析框架。 它可以直接以二进制形式用于修改现有类或动态生成类。 </span><br><span class="line">ASM提供了一些常见的字节码转换和分析算法，可以从中构建定制的复杂转换和代码分析工具。 </span><br><span class="line">ASM提供了与其他Java字节码框架类似的功能，但是侧重于性能。 因为它的设计和实现是尽可能的小和尽可能快，</span><br><span class="line">所以它非常适合在动态系统中使用（但当然也可以以静态方式使用，例如在编译器中使用）。</span><br></pre></td></tr></table></figure>
<p><code>AOP</code> 是一种<strong>面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术</strong>。和面向对象编程 的 <code>OOP</code> 相同。</p>
<h5 id="gradle插件开发"><a href="#gradle插件开发" class="headerlink" title="gradle插件开发"></a>gradle插件开发</h5><ol>
<li><p>单独创建一个.gradle文件</p>
</li>
<li><p>通过<code>buildSrc</code>目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Gradle会默认在配置初始化前，编译buildSrc这个项目，可以是java、groovy、kotlin项目，并把项目配置到classpath下。所以如果Module 命名为 buildSrc 那么不需要在 Project 级别的 build.gradle 文件中使用 classpath 引入，也不需要在 app 级别的 build.gradle 文件中使用 apply plugin: 进行应用。</span><br></pre></td></tr></table></figure>

</li>
<li><p>创建一个moudle项目 改造</p>
</li>
</ol>
<p>插件的开发自行实践</p>
<h5 id="插桩"><a href="#插桩" class="headerlink" title="插桩"></a>插桩</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">目标程序代码中某些位置插入或修改成一些代码，从而在目标程序运行过程中获取某些程序状态并加以分析。</span><br><span class="line">简单来说就是在代码中插入代码。那么函数插桩，便是在函数中插入或修改代码。字节码插桩可以实现</span><br><span class="line">&#96;无埋点统计上报&#96;、&#96;轻量级AOP&#96; 、&#96;行为统计&#96;、&#96;方法耗时统计&#96;……</span><br></pre></td></tr></table></figure>
<h5 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Android打包过程中java -&gt; java class-&gt; dx命令 -&gt; dex文件，通过自定义gradle插件的方式可以介入到生成dex</span><br><span class="line">文件之前的流程中，原理通过gradle插件提供的api类工具Transform</span><br></pre></td></tr></table></figure>
<h5 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h5><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloTransform</span> : <span class="type">Transform</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getName</span><span class="params">()</span></span>: String = <span class="string">&quot;HelloTransform&quot;</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getInputTypes</span><span class="params">()</span></span>: MutableSet&lt;QualifiedContent.ContentType&gt; =</span><br><span class="line">        TransformManager.CONTENT_CLASS <span class="comment">//类型，android这边默认有两中类型：class 、资源</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getScopes</span><span class="params">()</span></span>: MutableSet&lt;<span class="keyword">in</span> QualifiedContent.Scope&gt; =</span><br><span class="line">        TransformManager.SCOPE_FULL_PROJECT  <span class="comment">//范围</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isIncremental</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = <span class="literal">false</span> <span class="comment">//是否是增量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">transform</span><span class="params">(transformInvocation: <span class="type">TransformInvocation</span>?)</span></span> &#123; <span class="comment">//这里面可以操作字节码</span></span><br><span class="line">        transformInvocation?.let &#123;</span><br><span class="line">            println(<span class="string">&quot;--------------- HelloTransform transform start --------------- &quot;</span>)</span><br><span class="line">            <span class="keyword">val</span> startTime = System.currentTimeMillis()</span><br><span class="line">            <span class="keyword">val</span> inputs = transformInvocation.inputs</span><br><span class="line">            <span class="keyword">val</span> outputProvider = transformInvocation.outputProvider</span><br><span class="line"></span><br><span class="line">            <span class="comment">//删除之前的输出</span></span><br><span class="line">            outputProvider?.deleteAll()</span><br><span class="line"></span><br><span class="line">            <span class="comment">//遍历inputs</span></span><br><span class="line">            inputs.forEach &#123; tt -&gt;</span><br><span class="line">                tt.directoryInputs.forEach &#123; dirInput -&gt;</span><br><span class="line">                    printDirInput(dirInput)</span><br><span class="line">                &#125;</span><br><span class="line">                tt.jarInputs.forEach &#123; jarInput -&gt;</span><br><span class="line">                    printJarInput(jarInput)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> cost = (System.currentTimeMillis() - startTime) / <span class="number">1000</span></span><br><span class="line">            println(<span class="string">&quot;--------------- HelloTransform transform end --------------- &quot;</span>)</span><br><span class="line">            println(<span class="string">&quot;--------------- HelloTransform 耗时 = <span class="variable">$cost</span>  --------------- &quot;</span>)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">printJarInput</span><span class="params">(jarInput: <span class="type">JarInput</span>?)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        jarInput?.let &#123;</span><br><span class="line">            println(<span class="string">&quot;jar <span class="subst">$&#123;it.name&#125;</span>\n <span class="subst">$&#123;it.file.path&#125;</span> \n\n&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">printDirInput</span><span class="params">(dirInput: <span class="type">DirectoryInput</span>?)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        dirInput?.let &#123;</span><br><span class="line">            println(<span class="string">&quot;dir <span class="subst">$&#123;it.name&#125;</span> <span class="subst">$&#123;it.file.path&#125;</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="出错"><a href="#出错" class="headerlink" title="出错"></a>出错</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">上面的代码如果在moudle中引入，会导致无法安装apk,出现` INSTALL_FAILED_INVALID_APK` `code is missing`</span><br><span class="line">这是因为在`transform`方法中，无论你是否会对字节码or其他信息做处理，都需要将之前的输入作为输出传递下去</span><br></pre></td></tr></table></figure>
<h5 id="更正"><a href="#更正" class="headerlink" title="更正"></a>更正</h5><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">transform</span><span class="params">(transformInvocation: <span class="type">TransformInvocation</span>?)</span></span> &#123; <span class="comment">//这里面可以操作字节码</span></span><br><span class="line">  transformInvocation?.let &#123;</span><br><span class="line">    println(<span class="string">&quot;--------------- HelloTransform transform start --------------- &quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> startTime = System.currentTimeMillis()</span><br><span class="line">    <span class="keyword">val</span> inputs = transformInvocation.inputs</span><br><span class="line">    <span class="keyword">val</span> outputProvider = transformInvocation.outputProvider</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除之前的输出,注意一般需要根据是否是增量，不是增量就全部删除</span></span><br><span class="line">    outputProvider?.deleteAll()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历inputs</span></span><br><span class="line">    inputs.forEach &#123; tt -&gt;</span><br><span class="line">                    tt.directoryInputs.forEach &#123; dirInput -&gt;</span><br><span class="line">                                                printDirInput(dirInput)</span><br><span class="line">                                                <span class="comment">//处理完输入文件之后，要把输出给下一个任务</span></span><br><span class="line">                                                <span class="keyword">val</span> dest = outputProvider.getContentLocation(</span><br><span class="line">                                                  dirInput.name,</span><br><span class="line">                                                  dirInput.contentTypes, dirInput.scopes,</span><br><span class="line">                                                  Format.DIRECTORY</span><br><span class="line">                                                )</span><br><span class="line">                                                FileUtils.copyDirectory(dirInput.file, dest)</span><br><span class="line">                                               &#125;</span><br><span class="line">                    tt.jarInputs.forEach &#123; jarInput -&gt;</span><br><span class="line">                                          printJarInput(jarInput)</span><br><span class="line">                                          <span class="comment">//处理完输入文件之后，要把输出给下一个任务</span></span><br><span class="line">                                          <span class="keyword">val</span> dest: File = outputProvider.getContentLocation(</span><br><span class="line">                                            jarInput.name,</span><br><span class="line">                                            jarInput.contentTypes, jarInput.scopes, Format.JAR</span><br><span class="line">                                          )</span><br><span class="line">                                          FileUtils.copyFile(jarInput.file, dest)</span><br><span class="line">                                         &#125;</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> cost = (System.currentTimeMillis() - startTime) / <span class="number">1000</span></span><br><span class="line">    println(<span class="string">&quot;--------------- HelloTransform transform end --------------- &quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;--------------- HelloTransform 耗时 = <span class="variable">$cost</span>  --------------- &quot;</span>)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>




















<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://asm.ow2.io/">ASM官网</a></p>
<p><a href="https://jueee.github.io/2020/08/2020-08-27-Java%E5%AD%97%E8%8A%82%E7%A0%81%E6%93%8D%E7%BA%B5%E6%A1%86%E6%9E%B6ASM/">参考1</a></p>
<p><a href="https://blog.csdn.net/CrazyMo_/article/details/102601483">参考2</a></p>
<p><a href="https://blog.jiahuan.me/2019/01/11/Android%E7%BC%96%E8%AF%91%E6%9C%9F%E4%BF%AE%E6%94%B9Class%E5%AD%97%E8%8A%82%E7%A0%81/">参考3</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1634989">参考4</a></p>
<p><a href="https://www.jianshu.com/p/16ed4d233fd1">参考5</a></p>
<p><a href="https://stackoom.com/question/3fEwG/build-gradle%E4%B8%AD%E7%9A%84registerTransform%E4%B9%8B%E5%90%8E%E7%BC%BA%E5%B0%91base-apk%E4%BB%A3%E7%A0%81">出错-参考</a></p>
<p><a href="https://blog.yorek.xyz/android/paid/master/bytecode/">参考6-重点</a></p>
<p><a href="https://www.thedroidsonroids.com/blog/how-to-generate-java-sources-using-buildsrc-gradle-project">参考7-code gen</a></p>
<p><a href="https://jishuin.proginn.com/p/763bfbd36680">参考8</a></p>
]]></content>
      <categories>
        <category>gradle</category>
      </categories>
      <tags>
        <tag>gradle</tag>
        <tag>asm</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown 常用语法学习备注</title>
    <url>/2018/03/12/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1. 斜体和粗体"></a>1. 斜体和粗体</h3><p>使用 * 和 ** 表示斜体和粗体。</p>
<p>示例：</p>
<p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p>
<h3 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h3><p>使用 === 表示一级标题，使用 — 表示二级标题。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是一个一级标题</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">这是一个二级标题</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">### 这是一个三级标题</span><br></pre></td></tr></table></figure>
<p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</p>
<h3 id="3-外链接"><a href="#3-外链接" class="headerlink" title="3. 外链接"></a>3. 外链接</h3><p>使用 [描述](链接地址) 为文字增加外链接。</p>
<p>示例：</p>
<p>这是去往 <a href="https://boundless1024.com/">本人博客</a> 的链接。</p>
<h3 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4. 无序列表"></a>4. 无序列表</h3><p>使用 *，+，- 表示无序列表。</p>
<p>示例：</p>
<ul>
<li>无序列表项 一</li>
<li>无序列表项 二</li>
<li>无序列表项 三</li>
</ul>
<h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5. 有序列表"></a>5. 有序列表</h3><p>使用数字和点表示有序列表。</p>
<p>示例：</p>
<ol>
<li>有序列表项 一</li>
<li>有序列表项 二</li>
<li>有序列表项 三</li>
</ol>
<h3 id="6-文字引用"><a href="#6-文字引用" class="headerlink" title="6. 文字引用"></a>6. 文字引用</h3><p>使用 &gt; 表示文字引用。</p>
<p>示例：</p>
<blockquote>
<p>野火烧不尽，春风吹又生。</p>
</blockquote>
<h3 id="7-行内代码块"><a href="#7-行内代码块" class="headerlink" title="7. 行内代码块"></a>7. 行内代码块</h3><p>使用 `代码` 表示行内代码块。</p>
<p>示例：</p>
<p>让我们聊聊 <code>html</code>。</p>
<h3 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8.  代码块"></a>8.  代码块</h3><p>使用 四个缩进空格 表示代码块。</p>
<p>示例：</p>
<pre><code>这是一个代码块，此行左侧有四个不可见的空格。
</code></pre>
<h3 id="9-插入图像"><a href="#9-插入图像" class="headerlink" title="9.  插入图像"></a>9.  插入图像</h3><p>使用 ![描述](图片链接地址) 插入图像。</p>
<p>示例：</p>
<p><img src="https://i.loli.net/2021/02/22/JnUYy8q6ZvfTcVs.jpg" alt="我的头像"></p>
<h1 id="高阶语法手册"><a href="#高阶语法手册" class="headerlink" title="高阶语法手册"></a>高阶语法手册</h1><h3 id="1-内容目录"><a href="#1-内容目录" class="headerlink" title="1. 内容目录"></a>1. 内容目录</h3><p>在段落中填写 <code>[TOC]</code> 以显示全文内容的目录结构。</p>
<p>[TOC]</p>
<h3 id="2-标签分类"><a href="#2-标签分类" class="headerlink" title="2. 标签分类"></a>2. 标签分类</h3><p>在编辑区任意行的列首位置输入以下代码给文稿标签：</p>
<p>标签： 数学 英语 Markdown</p>
<p>或者</p>
<p>Tags： 数学 英语 Markdown</p>
<h3 id="3-删除线"><a href="#3-删除线" class="headerlink" title="3. 删除线"></a>3. 删除线</h3><p>使用 ~~ 表示删除线。</p>
<p><del>这是一段错误的文本。</del></p>
<h3 id="4-注脚"><a href="#4-注脚" class="headerlink" title="4. 注脚"></a>4. 注脚</h3><p>使用 [^keyword] 表示注脚。</p>
<p>这是一个注脚[^footnote]的样例。</p>
<p>这是第二个注脚[^footnote2]的样例。</p>
<h3 id="5-LaTeX-公式"><a href="#5-LaTeX-公式" class="headerlink" title="5. LaTeX 公式"></a>5. LaTeX 公式</h3><p>$ 表示行内公式：</p>
<p>质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。</p>
<p>$$ 表示整行公式：</p>
<p>$$\sum_{i=1}^n a_i=0$$</p>
<p>$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</p>
<p>$$\sum^{j-1}<em>{k=0}{\widehat{\gamma}</em>{kj} z_k}$$</p>
<p>访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">MathJax</a> 参考更多使用方法。</p>
<h3 id="6-加强的代码块"><a href="#6-加强的代码块" class="headerlink" title="6. 加强的代码块"></a>6. 加强的代码块</h3><p>支持四十一种编程语言的语法高亮的显示，行号显示。</p>
<p>非代码示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install vim-gnome</span><br></pre></td></tr></table></figure>
<p>Python 示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span>(<span class="params">param1=<span class="string">&#x27;&#x27;</span>, param2=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;A docstring&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;Greater&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">&#x27;&#x27;&#x27;interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>JavaScript 示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* nth element in the fibonacci series.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>n &gt;= 0</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return </span>the nth element, &gt;= 0.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> tmp;</span><br><span class="line">  <span class="keyword">while</span> (--n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    tmp = a;</span><br><span class="line">    a += b;</span><br><span class="line">    b = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(fib(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>
<h3 id="7-流程图"><a href="#7-流程图" class="headerlink" title="7. 流程图"></a>7. 流程图</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: Start:&gt;https:&#x2F;&#x2F;www.zybuluo.com</span><br><span class="line">io&#x3D;&gt;inputoutput: verification</span><br><span class="line">op&#x3D;&gt;operation: Your Operation</span><br><span class="line">cond&#x3D;&gt;condition: Yes or No?</span><br><span class="line">sub&#x3D;&gt;subroutine: Your Subroutine</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;io-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;sub-&gt;io</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考：流程图语法参考"><a href="#更多语法参考：流程图语法参考" class="headerlink" title="更多语法参考：流程图语法参考"></a>更多语法参考：<a href="http://adrai.github.io/flowchart.js/">流程图语法参考</a></h4><h3 id="8-序列图"><a href="#8-序列图" class="headerlink" title="8. 序列图"></a>8. 序列图</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>
<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Title: Here is a title</span><br><span class="line">A-&gt;B: Normal line</span><br><span class="line">B--&gt;C: Dashed line</span><br><span class="line">C-&gt;&gt;D: Open arrow</span><br><span class="line">D--&gt;&gt;A: Dashed open arrow</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考：序列图语法参考"><a href="#更多语法参考：序列图语法参考" class="headerlink" title="更多语法参考：序列图语法参考"></a>更多语法参考：<a href="http://bramp.github.io/js-sequence-diagrams/">序列图语法参考</a></h4><h3 id="9-甘特图"><a href="#9-甘特图" class="headerlink" title="9. 甘特图"></a>9. 甘特图</h3><p>甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%% 语法示例</span><br><span class="line">        gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title 软件开发甘特图</span><br><span class="line">        section 设计</span><br><span class="line">        需求                      :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        原型                      :active,  des2, 2014-01-09, 3d</span><br><span class="line">        UI设计                     :         des3, after des2, 5d</span><br><span class="line">    未来任务                     :         des4, after des3, 5d</span><br><span class="line">        section 开发</span><br><span class="line">        学习准备理解需求                      :crit, done, 2014-01-06,24h</span><br><span class="line">        设计框架                             :crit, done, after des2, 2d</span><br><span class="line">        开发                                 :crit, active, 3d</span><br><span class="line">        未来任务                              :crit, 5d</span><br><span class="line">        耍                                   :2d</span><br><span class="line">        section 测试</span><br><span class="line">        功能测试                              :active, a1, after des3, 3d</span><br><span class="line">        压力测试                               :after a1  , 20h</span><br><span class="line">        测试报告                               : 48h</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考：甘特图语法参考"><a href="#更多语法参考：甘特图语法参考" class="headerlink" title="更多语法参考：甘特图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#gant-diagrams">甘特图语法参考</a></h4><h3 id="10-Mermaid-流程图"><a href="#10-Mermaid-流程图" class="headerlink" title="10. Mermaid 流程图"></a>10. Mermaid 流程图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A[Hard edge] --&gt;|Link text| B(Round edge)</span><br><span class="line">B --&gt; C&#123;Decision&#125;</span><br><span class="line">C --&gt;|One| D[Result one]</span><br><span class="line">C --&gt;|Two| E[Result two]</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考：Mermaid-流程图语法参考"><a href="#更多语法参考：Mermaid-流程图语法参考" class="headerlink" title="更多语法参考：Mermaid 流程图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#flowcharts-basic-syntax">Mermaid 流程图语法参考</a></h4><h3 id="11-Mermaid-序列图"><a href="#11-Mermaid-序列图" class="headerlink" title="11. Mermaid 序列图"></a>11. Mermaid 序列图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Alice-&gt;John: Hello John, how are you?</span><br><span class="line">loop every minute</span><br><span class="line">    John--&gt;Alice: Great!</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考：Mermaid-序列图语法参考"><a href="#更多语法参考：Mermaid-序列图语法参考" class="headerlink" title="更多语法参考：Mermaid 序列图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#sequence-diagrams">Mermaid 序列图语法参考</a></h4><h3 id="12-表格支持"><a href="#12-表格支持" class="headerlink" title="12. 表格支持"></a>12. 表格支持</h3><table>
<thead>
<tr>
<th>项目</th>
<th align="right">价格</th>
<th align="center">数量</th>
</tr>
</thead>
<tbody><tr>
<td>计算机</td>
<td align="right">$1600</td>
<td align="center">5</td>
</tr>
<tr>
<td>手机</td>
<td align="right">$12</td>
<td align="center">12</td>
</tr>
<tr>
<td>管线</td>
<td align="right">$1</td>
<td align="center">234</td>
</tr>
</tbody></table>
<h3 id="13-定义型列表"><a href="#13-定义型列表" class="headerlink" title="13. 定义型列表"></a>13. 定义型列表</h3><dl><dt>名词 1</dt><dd>定义 1（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><dl><dt>代码块 2</dt><dd>这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><pre><code>    代码块（左侧有八个不可见的空格）
</code></pre>
<h3 id="14-Html-标签"><a href="#14-Html-标签" class="headerlink" title="14. Html 标签"></a>14. Html 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p>
<pre><code>&lt;table&gt;
    &lt;tr&gt;
        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;
        &lt;th&gt;星期一&lt;/th&gt;
        &lt;th&gt;星期二&lt;/th&gt;
        &lt;th&gt;星期三&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;李强&lt;/td&gt;
        &lt;td&gt;张明&lt;/td&gt;
        &lt;td&gt;王平&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
</code></pre>
<table>
    <tr>
        <th rowspan="2">值班人员</th>
        <th>星期一</th>
        <th>星期二</th>
        <th>星期三</th>
    </tr>
    <tr>
        <td>李强</td>
        <td>张明</td>
        <td>王平</td>
    </tr>
</table>

<h3 id="15-内嵌图标"><a href="#15-内嵌图标" class="headerlink" title="15. 内嵌图标"></a>15. 内嵌图标</h3><p>本站的图标系统对外开放，在文档中输入</p>
<pre><code>&lt;i class=&quot;icon-weibo&quot;&gt;&lt;/i&gt;
</code></pre>
<p>即显示微博的图标： <i class="icon-weibo icon-2x"></i></p>
<p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code> 以显示不同的图标，例如：</p>
<pre><code>&lt;i class=&quot;icon-renren&quot;&gt;&lt;/i&gt;
</code></pre>
<p>即显示人人的图标： <i class="icon-renren icon-2x"></i></p>
<p>更多的图标和玩法可以参看 <a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/">font-awesome</a> 官方网站。</p>
<h3 id="16-待办事宜-Todo-列表"><a href="#16-待办事宜-Todo-列表" class="headerlink" title="16. 待办事宜 Todo 列表"></a>16. 待办事宜 Todo 列表</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p>
<pre><code>- [ ] ** Markdown 开发**
    - [ ] 改进 xxxx 渲染算法，使用局部渲染技术提高渲染效率
    - [ ] 支持以 PDF 格式导出文稿
    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)
    - [x] 改进 LaTex 功能
        - [x] 修复 LaTex 公式渲染问题
        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)
- [ ] **七月旅行准备**
    - [ ] 准备邮轮上需要携带的物品
    - [ ] 浏览日本免税店的物品
    - [x] 购买蓝宝石公主号七月一日的船票
</code></pre>
<p>对应显示如下待办事宜 Todo 列表：</p>
<ul>
<li><input disabled="" type="checkbox"> ** Markdown 开发**<ul>
<li><input disabled="" type="checkbox"> 改进 xxxx 渲染算法，使用局部渲染技术提高渲染效率</li>
<li><input disabled="" type="checkbox"> 支持以 PDF 格式导出文稿</li>
<li><input checked="" disabled="" type="checkbox"> 新增Todo列表功能 <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments">语法参考</a></li>
<li><input checked="" disabled="" type="checkbox"> 改进 LaTex 功能<ul>
<li><input checked="" disabled="" type="checkbox"> 修复 LaTex 公式渲染问题</li>
<li><input checked="" disabled="" type="checkbox"> 新增 LaTex 公式编号功能 <a href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers">语法参考</a></li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <strong>七月旅行准备</strong><ul>
<li><input disabled="" type="checkbox"> 准备邮轮上需要携带的物品</li>
<li><input disabled="" type="checkbox"> 浏览日本免税店的物品</li>
<li><input checked="" disabled="" type="checkbox"> 购买蓝宝石公主号七月一日的船票</li>
</ul>
</li>
</ul>
<p>[^footnote]: 这是一个 <em>注脚</em> 的 <strong>文本</strong>。</p>
<p>[^footnote2]: 这是另一个 <em>注脚</em> 的 <strong>文本</strong>。</p>
<p><a href="https://www.runoob.com/markdown/md-advance.html">mermaid参考</a></p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>md</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/29/hello/</url>
    <content><![CDATA[<h4 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure>
<h4 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use mysql</span><br><span class="line">update user set authentication_string&#x3D;&#39;&#39; where user&#x3D;&#39;root&#39; -- 值为空</span><br><span class="line">ALTER user &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;</span><br><span class="line">ALTER user &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39; --远程</span><br><span class="line">-- https:&#x2F;&#x2F;www.cnblogs.com&#x2F;tmdsleep&#x2F;p&#x2F;10967432.html</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>let、run、with、also、apply</title>
    <url>/2021/06/14/kotlin-ext-fun%E5%A4%87%E6%B3%A8/</url>
    <content><![CDATA[<h4 id="let"><a href="#let" class="headerlink" title="let"></a>let</h4><ol>
<li>对一个可null的对象统一做判空处理</li>
<li>明确变量所处特定的作用域范围内使用</li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//with let </span></span><br><span class="line">Person(<span class="string">&quot;Alice&quot;</span>, <span class="number">20</span>, <span class="string">&quot;Amsterdam&quot;</span>).let &#123;</span><br><span class="line">    println(it)</span><br><span class="line">    it.moveTo(<span class="string">&quot;London&quot;</span>)</span><br><span class="line">    it.incrementAge()</span><br><span class="line">    println(it)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//without let </span></span><br><span class="line"><span class="keyword">val</span> alice = Person(<span class="string">&quot;Alice&quot;</span>, <span class="number">20</span>, <span class="string">&quot;Amsterdam&quot;</span>)</span><br><span class="line">println(alice)</span><br><span class="line">alice.moveTo(<span class="string">&quot;London&quot;</span>)</span><br><span class="line">alice.incrementAge()</span><br><span class="line">println(alice)</span><br></pre></td></tr></table></figure>
<h4 id="with"><a href="#with" class="headerlink" title="with"></a>with</h4><ol>
<li>省去类名重复，直接调用类的方法</li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//with with </span></span><br><span class="line">with(binding) &#123;</span><br><span class="line">     tvSymbol.text = symbol</span><br><span class="line">     tvAnswer.text = <span class="keyword">data</span>.text</span><br><span class="line">     root.tag = <span class="keyword">data</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//without with </span></span><br><span class="line">binding.tvSymbol.text = symbol</span><br><span class="line">binding.tvAnswer.text = <span class="keyword">data</span>.text</span><br><span class="line">binding.root.tag = <span class="keyword">data</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="run"><a href="#run" class="headerlink" title="run"></a>run</h4><ol>
<li>用于let,with函数任何场景</li>
<li>弥补let函数在函数体内必须使用it参数替代对象,弥补了with函数传入对象判空问题</li>
</ol>
<h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><ol>
<li>功能和run函数很像，不同点apply返回的值是对象本身，而run函数是一个闭包形式返回</li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//with apply</span></span><br><span class="line"><span class="keyword">val</span> dataList = mutableListOf&lt;OptionItem&gt;().apply &#123;</span><br><span class="line">    add(OptionItem(answerItem.correctAnswer, <span class="literal">true</span>))</span><br><span class="line">    add(OptionItem(answerItem.errorAnswer1, <span class="literal">false</span>))</span><br><span class="line">    add(OptionItem(answerItem.errorAnswer2, <span class="literal">false</span>))</span><br><span class="line">    shuffle()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//without apply</span></span><br><span class="line"> <span class="keyword">val</span> dataList = mutableListOf&lt;OptionItem&gt;()</span><br><span class="line">     dataList.add(OptionItem(answerItem.correctAnswer, <span class="literal">true</span>))</span><br><span class="line">     dataList.add(OptionItem(answerItem.errorAnswer1, <span class="literal">false</span>))</span><br><span class="line">     dataList.add(OptionItem(answerItem.errorAnswer2, <span class="literal">false</span>))</span><br><span class="line">     dataList.shuffle()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="also"><a href="#also" class="headerlink" title="also"></a>also</h4><ol>
<li>用于let函数的任何场景，不同点also返回的值是对象本身，而let函数是一个闭包形式返回</li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//with also</span></span><br><span class="line"><span class="keyword">val</span> alice = Person(<span class="string">&quot;Alice&quot;</span>,<span class="number">20</span>,<span class="string">&quot;Amsterdam&quot;</span>).also &#123;</span><br><span class="line">    println(it)</span><br><span class="line">    it.moveTo(<span class="string">&quot;London&quot;</span>)</span><br><span class="line">    it.incrementAge()</span><br><span class="line">    println(it)</span><br><span class="line">&#125;</span><br><span class="line">println(alice)</span><br><span class="line"></span><br><span class="line"><span class="comment">//without also </span></span><br><span class="line"><span class="keyword">val</span> alice = Person(<span class="string">&quot;Alice&quot;</span>, <span class="number">20</span>, <span class="string">&quot;Amsterdam&quot;</span>)</span><br><span class="line">println(alice)</span><br><span class="line">alice.moveTo(<span class="string">&quot;London&quot;</span>)</span><br><span class="line">alice.incrementAge()</span><br><span class="line">println(alice)</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>名称</th>
<th align="left">inline的结构</th>
<th>块内对象、返回值</th>
<th align="center">扩展函数</th>
<th>场景</th>
</tr>
</thead>
<tbody><tr>
<td>let</td>
<td align="left"><code>inline fun &lt;T, R&gt; T.let(block: (T) -&gt; R): R </code></td>
<td>it、闭包返回</td>
<td align="center">是</td>
<td>处理不为null的操作场景</td>
</tr>
<tr>
<td>with</td>
<td align="left"><code>inline fun &lt;T, R&gt; with(receiver: T, block: T.() -&gt; R): R</code></td>
<td>this 、闭包返回</td>
<td align="center">否</td>
<td>省去类名，直接调用类的方法即可</td>
</tr>
<tr>
<td>run</td>
<td align="left"><code>inline fun &lt;R&gt; run(block: () -&gt; R): R</code></td>
<td>this、闭包返回</td>
<td align="center">是</td>
<td>适用于let,with函数任何场景</td>
</tr>
<tr>
<td>apply</td>
<td align="left"><code>inline fun &lt;T&gt; T.apply(block: T.() -&gt; Unit): T</code></td>
<td>this、返回this</td>
<td align="center">是</td>
<td>初始化对象实例时，操作对象属性， 并最终返回对象，    多个扩展函数链式调用，数据model多层级包裹判空处理的</td>
</tr>
<tr>
<td>also</td>
<td align="left"><code>inline fun &lt;T&gt; T.also(block: (T) -&gt; Unit): T </code></td>
<td>it、返回this</td>
<td align="center">是</td>
<td>let函数的任何场景,可用于多个扩展函数链式调用</td>
</tr>
</tbody></table>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://kotlinlang.org/docs/scope-functions.html">文档</a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>okhttp请求记录</title>
    <url>/2021/03/07/okhttp-%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<ul>
<li><p>OkHttp请求</p>
<ol>
<li><p>创建Request对象</p>
<p><code>Request对象的创建通过Builder模式创建</code> </p>
<p><img src="https://i.loli.net/2021/03/06/3QG4lKkuFVfXzyA.png" alt="iShot2021-03-06下午05.30.12.png"></p>
</li>
<li><p>创建OkHttpClient对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder().build();</span><br></pre></td></tr></table></figure>
</li>
<li><p>异步方式http请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">client.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    v.post(() -&gt; &#123;</span><br><span class="line">                        TextView textView = (TextView) v;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            textView.setText(response.body().string());</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException exception) &#123;</span><br><span class="line">                            exception.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码</p>
</li>
</ol>
</li>
</ul>
<p><img src="https://i.loli.net/2021/03/06/uRUrCxn92BDJEAP.png" alt="iShot2021-03-06下午05.24.24.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">okhttp.newCall -&gt; realCall</span><br><span class="line">realCall.enqueue -&gt; asyncCall</span><br><span class="line">asyncCall.execute -&gt; getResponseWithInterceptorChain -&gt; chain.proceed</span><br><span class="line">realInterceptorChain.process -&gt; ……</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li><p>OkHttp 拦截器</p>
<p><img src="https://i.loli.net/2021/03/06/Okm1cglFZznp6bx.png" alt="iShot2021-03-06下午05.21.32.png"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>okhttp</tag>
      </tags>
  </entry>
  <entry>
    <title>RecyclerView嵌套滑动</title>
    <url>/2021/04/11/recyclerview-nestedscrollview/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有时候为了省事图方便，会使用到嵌套滑动，比如NestedScrollView，其本身就是为了解决嵌套滑动，但是这样有时候</span><br><span class="line">会带来一些麻烦，例如上面的小问题，此时我们有两种处理方式。1是放弃嵌套布局， 2是想法处理掉。</span><br><span class="line">下面是记录2的处理方式，以做备注</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/04/10/NOabutcKTefXnLm.png" alt="iShot2021-04-10下午05.22.40.png"></p>
<p>运行程序后会发现RecyclerView会把它上面的视图顶出屏幕，然后要手动向下滑才能看到，出现这个问题是因为RecyclerView抢了焦点，此时我们只需要把RecyclerView的父布局添加<code>android:descendantFocusability=&quot;blocksDescendants&quot;</code> 即可解决<br><code>android:descendantFocusability</code>该属性是当一个为view获取焦点时，定义ViewGroup和其子控件两者之间的关系。有三种属性值</p>
<p><code>beforeDescendants</code>  表示ViewGroup会优先其子类控件而获取到焦点<br><code>afterDescendants</code>     表示ViewGroup只有当其子类控件不需要获取焦点时才获取焦点<br><code>blocksDescendants</code>  表示ViewGroup会覆盖子类控件而直接获得焦点</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>recyclerview</tag>
      </tags>
  </entry>
  <entry>
    <title>shell cut、sed记录</title>
    <url>/2021/08/31/shell%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4%E5%A4%87%E6%B3%A8/</url>
    <content><![CDATA[<h5 id="cut命令"><a href="#cut命令" class="headerlink" title="cut命令"></a>cut命令</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。</span><br><span class="line"></span><br><span class="line">如果不指定 File 参数，cut 命令将读取标准输入。必须指定 -b、-c 或 -f 标志之一。</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-b</td>
<td>以字节为单位进行分割</td>
</tr>
<tr>
<td>-c</td>
<td>以字符为单位进行分割</td>
</tr>
<tr>
<td>-d</td>
<td>自定义分隔符，默认为制表符</td>
</tr>
<tr>
<td>-f</td>
<td>提取的列号，需要与-d一起使用</td>
</tr>
</tbody></table>
<ul>
<li><p>who </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libo     console  Aug 18 09:22 </span><br><span class="line">libo     ttys000  Aug 28 11:16 </span><br><span class="line">libo     ttys002  Aug 31 13:56 </span><br></pre></td></tr></table></figure></li>
<li><p>例如  who | cut -d o -f 1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lib</span><br><span class="line">lib</span><br><span class="line">lib</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h5 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Linux sed 命令是利用脚本来处理文本文件。</span><br><span class="line"></span><br><span class="line">sed 可依照脚本的指令来处理、编辑文本文件。</span><br><span class="line"></span><br><span class="line">Sed 主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等。</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-e</td>
<td>以选项中指定的script来处理输入的文本文件</td>
</tr>
<tr>
<td>-f</td>
<td>以选项中指定的script文件来处理输入的文本文件</td>
</tr>
<tr>
<td>-h</td>
<td>显示帮助</td>
</tr>
<tr>
<td>-n</td>
<td>仅显示script处理后的结果</td>
</tr>
<tr>
<td>-V</td>
<td>显示版本信息</td>
</tr>
<tr>
<td>a</td>
<td>新增， a 的后面可以接字串</td>
</tr>
<tr>
<td>c</td>
<td>取代， c 的后面可以接字串</td>
</tr>
<tr>
<td>d</td>
<td>删除</td>
</tr>
<tr>
<td>i</td>
<td>插入， i 的后面可以接字串</td>
</tr>
<tr>
<td>p</td>
<td>打印，亦即将某个选择的数据印出</td>
</tr>
<tr>
<td>s</td>
<td>取代   s/old/new//g</td>
</tr>
</tbody></table>
<ul>
<li><p>例如 adb shell pm path com.etoury.ui</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package:&#x2F;data&#x2F;app&#x2F;com.etoury.ui-1&#x2F;base.apk</span><br></pre></td></tr></table></figure></li>
<li><p>例如2 adb shell pm path com.etoury.ui | sed ‘s/package://g’</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;data&#x2F;app&#x2F;com.etoury.ui-1&#x2F;base.apk</span><br></pre></td></tr></table></figure></li>
<li><p>例如 sed ‘4a\ 0——-= ‘ sed-demo.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  2021-0827 sed &#39;4a\</span><br><span class="line">quote&gt; 0-------&#x3D;&#39; sed-demo.txt </span><br><span class="line">qweertyuiop</span><br><span class="line">asdfghjkl</span><br><span class="line">zxcvbnm</span><br><span class="line">12345689</span><br><span class="line">0-------&#x3D;%  </span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h5 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文本分析工具，把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行分析处理</span><br></pre></td></tr></table></figure>
<ul>
<li><p>例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  2021-0827 echo &#39;my name is libo &#39; | awk &#39;&#123;$4&#x3D;&quot;leo&quot;;print $0&#125;&#39;</span><br><span class="line">my name is leo</span><br></pre></td></tr></table></figure>










</li>
</ul>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="http://c.biancheng.net/view/4082.html">awk</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/152705434">参考1</a></p>
<p><a href="https://github.com/mzlogin/awesome-adb#ip-%E5%9C%B0%E5%9D%80">参考2</a></p>
]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>sed</tag>
      </tags>
  </entry>
  <entry>
    <title>xposed模块 hello world编写</title>
    <url>/2021/03/18/xposed%E6%A8%A1%E5%9D%97%E5%85%A5%E9%97%A8%E5%A4%87%E6%B3%A8/</url>
    <content><![CDATA[<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>Xposed的执行原理，可以参考<a href="https://www.bilibili.com/read/cv884141?from=category_17">这篇文章</a>的介绍。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xposed劫持了Zygote进程。原本是zygote调用【app_process】来运行程序，现在有了xposed后，zygote调用</span><br><span class="line">【被xposed替换后的app_process】来运行程序，使得程序在开启时，额外加载一个jar包，从而改变APP的运行结果。</span><br><span class="line">我们通过xposed框架编写hook代码，这些hook代码实际上是运行在宿主app进程内的，所以如果想要调试hook代码，</span><br><span class="line">需要以debug模式运行宿主app。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">手机最好有root权限，确保上安装magsik和EdXposed等相关框架（测试设备是一加8 android 10系统），</span><br><span class="line">xposed框架在android 8.0之后就不再维护更新，都转战到magisk和EdXposed上了，具体的安装方式自行百度。</span><br></pre></td></tr></table></figure>
<h3 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过Android Studio 新建一个Android Application项目，模板自行选择。</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/03/18/BtnzoJ3waXuvMbC.png" alt="iShot2021-03-18下午04.23.04.png"></p>
<h3 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修改新建的Android项目中AndroidManifest.xml文件，在application标签下增加下面三句话，以让xposed框架识别</span><br><span class="line">  &lt;meta-data</span><br><span class="line">      android:name=<span class="string">&quot;xposedmodule&quot;</span></span><br><span class="line">      android:value=<span class="string">&quot;true&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;meta-data</span><br><span class="line">      android:name=<span class="string">&quot;xposeddescription&quot;</span></span><br><span class="line">      android:value=<span class="string">&quot;Hello Xposed&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;meta-data</span><br><span class="line">      android:name=<span class="string">&quot;xposedminversion&quot;</span></span><br><span class="line">      android:value=<span class="string">&quot;53&quot;</span> /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/03/18/BOSXHbMqo1rvLZj.png" alt="iShot2021-03-18下午04.29.17.png"></p>
<h3 id="步骤3"><a href="#步骤3" class="headerlink" title="步骤3"></a>步骤3</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">在app项目中增加xposed相应的jar包支持</span><br><span class="line">  </span><br><span class="line"> compileOnly<span class="string">&#x27;de.robv.android.xposed:api:82&#x27;</span></span><br><span class="line"> compileOnly <span class="string">&#x27;de.robv.android.xposed:api:82:sources&#x27;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/03/18/IYfhPDkeb73wNGW.png" alt="iShot2021-03-18下午04.35.12.png"></p>
<h3 id="步骤4"><a href="#步骤4" class="headerlink" title="步骤4"></a>步骤4</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">编写xposed模块的入口，新建一个java类实现xposed框架中的接口 `IXposedHookLoadPackage` </span><br><span class="line">  中的`handleLoadPackage`,在`handleLoadPackage`处理相关的逻辑</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IXposedHookLoadPackage</span> <span class="keyword">extends</span> <span class="title">IXposedMod</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * This method is called when an app is loaded. It&#x27;s called very early, even before</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> Application#onCreate&#125; is called.</span></span><br><span class="line"><span class="comment">	 * Modules can set up their app-specific hooks here.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> lpparam Information about the app.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Throwable Everything the callback throws is caught and logged.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line">	<span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span> <span class="keyword">extends</span> <span class="title">XC_LoadPackage</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> IXposedHookLoadPackage instance;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Wrapper</span><span class="params">(IXposedHookLoadPackage instance)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.instance = instance;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">			instance.handleLoadPackage(lpparam);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/03/18/g4crnvSKlA3ZoMC.png" alt="iShot2021-03-18下午04.42.16.png"></p>
<h3 id="步骤4-1"><a href="#步骤4-1" class="headerlink" title="步骤4"></a>步骤4</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">告诉xposed框架入口class,在android项目中的资产目录(asset)中新建一个文件 &#96;xposed_init&#96; 没有扩展名，</span><br><span class="line">在 &#96;xposed_init&#96; 中写入上面实现 &#96;IXposedHookLoadPackage&#96; 接口类的全路径(包名+类名)</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/03/18/HLAa9k7qjh1RpWG.png" alt="iShot2021-03-18下午04.49.42.png"></p>
<h3 id="步骤5"><a href="#步骤5" class="headerlink" title="步骤5"></a>步骤5</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">运行安装到手机上， 在EdXposed中找到刚才编写的模块，打开模块开关，必要时可以重启一下手机</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/03/18/P2Fy8CY5dsEnwZV.png" alt="iShot2021-03-18下午04.52.25.png"></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过xposed框架，只有你愿意并研究，可以写成很多实用的东西，比如禁用广告，绕过vip才能使用的功能……，例如下面</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/03/18/cVEwdeY9CshTlOP.png" alt="iShot2021-03-18下午05.03.59.png"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.xda-developers.com/how-to-install-magisk/">how-to-install-magisk</a></p>
<p><a href="https://github.com/topjohnwu/Magisk">Magisk</a></p>
<p><a href="https://github.com/ElderDrivers/EdXposed">EdXposed</a></p>
<p><a href="https://repo.xposed.info/module-overview">xposed仓库</a></p>
<p><a href="http://blog.fuguicun.com/articles/2020/12/31/1609386370453.html">Xposed用于生产部署实践</a></p>
<p><a href="https://github.com/NanoHttpd/nanohttpd">NanoHTTPD</a></p>
<p><a href="http://91fans.com.cn/post/zysignfour/">参考</a></p>
<p><a href="https://my.oschina.net/u/4579293/blog/4345442">参考2</a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>xposed</tag>
      </tags>
  </entry>
  <entry>
    <title>vim记录</title>
    <url>/2021/12/01/vim%E5%A4%87%E6%B3%A8/</url>
    <content><![CDATA[<h3 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>h、j、k、l</td>
<td>光标左移、下移、上移、右移</td>
</tr>
<tr>
<td>w</td>
<td>下一个单词首字母</td>
</tr>
<tr>
<td>W</td>
<td>同w，长跳</td>
</tr>
<tr>
<td>e</td>
<td>下一个单词尾字母</td>
</tr>
<tr>
<td>E</td>
<td>同e，长跳</td>
</tr>
<tr>
<td>b</td>
<td>上一个单词首字母,和w相对</td>
</tr>
<tr>
<td>B</td>
<td>同b，长跳</td>
</tr>
<tr>
<td>0</td>
<td>数字0，跳转到行首</td>
</tr>
<tr>
<td>^</td>
<td>跳转到行首的第一个字母</td>
</tr>
<tr>
<td>$</td>
<td>跳转到行尾</td>
</tr>
<tr>
<td>gg</td>
<td>跳转到首行</td>
</tr>
<tr>
<td>G</td>
<td>跳转到尾行</td>
</tr>
<tr>
<td>10gg/10G</td>
<td>跳转到指定行</td>
</tr>
<tr>
<td>*</td>
<td>向下查找光标所在的单词</td>
</tr>
<tr>
<td>#</td>
<td>向上查找光标所在的单词</td>
</tr>
</tbody></table>
<h3 id="删除复制"><a href="#删除复制" class="headerlink" title="删除复制"></a>删除复制</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>dd</td>
<td>删除光标行</td>
</tr>
<tr>
<td>dw</td>
<td>删除光标所在单词</td>
</tr>
<tr>
<td>d/D</td>
<td>删除到行尾</td>
</tr>
<tr>
<td>x</td>
<td>删除光标字符</td>
</tr>
<tr>
<td>X</td>
<td>删除光标前字符</td>
</tr>
<tr>
<td>yy</td>
<td>复制光标所在行</td>
</tr>
<tr>
<td>yw</td>
<td>复制光标所在单词</td>
</tr>
<tr>
<td>p</td>
<td>粘贴内容到光标后</td>
</tr>
<tr>
<td>P</td>
<td>粘贴内容到光标前</td>
</tr>
</tbody></table>
<h3 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>i</td>
<td>光标处插入</td>
</tr>
<tr>
<td>I</td>
<td>行首插入</td>
</tr>
<tr>
<td>a</td>
<td>追加模式，光标向后移动一位</td>
</tr>
<tr>
<td>A</td>
<td>追加模式，光标移动行尾</td>
</tr>
<tr>
<td>o</td>
<td>当前光标行下插入一行，进入插入模式</td>
</tr>
<tr>
<td>O</td>
<td>当前光标行前插入一行，进入插入模式</td>
</tr>
<tr>
<td>esc</td>
<td>退出编辑模式</td>
</tr>
</tbody></table>
<h3 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>J</td>
<td>光标下一行和光标行连接为一行</td>
</tr>
<tr>
<td>cc</td>
<td>删除光标行，进入编辑模式</td>
</tr>
<tr>
<td>cw</td>
<td>删除光标单词，进入编辑模式</td>
</tr>
<tr>
<td>c$</td>
<td>删除光标及后单词一直到行尾，进入编辑模式</td>
</tr>
<tr>
<td>s</td>
<td>删除光标字母，进入编辑模式</td>
</tr>
<tr>
<td>S</td>
<td>删除光标行，进入编辑模式</td>
</tr>
<tr>
<td>xp</td>
<td>交换光标字母和光标后一个字母位置</td>
</tr>
<tr>
<td>u</td>
<td>撤销</td>
</tr>
<tr>
<td>ctrl r</td>
<td>重做</td>
</tr>
<tr>
<td>~</td>
<td>光标字母大写，光标移动一位</td>
</tr>
</tbody></table>
<h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>:w</td>
<td>保存修改</td>
</tr>
<tr>
<td>:wq</td>
<td>保存修改，退出</td>
</tr>
<tr>
<td>:x</td>
<td>保存修改，退出</td>
</tr>
<tr>
<td>:q</td>
<td>退出，如果缓冲区有修改，则提示</td>
</tr>
<tr>
<td>:q!</td>
<td>强制退出，放弃修改</td>
</tr>
</tbody></table>
<p><img src="https://s2.loli.net/2021/12/14/vdhtCGMnVaIfwHS.png" alt="image-20211214102444606"></p>
]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>maven-gradle插件备注记录</title>
    <url>/2021/04/21/maven-gradle%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h5 id="电脑安装maven"><a href="#电脑安装maven" class="headerlink" title="电脑安装maven"></a>电脑安装maven</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">从 Maven 官方地址：http://maven.apache.org/download.cgi 下载最新版的zip包，解压缩后配置环境变量</span><br></pre></td></tr></table></figure>
<h5 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi ~/.bash_profile <span class="comment">#编辑.bash_profile文件添加配置</span></span><br><span class="line"><span class="built_in">export</span> M2_HOME=/Users/xxx/soft/apache-maven-3.6.3  <span class="comment">#本机maven地址</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$M2_HOME</span>/bin</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile  <span class="comment">#同步.bash_profile文件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mvn -version </span><br><span class="line">Apache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f) <span class="comment">#表示生效</span></span><br><span class="line">Maven home: /Users/xxx/soft/apache-maven-3.6.3  <span class="comment">#maven目录</span></span><br><span class="line">Java version: 1.8.0_251, vendor: Oracle Corporation, runtime: /Library/Java/JavaVirtualMachines/jdk1.8.0_251.jdk/Contents/Home/jre</span><br><span class="line">Default locale: zh_CN, platform encoding: UTF-8</span><br><span class="line">OS name: <span class="string">&quot;mac os x&quot;</span>, version: <span class="string">&quot;10.15.7&quot;</span>, arch: <span class="string">&quot;x86_64&quot;</span>, family: <span class="string">&quot;mac&quot;</span></span><br></pre></td></tr></table></figure>
<h5 id="maven仓库"><a href="#maven仓库" class="headerlink" title="maven仓库"></a>maven仓库</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1. 本地仓库 <span class="comment"># 默认在用户的目录下.m2/repository/的仓库目录。</span></span><br><span class="line">2. 远程仓库 <span class="comment"># mavenCentral 和 jcenter 或者 内网服务器的私有仓库</span></span><br></pre></td></tr></table></figure>
<h5 id="物料存储路径对应"><a href="#物料存储路径对应" class="headerlink" title="物料存储路径对应"></a>物料存储路径对应</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupId # 唯一标识符 例如 com.xxx.helper</span><br><span class="line">artifactId # 项目名称  log</span><br><span class="line">version # 版本 1.1.1</span><br><span class="line">implementation &#x27;com.xxx.helper:log:1.1.1&#x27; # 引入时对应</span><br></pre></td></tr></table></figure>
<h5 id="发布本地库流程"><a href="#发布本地库流程" class="headerlink" title="发布本地库流程"></a>发布本地库流程</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">创建一个Android 库项目 或者 创建一个gradle插件<span class="keyword">module</span>，在build.gradle文件中配置maven信息</span><br><span class="line">apply plugin: <span class="string">&#x27;maven&#x27;</span> <span class="comment">//引入maven 插件</span></span><br><span class="line">ext &#123;</span><br><span class="line">    PUBLISH_VERSION =<span class="string">&quot;1.1.1-beta&quot;</span> <span class="comment">//定义版本信息</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// maven配置</span></span><br><span class="line">uploadArchives &#123;</span><br><span class="line">    repositories.mavenDeployer &#123;</span><br><span class="line">        repository(url: uri(<span class="string">&#x27;../repos&#x27;</span>)) <span class="comment">//自定义本地maven仓库地址</span></span><br><span class="line">        pom.project &#123;</span><br><span class="line">            groupId <span class="string">&#x27;com.xxx.helper&#x27;</span> <span class="comment">//唯一标识</span></span><br><span class="line">            artifactId <span class="string">&#x27;log&#x27;</span> <span class="comment">//名称</span></span><br><span class="line">            version project.PUBLISH_VERSION <span class="comment">//版本</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="发布到本地仓库命令"><a href="#发布到本地仓库命令" class="headerlink" title="发布到本地仓库命令"></a>发布到本地仓库命令</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;gradlew uploadArchives</span><br></pre></td></tr></table></figure>
<h5 id="发布远程仓库流程"><a href="#发布远程仓库流程" class="headerlink" title="发布远程仓库流程"></a>发布远程仓库流程</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">创建一个Android 库项目 或者 创建一个gradle插件<span class="keyword">module</span>，在build.gradle文件中配置maven信息</span><br><span class="line">  </span><br><span class="line"><span class="comment">//https://github.com/novoda/bintray-release</span></span><br><span class="line"><span class="comment">//apply plugin: &#x27;com.novoda.bintray-release&#x27;  //gradle版本限制，6.+版本不支持</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//https://github.com/panpf/bintray-publish</span></span><br><span class="line">apply plugin: <span class="string">&#x27;com.github.panpf.bintray-publish&#x27;</span> <span class="comment">//6.+以上版本使用 </span></span><br><span class="line"></span><br><span class="line">ext &#123;</span><br><span class="line">    PUBLISH_VERSION = <span class="string">&quot;1.1.1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">publish &#123;</span><br><span class="line">    userOrg = <span class="string">&#x27;xxx&#x27;</span>             <span class="comment">// Binary用户名</span></span><br><span class="line">    repoName = <span class="string">&#x27;xxx&#x27;</span>          <span class="comment">// Binary上的刚才新建的仓库名（Repository）</span></span><br><span class="line">    groupId = <span class="string">&#x27;com.xxx.helper&#x27;</span>        <span class="comment">// 依赖名compile &#x27;a:b:c&#x27;中的包名a</span></span><br><span class="line">    artifactId = <span class="string">&#x27;log&#x27;</span>        <span class="comment">// 依赖名compile &#x27;a:b:c&#x27;中的项目名b</span></span><br><span class="line">    publishVersion = project.PUBLISH_VERSION          <span class="comment">// 依赖名compile &#x27;a:b:c&#x27;中的版本号c</span></span><br><span class="line">    desc = <span class="string">&#x27;xxx插件&#x27;</span>            <span class="comment">// 对该开源组件的说明</span></span><br><span class="line">    website = <span class="string">&#x27;https://github.com/xxx/log&#x27;</span>  <span class="comment">// VCS地址，即填写项目上传的Github地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="发布到远程仓库命令"><a href="#发布到远程仓库命令" class="headerlink" title="发布到远程仓库命令"></a>发布到远程仓库命令</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">./gradlew clean build bintrayUpload -PbintrayUser=xxx -PbintrayKey=xxxx -PdryRun=<span class="keyword">false</span> </span><br><span class="line"> -x javadocRelease <span class="comment">// -x 跳过命令</span></span><br></pre></td></tr></table></figure>
<h5 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在子项目下的build.gradle文件中配置编译脚本信息，也可以在根目录下的build.gradle文件配置</span></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenLocal()</span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">        jcenter()</span><br><span class="line"><span class="comment">//        maven &#123;</span></span><br><span class="line"><span class="comment">//            url uri(&#x27;../repos&#x27;) //本地Maven仓库地址</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">         classpath <span class="string">&#x27;com.xxx.helper:log:1.1.1&#x27;</span> <span class="comment">//插件依赖</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="引入插件信息"><a href="#引入插件信息" class="headerlink" title="引入插件信息"></a>引入插件信息</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">&#x27;com.android.application&#x27;</span> <span class="comment">//android项目</span></span><br><span class="line">apply plugin: <span class="string">&#x27;kotlin-android&#x27;</span> <span class="comment">//kotlin</span></span><br><span class="line">apply plugin: <span class="string">&#x27;plugin.log&#x27;</span> <span class="comment">//引入自定义插件</span></span><br></pre></td></tr></table></figure>
<h5 id="插件调试"><a href="#插件调试" class="headerlink" title="插件调试"></a>插件调试</h5><ol>
<li><p>创建远程调试配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Android Studio -&gt; Run -&gt; Edit Configurations -&gt; 如下图</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/04/22/m1E9aWPAplJMoOC.png" alt="iShot2021-04-22上午11.45.31.png"></p>
</li>
<li><p>复制命令行参数信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=<span class="number">5006</span></span><br></pre></td></tr></table></figure></li>
<li><p>在引入插件的项目中创建一个Run Configurations ，配置信息如下</p>
<p><img src="https://i.loli.net/2021/04/22/fLEpqT7vXRo6KC5.png" alt="iShot2021-04-22上午11.51.01.png"><br><img src="https://i.loli.net/2021/04/22/JIQvn8LUCWatlPH.png" alt="iShot2021-04-22上午11.52.59.png"></p>
</li>
<li><p>以debug的形式运行Remote配置，然后再运行【:app:build】,如果没有问题的话就可以调试</p>
<p><img src="https://i.loli.net/2021/04/22/UjoRI6sbyW5r1AJ.png" alt="iShot2021-04-22上午11.57.43.png"></p>
</li>
</ol>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://www.jianshu.com/p/cff4684803f3">参考1</a></p>
<p><a href="https://juejin.cn/post/6948626628637360135">参考2</a></p>
<p><a href="https://mwping.github.io/android/gradle-plugin.html">参考3</a></p>
<p><a href="https://www.milovetingting.cn/2020/02/25/Android/%E5%9C%A8Android%20Studio%E4%B8%AD%E8%B0%83%E8%AF%95Gradle%E6%8F%92%E4%BB%B6/#%E8%B0%83%E8%AF%95">gradle插件调试参考</a></p>
<p><a href="https://blog.csdn.net/dbs1215/article/details/108569013?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-1&spm=1001.2101.3001.4242">gradle插件调试2参考</a> </p>
<p><a href="https://doc.yonyoucloud.com/doc/wiki/project/GradleUserGuide-Wiki/dependency_management_basics/publishing_artifacts.html">gradle-指南</a></p>
]]></content>
      <categories>
        <category>gradle</category>
      </categories>
      <tags>
        <tag>gradle</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>查看so库的方法</title>
    <url>/2021/06/30/%E6%9F%A5%E7%9C%8Bso%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h4 id="查看so库的方法"><a href="#查看so库的方法" class="headerlink" title="查看so库的方法"></a>查看so库的方法</h4><ol>
<li><p><code>nm -D so文件</code> 打印出符号信息</p>
</li>
<li><p><code>readelf -a so文件</code> 用来读取elf信息</p>
</li>
<li><p><code>objdump -d so文件</code> </p>
</li>
<li><p><code>file so文件</code> 查看so库的属性</p>
</li>
<li><p><code>strings so文件</code></p>
</li>
</ol>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://blog.csdn.net/ray_zty/article/details/84612286">参考1</a></p>
<p><a href="https://man.linuxde.net/nm">参考2</a></p>
<p><a href="https://blog.csdn.net/xuanguofeng/article/details/53888314">参考3</a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>3大特性5大原则</title>
    <url>/2021/05/21/object-feature-principle/</url>
    <content><![CDATA[<h5 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h5><p><code>封装</code> 隐藏对象的属性和实现细节，仅对外提供公共访问方式，将变化隔离，便于使用，提高复用性和安全性</p>
<p><code>继承</code> 提高代码复用性；继承是多态的前提</p>
<p><code>多态</code> 父类或接口定义的引用变量可以指向子类或具体实现类的实例对象。提高了程序的拓展性</p>
<h5 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h5><p><code>单一职责原则</code> 类的功能要单一，不能包罗万象，跟杂货铺似的</p>
<p><code>开放封闭原则</code> 一个模块对于拓展是开放的，对于修改是封闭的</p>
<p><code>里式替换原则</code> 子类可以替换父类出现在父类能够出现的任何地方</p>
<p><code>依赖倒置原则</code> 高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。抽象不应该依赖于具体实现，具体实现应该依赖于抽象</p>
<p><code>接口分离原则</code> 设计时采用多个与特定客户类有关的接口比采用一个通用的接口要好</p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul>
<li>抽象会使复杂的问题更加简单化</li>
<li>从以前面向过程的执行者，变成了张张嘴的指挥者</li>
<li>面向对象更符合人类的思维，面向过程则是机器的思想</li>
</ul>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://segmentfault.com/a/1190000021898422">参考</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>通知栏使用备注</title>
    <url>/2021/03/27/%E9%80%9A%E7%9F%A5%E6%A0%8F%E4%BD%BF%E7%94%A8%E5%A4%87%E6%B3%A8/</url>
    <content><![CDATA[<h3 id="通知栏使用备注"><a href="#通知栏使用备注" class="headerlink" title="通知栏使用备注"></a>通知栏使用备注</h3><h4 id="RemoteViews"><a href="#RemoteViews" class="headerlink" title="RemoteViews"></a>RemoteViews</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个能够被显示在其他进程中的View。该View的层次结构来自资源文件，并且此类提供了一下基础的操作来帮助修改View</span><br><span class="line">的内容。RemoteViews运行在另一个进程中， RemoteViews在开发中主要会作用于两个方面通知栏和桌面小部件。因为</span><br><span class="line">View是存在于另一个进程中的，所以我们不能够像直接操作View的那样来操作RemoteView，为了帮助我们操作RemoteView，</span><br><span class="line">Google为我们提供了 RemoteViews 类来帮助我们操作。提示，提供的资源文件中，只能包含部分ViewGroup和View,</span><br><span class="line">不支持扩展，不支持自定义View。支持的ViewGroup有：GridView、AdapterViewFlipper、FrameLayout、</span><br><span class="line">GridLayout、LinearLayout、ListView、RelativeLayout、StackView、ViewFlipper。</span><br><span class="line">支持的View有：AnalogClock、Button、Chronometer、ImageButton、ImageView、ProgressBar、</span><br><span class="line">TextClock、TextView</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="PendingIntent"><a href="#PendingIntent" class="headerlink" title="PendingIntent"></a>PendingIntent</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PendingIntent 是一种特殊的 Intent， 作用和 Intent 一样是用于启动一个 Activity或者Service，或发送</span><br><span class="line"> 一条 Broadcast。通知响应用户动作便是用这个， 当对通知做出一个动作后，系统便会调用 PendingIntent，</span><br><span class="line"> 启动一个活动，服务或广播，这取决于你获取的是那种 PendingIntent。</span><br><span class="line"></span><br><span class="line">在 PendingIntent 中传入的 Context 销毁以后，PendingIntent 依旧有效，它一般使用在当 Context 销毁</span><br><span class="line">  后需要执行 Intent的地方，一般不是用于立即执行的时候，比如在点击通知后唤醒一个 Activity。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取用于启动 Activity </span></span><br><span class="line">PendingIntent.getActivity(Context context, <span class="keyword">int</span> requestCode, Intent intent, <span class="keyword">int</span> flags);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取用于发送 Broadcast</span></span><br><span class="line">PendingIntent.getBroadcast(Context context, <span class="keyword">int</span> requestCode, Intent intent, <span class="keyword">int</span> flags);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取用于启动服务</span></span><br><span class="line">PendingIntent.getService(Context context, <span class="keyword">int</span> requestCode, Intent intent, <span class="keyword">int</span> flags);</span><br><span class="line"></span><br><span class="line">PendingIntent.getActivities(Context context, <span class="keyword">int</span> reqeustCode, Intent[] intents, <span class="keyword">int</span> flags);</span><br><span class="line"></span><br><span class="line">PendingIntent.getForgroundService(Context, <span class="keyword">int</span> reqeustCode, Intent intent, <span class="keyword">int</span> flags)</span><br><span class="line"></span><br><span class="line">PendingIntent.FLAG_CANCEL_CURRENT，如果当前已存在则取消当前的并返回一个新的 PendingIntent</span><br><span class="line"></span><br><span class="line">PendingIntent.FLAG_UPDATE_CURRENT，如果已存在则更新之前的</span><br><span class="line"></span><br><span class="line">PendingIntent.FLAG_NO_CREATE，如果已存在则返回当前存在的，否则返回 <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">PendingIntent.FLAG_ONE_SHOT，表明这个 PendingIntent 只能用一次，触发一次后自动 cancel</span><br><span class="line"></span><br><span class="line">PendingIntent.FLAG_IMMUTABLE，表明这个PendingIntent 不可变</span><br><span class="line"></span><br><span class="line">requestCode 和 flags 是相关联的，如果多次获取 PendingIntent 时 requestCode 相同，此时返回的结果</span><br><span class="line">就需要参考 flags 的值。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 创建Notification，配置参数</span><br><span class="line"><span class="number">2.</span> 获取NotificationManager，发送通知</span><br><span class="line"><span class="number">3.</span> Android <span class="number">8.0</span>之后，注意添加 NotificationChannel</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 创建通知栏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Notification <span class="title">createNotification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String channelId = CHANNEL_ID + <span class="string">&quot;&quot;</span>; <span class="comment">//channel id</span></span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123; <span class="comment">//8.0系统之后 增加 NotificationChannel</span></span><br><span class="line">        CharSequence channelName = getString(R.string.app_name);</span><br><span class="line">        <span class="keyword">int</span> importance = NotificationManager.IMPORTANCE_HIGH;</span><br><span class="line">        NotificationChannel mChannel = <span class="keyword">new</span> NotificationChannel(channelId, channelName, importance);</span><br><span class="line">        mNotificationManager.createNotificationChannel(mChannel);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == mRemoteViews) &#123; <span class="comment">//自定义通知栏view ,创建RemoteViews</span></span><br><span class="line">        mRemoteViews = <span class="keyword">new</span> RemoteViews(getPackageName(), R.layout.layout_notification_bar_tool);</span><br><span class="line">        initRemoteViews(mRemoteViews); <span class="comment">//初始化自定义view </span></span><br><span class="line">    &#125;</span><br><span class="line">    Notification notification = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>, channelId)</span><br><span class="line">            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)</span><br><span class="line">            .setOngoing(<span class="keyword">true</span>) <span class="comment">//前台显示</span></span><br><span class="line">            .setSmallIcon(R.drawable.ic_launcher)</span><br><span class="line">            .setContent(mRemoteViews)</span><br><span class="line">            .build();</span><br><span class="line">    notification.when = System.currentTimeMillis();</span><br><span class="line">    IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter(ACTION_DK);</span><br><span class="line">    registerReceiver(mBroadcastReceiver, intentFilter);</span><br><span class="line">    <span class="keyword">return</span> notification;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 发送通知栏</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">sendNotification</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">    mNotification = createNotification(); <span class="comment">//上面方法，创建一个通知栏对象</span></span><br><span class="line">    mNotificationManager.notify(CHANNEL_ID ,mNotification);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h4><ul>
<li><p>setVisibility(int visibility)</p>
<p><code>Notification.VISIBILITY_PUBLIC</code>   - 显示所有通知内容</p>
<p><code>Notification.VISIBILITY_PRIVATE</code> - 只显示标题</p>
<p><code>Notification.VISIBILITY_SECRET</code>   - 不显示任何内容</p>
</li>
<li><p>setDefaults(int defaults)</p>
<p><code>Notification.DEFAULT_VIBRATE</code> - 震动提示</p>
<p><code>Notification.DEFAULT_SOUND</code> - 提示音</p>
<p><code>Notification.DEFAULT_LIGHTS</code> - 三色灯</p>
<p><code>Notification.DEFAULT_ALL</code> -上面3个集合</p>
</li>
<li><p>setVibrate(long[] pattern)</p>
<p><code>pattern</code> long类型数组， 下标为奇数为延时，偶数为震动时长，例如long[]{0, 300, 200, 300}</p>
<p>表示 延时0ms，震动300ms，延时200ms，震动300ms</p>
</li>
<li><p>setSound(Uri sound) </p>
</li>
<li><p>setLights(@ColorInt int argb, int onMs, int offMs)   颜色值、亮的时长、不亮的时长</p>
</li>
<li><p>setOngoing(boolean ongoing)  //表示正在进行的</p>
</li>
<li><p>setProgress(int max, int progress, boolean indeterminate) //展示进度条</p>
</li>
<li><p>setAutoCancel(boolean autoCancel) //点击后自动取消</p>
</li>
</ul>
<h4 id="取消通知"><a href="#取消通知" class="headerlink" title="取消通知"></a>取消通知</h4><ul>
<li>setAutoCancel()  //点击通知会清除</li>
<li>NotificationManager.cancel(int id)  //取消给定的id</li>
<li>NotificationManager.cancelAll()  //清除所有该应用的通知</li>
</ul>
<h4 id="实现类似360清理大师常驻通知栏"><a href="#实现类似360清理大师常驻通知栏" class="headerlink" title="实现类似360清理大师常驻通知栏"></a>实现类似360清理大师常驻通知栏</h4><p><img src="https://i.loli.net/2021/03/27/gmPSRtKFEifnzlL.png" alt="iShot2021-03-27上午10.25.23.png"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://my.oschina.net/Agnes2017/blog/3151339">参考</a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title>git相关记录</title>
    <url>/2021/02/28/git%E7%9B%B8%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="git分支追踪"><a href="#git分支追踪" class="headerlink" title="git分支追踪"></a>git分支追踪</h3><ul>
<li><p>手动建立追踪关系</p>
<pre><code>  git branch --set-upstream-to=&lt;远程主机名&gt;/&lt;远程分支名&gt; &lt;本地分支名&gt;
  git branch --set-upstream-to=origin/dev dev 
</code></pre>
</li>
<li><p>push时建立追踪关系</p>
<pre><code>  git push -u &lt;远程主机名&gt; &lt;本地分支名&gt;
  git push -u origin dev 
</code></pre>
</li>
<li><p>建分支时建立跟踪关系</p>
<pre><code>  git checkout -b &lt;本地分支名&gt; &lt;远程主机名&gt;/&lt;远程分支名&gt;
  git checkout -b dev  origin/dev
</code></pre>
</li>
<li><p>查看追踪关系</p>
<pre><code>  git branch -vv
</code></pre>
</li>
<li><p>查看所有的分支信息</p>
<pre><code>  git branch -va
</code></pre>
</li>
</ul>
<ul>
<li><p>处理文件重命名后无法提交</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git默认是不区分大小写的，所以你需要设置为区分大小写</span><br><span class="line">git config --global core.ignorecase false --全局设置</span><br><span class="line"> ignorecase &#x3D; false  --项目设置</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.51cto.com/u_12564104/2896738">参考-重命名文件提交</a></p>
</li>
</ul>
<p><a href="https://blog.csdn.net/qq_42780289/article/details/97762596">参考</a></p>
<h3 id="git忽略文件"><a href="#git忽略文件" class="headerlink" title="git忽略文件"></a>git忽略文件</h3><ul>
<li><p>从未提交过的文件可以用.gitignore</p>
</li>
<li><p>已经推送（push）过的文件1</p>
<pre><code>  git rm --cached Xml/config.xml
  --想从git远程库中删除，并在以后的提交中忽略，但是却还想在本地保留这个文件。
</code></pre>
</li>
<li><p>已经推送（push）过的文件2</p>
<pre><code>  git update-index --assume-unchanged Xml/config.xml
  --想在以后的提交时忽略此文件，即使本地已经修改过，而且不删除git远程库中相应文件。
</code></pre>
</li>
</ul>
<p><a href="https://blog.csdn.net/HaHa_Sir/article/details/80628545">参考</a> </p>
<h3 id="git-暂存修改"><a href="#git-暂存修改" class="headerlink" title="git 暂存修改"></a>git 暂存修改</h3><ul>
<li><p>git stash     </p>
<pre><code>  将当前所有修改项(未提交的)暂存，压栈。
</code></pre>
</li>
<li><p>git stash save 【message】</p>
<pre><code>  给 stash 存储的修改起个名字。
</code></pre>
</li>
<li><p>git stash list</p>
<pre><code>  列出所有暂存项，查看暂存区的所有暂存修改。
</code></pre>
</li>
<li><p>git stash apply stash@{X} </p>
<pre><code>  取出相应的暂存。
</code></pre>
</li>
<li><p>git stash drop stash@{X} </p>
<pre><code>  将记录列表中取出的对应暂存记录删除。
</code></pre>
</li>
<li><p>git stash clear </p>
<pre><code>  清除所有暂存项。
</code></pre>
</li>
<li><p>git stash apply </p>
<pre><code>  将暂存的修改重新应用，使用git status可以看到以前暂存的修改又回来了。
</code></pre>
</li>
<li><p>git stash pop</p>
<pre><code>  取出最近一次暂存并删除记录列表中对应记录。
</code></pre>
</li>
<li><p>git stash pop 冲突处理</p>
<ul>
<li><p>第一步：git  stash pop</p>
</li>
<li><p>第二步：处理冲突</p>
</li>
<li><p>第三步：git reset</p>
</li>
<li><p>第四步：git stash drop</p>
</li>
</ul>
</li>
</ul>
<p><a href="https://stackoverflow.com/questions/7751555/how-to-resolve-git-stash-conflict-without-commit">参考</a> </p>
<p><a href="https://blog.csdn.net/youzhouliu/article/details/101673732">参考1</a></p>
<p><a href="https://www.cnblogs.com/mzy520/p/11282751.html">参考2</a> </p>
<h3 id="git拉取失败"><a href="#git拉取失败" class="headerlink" title="git拉取失败"></a>git拉取失败</h3><ul>
<li>解决办法<pre><code>  1.保留你本地的修改
  git merge --abort
  git reset --merge
  合并后记得一定要提交这个本地的合并
  然后在获取线上仓库
  git pull
</code></pre>
</li>
</ul>
<p><a href="http://yijiebuyi.com/blog/5b55eb51ad49ce41e2de9c85dd4513ca.html">参考</a><br><a href="https://blog.csdn.net/u013190088/article/details/82026442?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase">git修改最后一次提交</a> </p>
<h3 id="git-删除分支"><a href="#git-删除分支" class="headerlink" title="git 删除分支"></a>git 删除分支</h3><ul>
<li>删除远程分支<pre><code>  git push origin --delete [远程分支名]
  git branch -d [本地分支名]
</code></pre>
</li>
</ul>
<h3 id="git-重置相关"><a href="#git-重置相关" class="headerlink" title="git 重置相关"></a>git 重置相关</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br><span class="line">- 工作区、暂存区都重置</span><br><span class="line">git reset --soft HEAD^</span><br><span class="line">- 保留工作区、暂存区，会把reset节点之后修改的内容存放到暂存区</span><br><span class="line">git reset  &#x2F;&#x2F;缺省参数 [ --mixed ]</span><br><span class="line">- 只保留工作区，重置暂存区</span><br></pre></td></tr></table></figure>


<p><a href="https://www.jianshu.com/p/c2ec5f06cf1a">参考</a></p>
<h3 id="git-简写相关"><a href="#git-简写相关" class="headerlink" title="git 简写相关"></a>git 简写相关</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[alias]</span><br><span class="line">          s &#x3D; status</span><br><span class="line">          a &#x3D; !git add . &amp;&amp; git status</span><br><span class="line">          au &#x3D; !git add -u . &amp;&amp; git status</span><br><span class="line">          aa &#x3D; !git add . &amp;&amp; git add -u . &amp;&amp; git status</span><br><span class="line">          c &#x3D; commit</span><br><span class="line">          cm &#x3D; commit -m</span><br><span class="line">          ca &#x3D; commit --amend # careful</span><br><span class="line">          ac &#x3D; !git add . &amp;&amp; git commit</span><br><span class="line">          acm &#x3D; !git add . &amp;&amp; git commit -m</span><br><span class="line">          l &#x3D; log --graph --all --pretty&#x3D;format:&#39;%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset&#39;</span><br><span class="line">          ll &#x3D; log --stat --abbrev-commit</span><br><span class="line">          lg &#x3D; log --color --graph --pretty&#x3D;format:&#39;%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --date&#x3D;relative</span><br><span class="line">          llg &#x3D; log --color --graph --pretty&#x3D;format:&#39;%C(bold white)%H %d%Creset%n%s%n%+b%C(bold blue)%an &lt;%ae&gt;%Creset %C(bold green)%cr (%ci)&#39; --abbrev-commit</span><br><span class="line">          d &#x3D; diff</span><br><span class="line">          master &#x3D; checkout master</span><br><span class="line">          spull &#x3D; svn rebase</span><br><span class="line">          spush &#x3D; svn dcommit</span><br><span class="line">          alias &#x3D; !git config --list | grep &#39;alias\\.&#39; | sed &#39;s&#x2F;alias\\.\\([^&#x3D;]*\\)&#x3D;\\(.*\\)&#x2F;\\1\\\t &#x3D;&gt; \\2&#x2F;&#39; | sort</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Aliases for git.</span><br><span class="line">alias g&#x3D;&#39;git&#39;</span><br><span class="line">alias gs&#x3D;&#39;git status&#39;</span><br><span class="line"></span><br><span class="line">alias ga&#x3D;&#39;git add&#39;</span><br><span class="line">alias gaa&#x3D;&#39;git add --all&#39;</span><br><span class="line"></span><br><span class="line">alias gc&#x3D;&#39;git commit&#39;</span><br><span class="line">alias gcm&#x3D;&#39;git commit --message&#39;</span><br><span class="line">alias gca&#x3D;&#39;git commit --add&#39;</span><br><span class="line">alias gcam&#x3D;&#39;git commit --add --message&#39;</span><br><span class="line">alias gce&#x3D;&#39;git commit --amend&#39;  # Edit commit message. &#39;gce&#39; &#x3D; &#39;git commit edit&#39;</span><br><span class="line"></span><br><span class="line">alias gb&#x3D;&#39;git branch&#39;</span><br><span class="line">alias gba&#x3D;&#39;git branch --all&#39;</span><br><span class="line"></span><br><span class="line">alias gd&#x3D;&#39;git diff&#39;</span><br><span class="line">alias gds&#x3D;&#39;git diff --staged&#39;</span><br><span class="line">alias gdt&#x3D;&#39;git difftool&#39;</span><br><span class="line"></span><br><span class="line">alias gmt&#x3D;&#39;git mergetool&#39;</span><br><span class="line"></span><br><span class="line">alias gch&#x3D;&#39;git checkout&#39;</span><br><span class="line">alias gchm&#x3D;&#39;git checkout master&#39;</span><br><span class="line">alias gchb&#x3D;&#39;git checkout -b&#39;</span><br><span class="line"></span><br><span class="line">alias gl&#x3D;&#39;git log --decorate&#39;</span><br><span class="line">alias glo&#x3D;&#39;git log --decorate --graph --oneline&#39;</span><br><span class="line">alias gloa&#x3D;&#39;git log --decorate --graph --oneline --all&#39;</span><br><span class="line">alias glao&#x3D;&#39;gloa&#39;</span><br><span class="line">alias gls&#x3D;&#39;git log --decorate --graph --stat&#39;</span><br><span class="line">alias gla&#x3D;&#39;git log --decorate --graph --all&#39;</span><br><span class="line">alias gld&#x3D;&#39;git log --decorate --graph --patch&#39;  # Show diff. &#39;gld&#39; &#x3D; &#39;git log diff&#39;</span><br><span class="line">alias glda&#x3D;&#39;git log --decorate --graph --patch --all&#39;</span><br><span class="line">alias glad&#x3D;&#39;glda&#39;</span><br><span class="line"></span><br><span class="line">alias gp&#x3D;&#39;git push&#39;</span><br><span class="line">alias gpo&#x3D;&#39;git push origin&#39;</span><br><span class="line">alias gpom&#x3D;&#39;git push origin master&#39;</span><br><span class="line"></span><br><span class="line">alias gri&#x3D;&#39;git rebase --interactive&#39;</span><br><span class="line">alias grc&#x3D;&#39;git rebase --continue&#39;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Oh-My-Zsh Git Aliases</span><br><span class="line">enable (git) plugin.</span><br><span class="line"></span><br><span class="line">g	git	gst	git status</span><br><span class="line">gl	git pull	gup	git fetch &amp;&amp; git rebase</span><br><span class="line">gp	git push	gc	git commit -v</span><br><span class="line">gca	git commit -v -a	gco	git checkout</span><br><span class="line">gcm	git checkout master	gb	git branch</span><br><span class="line">gba	git branch -a	gcount	git shortlog -sn</span><br><span class="line">gcp	git cherry-pick	glg	git log --stat --max-count&#x3D;5</span><br><span class="line">glgg	git log --graph --max-count&#x3D;5	gss	git status -s</span><br><span class="line">ga	git add	gm	git merge</span><br><span class="line">grh	git reset HEAD	grhh	git reset HEAD --hard</span><br><span class="line">gsr	git svn rebase	gsd	git svn dcommit</span><br><span class="line">ggpull	git pull origin $(current_branch)	ggpush	git push origin $(current_branch)</span><br><span class="line">gdv	git diff -w &quot;$@&quot; | view -</span><br><span class="line">ggpnp	git pull origin $(current_branch) &amp;&amp; git push origin $(current_branch)</span><br><span class="line">git-svn-dcommit-push	git svn dcommit &amp;&amp; git push github master:svntrunk</span><br><span class="line">gpa	git add .; git commit -m &quot;$1&quot;; git push; # only in the ocodo fork.</span><br></pre></td></tr></table></figure>


<p><a href="https://www.monolune.com/useful-aliases-for-git-commands/">参考</a></p>
<p><a href="https://gist.github.com/DavidToca/3086571">参考2</a></p>
<h3 id="git-plugin"><a href="#git-plugin" class="headerlink" title="git plugin"></a>git plugin</h3><p>The git plugin provides many <a href="#aliases">aliases</a> and a few useful <a href="#functions">functions</a>.</p>
<p>To use it, add <code>git</code> to the plugins array in your zshrc file:</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">plugins=(... git)</span><br></pre></td></tr></table></figure>
<h3 id="Aliases"><a href="#Aliases" class="headerlink" title="Aliases"></a>Aliases</h3><table>
<thead>
<tr>
<th align="left">Alias</th>
<th align="left">Command</th>
</tr>
</thead>
<tbody><tr>
<td align="left">g</td>
<td align="left">git</td>
</tr>
<tr>
<td align="left">ga</td>
<td align="left">git add</td>
</tr>
<tr>
<td align="left">gaa</td>
<td align="left">git add –all</td>
</tr>
<tr>
<td align="left">gapa</td>
<td align="left">git add –patch</td>
</tr>
<tr>
<td align="left">gau</td>
<td align="left">git add –update</td>
</tr>
<tr>
<td align="left">gav</td>
<td align="left">git add –verbose</td>
</tr>
<tr>
<td align="left">gap</td>
<td align="left">git apply</td>
</tr>
<tr>
<td align="left">gapt</td>
<td align="left">git apply –3way</td>
</tr>
<tr>
<td align="left">gb</td>
<td align="left">git branch</td>
</tr>
<tr>
<td align="left">gba</td>
<td align="left">git branch -a</td>
</tr>
<tr>
<td align="left">gbd</td>
<td align="left">git branch -d</td>
</tr>
<tr>
<td align="left">gbda</td>
<td align="left">git branch –no-color –merged | grep -vE “^([+<em>]|\s</em>($(git_main_branch)|$(git_develop_branch))\s*$)” | xargs git branch -d 2&gt;/dev/null</td>
</tr>
<tr>
<td align="left">gbD</td>
<td align="left">git branch -D</td>
</tr>
<tr>
<td align="left">gbl</td>
<td align="left">git blame -b -w</td>
</tr>
<tr>
<td align="left">gbnm</td>
<td align="left">git branch –no-merged</td>
</tr>
<tr>
<td align="left">gbr</td>
<td align="left">git branch –remote</td>
</tr>
<tr>
<td align="left">gbs</td>
<td align="left">git bisect</td>
</tr>
<tr>
<td align="left">gbsb</td>
<td align="left">git bisect bad</td>
</tr>
<tr>
<td align="left">gbsg</td>
<td align="left">git bisect good</td>
</tr>
<tr>
<td align="left">gbsr</td>
<td align="left">git bisect reset</td>
</tr>
<tr>
<td align="left">gbss</td>
<td align="left">git bisect start</td>
</tr>
<tr>
<td align="left">gc</td>
<td align="left">git commit -v</td>
</tr>
<tr>
<td align="left">gc!</td>
<td align="left">git commit -v –amend</td>
</tr>
<tr>
<td align="left">gcn!</td>
<td align="left">git commit -v –no-edit –amend</td>
</tr>
<tr>
<td align="left">gca</td>
<td align="left">git commit -v -a</td>
</tr>
<tr>
<td align="left">gca!</td>
<td align="left">git commit -v -a –amend</td>
</tr>
<tr>
<td align="left">gcan!</td>
<td align="left">git commit -v -a –no-edit –amend</td>
</tr>
<tr>
<td align="left">gcans!</td>
<td align="left">git commit -v -a -s –no-edit –amend</td>
</tr>
<tr>
<td align="left">gcam</td>
<td align="left">git commit -a -m</td>
</tr>
<tr>
<td align="left">gcas</td>
<td align="left">git commit -a -s</td>
</tr>
<tr>
<td align="left">gcasm</td>
<td align="left">git commit -a -s -m</td>
</tr>
<tr>
<td align="left">gcsm</td>
<td align="left">git commit -s -m</td>
</tr>
<tr>
<td align="left">gcb</td>
<td align="left">git checkout -b</td>
</tr>
<tr>
<td align="left">gcf</td>
<td align="left">git config –list</td>
</tr>
<tr>
<td align="left">gcl</td>
<td align="left">git clone –recurse-submodules</td>
</tr>
<tr>
<td align="left">gccd</td>
<td align="left">git clone –recurse-submodules “$@” &amp;&amp; cd “$(basename $_ .git)”</td>
</tr>
<tr>
<td align="left">gclean</td>
<td align="left">git clean -id</td>
</tr>
<tr>
<td align="left">gpristine</td>
<td align="left">git reset –hard &amp;&amp; git clean -dffx</td>
</tr>
<tr>
<td align="left">gcm</td>
<td align="left">git checkout $(git_main_branch)</td>
</tr>
<tr>
<td align="left">gcd</td>
<td align="left">git checkout $(git_develop_branch)</td>
</tr>
<tr>
<td align="left">gcmsg</td>
<td align="left">git commit -m</td>
</tr>
<tr>
<td align="left">gco</td>
<td align="left">git checkout</td>
</tr>
<tr>
<td align="left">gcor</td>
<td align="left">git checkout –recurse-submodules</td>
</tr>
<tr>
<td align="left">gcount</td>
<td align="left">git shortlog -sn</td>
</tr>
<tr>
<td align="left">gcp</td>
<td align="left">git cherry-pick</td>
</tr>
<tr>
<td align="left">gcpa</td>
<td align="left">git cherry-pick –abort</td>
</tr>
<tr>
<td align="left">gcpc</td>
<td align="left">git cherry-pick –continue</td>
</tr>
<tr>
<td align="left">gcs</td>
<td align="left">git commit -S</td>
</tr>
<tr>
<td align="left">gd</td>
<td align="left">git diff</td>
</tr>
<tr>
<td align="left">gdca</td>
<td align="left">git diff –cached</td>
</tr>
<tr>
<td align="left">gdcw</td>
<td align="left">git diff –cached –word-diff</td>
</tr>
<tr>
<td align="left">gdct</td>
<td align="left">git describe –tags $(git rev-list –tags –max-count=1)</td>
</tr>
<tr>
<td align="left">gds</td>
<td align="left">git diff –staged</td>
</tr>
<tr>
<td align="left">gdt</td>
<td align="left">git diff-tree –no-commit-id –name-only -r</td>
</tr>
<tr>
<td align="left">gdnolock</td>
<td align="left">git diff $@ “:(exclude)package-lock.json” “:(exclude)&ast;.lock”</td>
</tr>
<tr>
<td align="left">gdup</td>
<td align="left">git diff @{upstream}</td>
</tr>
<tr>
<td align="left">gdv</td>
<td align="left">git diff -w $@ | view -</td>
</tr>
<tr>
<td align="left">gdw</td>
<td align="left">git diff –word-diff</td>
</tr>
<tr>
<td align="left">gf</td>
<td align="left">git fetch</td>
</tr>
<tr>
<td align="left">gfa</td>
<td align="left">git fetch –all –prune</td>
</tr>
<tr>
<td align="left">gfg</td>
<td align="left">git ls-files | grep</td>
</tr>
<tr>
<td align="left">gfo</td>
<td align="left">git fetch origin</td>
</tr>
<tr>
<td align="left">gg</td>
<td align="left">git gui citool</td>
</tr>
<tr>
<td align="left">gga</td>
<td align="left">git gui citool –amend</td>
</tr>
<tr>
<td align="left">ggf</td>
<td align="left">git push –force origin $(current_branch)</td>
</tr>
<tr>
<td align="left">ggfl</td>
<td align="left">git push –force-with-lease origin $(current_branch)</td>
</tr>
<tr>
<td align="left">ggl</td>
<td align="left">git pull origin $(current_branch)</td>
</tr>
<tr>
<td align="left">ggp</td>
<td align="left">git push origin $(current_branch)</td>
</tr>
<tr>
<td align="left">ggpnp</td>
<td align="left">ggl &amp;&amp; ggp</td>
</tr>
<tr>
<td align="left">ggpull</td>
<td align="left">git pull origin “$(git_current_branch)”</td>
</tr>
<tr>
<td align="left">ggpur</td>
<td align="left">ggu</td>
</tr>
<tr>
<td align="left">ggpush</td>
<td align="left">git push origin “$(git_current_branch)”</td>
</tr>
<tr>
<td align="left">ggsup</td>
<td align="left">git branch –set-upstream-to=origin/$(git_current_branch)</td>
</tr>
<tr>
<td align="left">ggu</td>
<td align="left">git pull –rebase origin $(current_branch)</td>
</tr>
<tr>
<td align="left">gpsup</td>
<td align="left">git push –set-upstream origin $(git_current_branch)</td>
</tr>
<tr>
<td align="left">ghh</td>
<td align="left">git help</td>
</tr>
<tr>
<td align="left">gignore</td>
<td align="left">git update-index –assume-unchanged</td>
</tr>
<tr>
<td align="left">gignored</td>
<td align="left">git ls-files -v | grep “^[[:lower:]]”</td>
</tr>
<tr>
<td align="left">git-svn-dcommit-push</td>
<td align="left">git svn dcommit &amp;&amp; git push github $(git_main_branch):svntrunk</td>
</tr>
<tr>
<td align="left">gk</td>
<td align="left">gitk –all –branches &amp;!</td>
</tr>
<tr>
<td align="left">gke</td>
<td align="left">gitk –all $(git log -g –pretty=%h) &amp;!</td>
</tr>
<tr>
<td align="left">gl</td>
<td align="left">git pull</td>
</tr>
<tr>
<td align="left">glg</td>
<td align="left">git log –stat</td>
</tr>
<tr>
<td align="left">glgp</td>
<td align="left">git log –stat -p</td>
</tr>
<tr>
<td align="left">glgg</td>
<td align="left">git log –graph</td>
</tr>
<tr>
<td align="left">glgga</td>
<td align="left">git log –graph –decorate –all</td>
</tr>
<tr>
<td align="left">glgm</td>
<td align="left">git log –graph –max-count=10</td>
</tr>
<tr>
<td align="left">glo</td>
<td align="left">git log –oneline –decorate</td>
</tr>
<tr>
<td align="left">glol</td>
<td align="left">git log –graph –pretty=’%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)&lt;%an&gt;%Creset’</td>
</tr>
<tr>
<td align="left">glols</td>
<td align="left">git log –graph –pretty=’%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)&lt;%an&gt;%Creset’ –stat</td>
</tr>
<tr>
<td align="left">glod</td>
<td align="left">git log –graph –pretty=’%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)&lt;%an&gt;%Creset’</td>
</tr>
<tr>
<td align="left">glods</td>
<td align="left">git log –graph –pretty=’%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)&lt;%an&gt;%Creset’ –date=short</td>
</tr>
<tr>
<td align="left">glola</td>
<td align="left">git log –graph –pretty=’%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)&lt;%an&gt;%Creset’ –all</td>
</tr>
<tr>
<td align="left">glog</td>
<td align="left">git log –oneline –decorate –graph</td>
</tr>
<tr>
<td align="left">gloga</td>
<td align="left">git log –oneline –decorate –graph –all</td>
</tr>
<tr>
<td align="left">glp</td>
<td align="left">git log –pretty=&lt;format&gt;</td>
</tr>
<tr>
<td align="left">gm</td>
<td align="left">git merge</td>
</tr>
<tr>
<td align="left">gmom</td>
<td align="left">git merge origin/$(git_main_branch)</td>
</tr>
<tr>
<td align="left">gmtl</td>
<td align="left">git mergetool –no-prompt</td>
</tr>
<tr>
<td align="left">gmtlvim</td>
<td align="left">git mergetool –no-prompt –tool=vimdiff</td>
</tr>
<tr>
<td align="left">gmum</td>
<td align="left">git merge upstream/$(git_main_branch)</td>
</tr>
<tr>
<td align="left">gma</td>
<td align="left">git merge –abort</td>
</tr>
<tr>
<td align="left">gp</td>
<td align="left">git push</td>
</tr>
<tr>
<td align="left">gpd</td>
<td align="left">git push –dry-run</td>
</tr>
<tr>
<td align="left">gpf</td>
<td align="left">git push –force-with-lease</td>
</tr>
<tr>
<td align="left">gpf!</td>
<td align="left">git push –force</td>
</tr>
<tr>
<td align="left">gpoat</td>
<td align="left">git push origin –all &amp;&amp; git push origin –tags</td>
</tr>
<tr>
<td align="left">gpr</td>
<td align="left">git pull –rebase</td>
</tr>
<tr>
<td align="left">gpu</td>
<td align="left">git push upstream</td>
</tr>
<tr>
<td align="left">gpv</td>
<td align="left">git push -v</td>
</tr>
<tr>
<td align="left">gr</td>
<td align="left">git remote</td>
</tr>
<tr>
<td align="left">gra</td>
<td align="left">git remote add</td>
</tr>
<tr>
<td align="left">grb</td>
<td align="left">git rebase</td>
</tr>
<tr>
<td align="left">grba</td>
<td align="left">git rebase –abort</td>
</tr>
<tr>
<td align="left">grbc</td>
<td align="left">git rebase –continue</td>
</tr>
<tr>
<td align="left">grbd</td>
<td align="left">git rebase $(git_develop_branch)</td>
</tr>
<tr>
<td align="left">grbi</td>
<td align="left">git rebase -i</td>
</tr>
<tr>
<td align="left">grbm</td>
<td align="left">git rebase $(git_main_branch)</td>
</tr>
<tr>
<td align="left">grbo</td>
<td align="left">git rebase –onto</td>
</tr>
<tr>
<td align="left">grbs</td>
<td align="left">git rebase –skip</td>
</tr>
<tr>
<td align="left">grev</td>
<td align="left">git revert</td>
</tr>
<tr>
<td align="left">grh</td>
<td align="left">git reset</td>
</tr>
<tr>
<td align="left">grhh</td>
<td align="left">git reset –hard</td>
</tr>
<tr>
<td align="left">groh</td>
<td align="left">git reset origin/$(git_current_branch) –hard</td>
</tr>
<tr>
<td align="left">grm</td>
<td align="left">git rm</td>
</tr>
<tr>
<td align="left">grmc</td>
<td align="left">git rm –cached</td>
</tr>
<tr>
<td align="left">grmv</td>
<td align="left">git remote rename</td>
</tr>
<tr>
<td align="left">grrm</td>
<td align="left">git remote remove</td>
</tr>
<tr>
<td align="left">grs</td>
<td align="left">git restore</td>
</tr>
<tr>
<td align="left">grset</td>
<td align="left">git remote set-url</td>
</tr>
<tr>
<td align="left">grss</td>
<td align="left">git restore –source</td>
</tr>
<tr>
<td align="left">grst</td>
<td align="left">git restore –staged</td>
</tr>
<tr>
<td align="left">grt</td>
<td align="left">cd “$(git rev-parse –show-toplevel || echo .)”</td>
</tr>
<tr>
<td align="left">gru</td>
<td align="left">git reset –</td>
</tr>
<tr>
<td align="left">grup</td>
<td align="left">git remote update</td>
</tr>
<tr>
<td align="left">grv</td>
<td align="left">git remote -v</td>
</tr>
<tr>
<td align="left">gsb</td>
<td align="left">git status -sb</td>
</tr>
<tr>
<td align="left">gsd</td>
<td align="left">git svn dcommit</td>
</tr>
<tr>
<td align="left">gsh</td>
<td align="left">git show</td>
</tr>
<tr>
<td align="left">gsi</td>
<td align="left">git submodule init</td>
</tr>
<tr>
<td align="left">gsps</td>
<td align="left">git show –pretty=short –show-signature</td>
</tr>
<tr>
<td align="left">gsr</td>
<td align="left">git svn rebase</td>
</tr>
<tr>
<td align="left">gss</td>
<td align="left">git status -s</td>
</tr>
<tr>
<td align="left">gst</td>
<td align="left">git status</td>
</tr>
<tr>
<td align="left">gsta</td>
<td align="left">git stash push</td>
</tr>
<tr>
<td align="left">gsta</td>
<td align="left">git stash save</td>
</tr>
<tr>
<td align="left">gstaa</td>
<td align="left">git stash apply</td>
</tr>
<tr>
<td align="left">gstc</td>
<td align="left">git stash clear</td>
</tr>
<tr>
<td align="left">gstd</td>
<td align="left">git stash drop</td>
</tr>
<tr>
<td align="left">gstl</td>
<td align="left">git stash list</td>
</tr>
<tr>
<td align="left">gstp</td>
<td align="left">git stash pop</td>
</tr>
<tr>
<td align="left">gsts</td>
<td align="left">git stash show –text</td>
</tr>
<tr>
<td align="left">gstu</td>
<td align="left">git stash –include-untracked</td>
</tr>
<tr>
<td align="left">gstall</td>
<td align="left">git stash –all</td>
</tr>
<tr>
<td align="left">gsu</td>
<td align="left">git submodule update</td>
</tr>
<tr>
<td align="left">gsw</td>
<td align="left">git switch</td>
</tr>
<tr>
<td align="left">gswc</td>
<td align="left">git switch -c</td>
</tr>
<tr>
<td align="left">gswm</td>
<td align="left">git switch $(git_main_branch)</td>
</tr>
<tr>
<td align="left">gswd</td>
<td align="left">git switch $(git_develop_branch)</td>
</tr>
<tr>
<td align="left">gts</td>
<td align="left">git tag -s</td>
</tr>
<tr>
<td align="left">gtv</td>
<td align="left">git tag | sort -V</td>
</tr>
<tr>
<td align="left">gtl</td>
<td align="left">gtl(){ git tag –sort=-v:refname -n -l ${1}* }; noglob gtl</td>
</tr>
<tr>
<td align="left">gunignore</td>
<td align="left">git update-index –no-assume-unchanged</td>
</tr>
<tr>
<td align="left">gunwip</td>
<td align="left">git log -n 1 | grep -q -c “--wip--“ &amp;&amp; git reset HEAD~1</td>
</tr>
<tr>
<td align="left">gup</td>
<td align="left">git pull –rebase</td>
</tr>
<tr>
<td align="left">gupv</td>
<td align="left">git pull –rebase -v</td>
</tr>
<tr>
<td align="left">gupa</td>
<td align="left">git pull –rebase –autostash</td>
</tr>
<tr>
<td align="left">gupav</td>
<td align="left">git pull –rebase –autostash -v</td>
</tr>
<tr>
<td align="left">glum</td>
<td align="left">git pull upstream $(git_main_branch)</td>
</tr>
<tr>
<td align="left">gwch</td>
<td align="left">git whatchanged -p –abbrev-commit –pretty=medium</td>
</tr>
<tr>
<td align="left">gwip</td>
<td align="left">git add -A; git rm $(git ls-files –deleted) 2&gt; /dev/null; git commit –no-verify –no-gpg-sign -m “–wip– [skip ci]”</td>
</tr>
<tr>
<td align="left">gam</td>
<td align="left">git am</td>
</tr>
<tr>
<td align="left">gamc</td>
<td align="left">git am –continue</td>
</tr>
<tr>
<td align="left">gams</td>
<td align="left">git am –skip</td>
</tr>
<tr>
<td align="left">gama</td>
<td align="left">git am –abort</td>
</tr>
<tr>
<td align="left">gamscp</td>
<td align="left">git am –show-current-patch</td>
</tr>
</tbody></table>
<h3 id="Main-branch-preference"><a href="#Main-branch-preference" class="headerlink" title="Main branch preference"></a>Main branch preference</h3><p>Following the recent push for removing racially-charged words from our technical vocabulary, the git plugin favors using<br>a branch name other than <code>master</code>. In this case, we favor the shorter, neutral and descriptive term <code>main</code>. This means<br>that any aliases and functions that previously used <code>master</code>, will use <code>main</code> if that branch exists. We do this via the<br>function <code>git_main_branch</code>.</p>
<h3 id="Deprecated-aliases"><a href="#Deprecated-aliases" class="headerlink" title="Deprecated aliases"></a>Deprecated aliases</h3><p>These are aliases that have been removed, renamed, or otherwise modified in a way that may, or may not, receive further support.</p>
<table>
<thead>
<tr>
<th align="left">Alias</th>
<th align="left">Command</th>
<th align="left">Modification</th>
</tr>
</thead>
<tbody><tr>
<td align="left">gap</td>
<td align="left"><code>git add --patch</code></td>
<td align="left">new alias <code>gapa</code></td>
</tr>
<tr>
<td align="left">gcl</td>
<td align="left"><code>git config --list</code></td>
<td align="left">new alias <code>gcf</code></td>
</tr>
<tr>
<td align="left">gdc</td>
<td align="left"><code>git diff --cached</code></td>
<td align="left">new alias <code>gdca</code></td>
</tr>
<tr>
<td align="left">gdt</td>
<td align="left"><code>git difftool</code></td>
<td align="left">no replacement</td>
</tr>
<tr>
<td align="left">ggpull</td>
<td align="left"><code>git pull origin $(current_branch)</code></td>
<td align="left">new alias <code>ggl</code> (<code>ggpull</code> still exists for now though)</td>
</tr>
<tr>
<td align="left">ggpur</td>
<td align="left"><code>git pull --rebase origin $(current_branch)</code></td>
<td align="left">new alias <code>ggu</code> (<code>ggpur</code> still exists for now though)</td>
</tr>
<tr>
<td align="left">ggpush</td>
<td align="left"><code>git push origin $(current_branch)</code></td>
<td align="left">new alias <code>ggp</code> (<code>ggpush</code> still exists for now though)</td>
</tr>
<tr>
<td align="left">gk</td>
<td align="left"><code>gitk --all --branches</code></td>
<td align="left">now aliased to <code>gitk --all --branches</code></td>
</tr>
<tr>
<td align="left">glg</td>
<td align="left"><code>git log --stat --max-count = 10</code></td>
<td align="left">now aliased to <code>git log --stat --color</code></td>
</tr>
<tr>
<td align="left">glgg</td>
<td align="left"><code>git log --graph --max-count = 10</code></td>
<td align="left">now aliased to <code>git log --graph --color</code></td>
</tr>
<tr>
<td align="left">gwc</td>
<td align="left"><code>git whatchanged -p --abbrev-commit --pretty = medium</code></td>
<td align="left">new alias <code>gwch</code></td>
</tr>
</tbody></table>
<h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><h3 id="Current"><a href="#Current" class="headerlink" title="Current"></a>Current</h3><table>
<thead>
<tr>
<th align="left">Command</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>grename &lt;old&gt; &lt;new&gt;</code></td>
<td align="left">Rename <code>old</code> branch to <code>new</code>, including in origin remote</td>
</tr>
<tr>
<td align="left">current_branch</td>
<td align="left">Return the name of the current branch</td>
</tr>
<tr>
<td align="left">git_current_user_name</td>
<td align="left">Returns the <code>user.name</code> config value</td>
</tr>
<tr>
<td align="left">git_current_user_email</td>
<td align="left">Returns the <code>user.email</code> config value</td>
</tr>
<tr>
<td align="left">git_main_branch</td>
<td align="left">Returns the name of the main branch: <code>main</code> if it exists, <code>master</code> otherwise</td>
</tr>
<tr>
<td align="left">git_develop_branch</td>
<td align="left">Returns the name of the develop branch: <code>dev</code>, <code>devel</code>, <code>development</code> if they exist, <code>develop</code> otherwise</td>
</tr>
</tbody></table>
<h3 id="Work-in-Progress-WIP"><a href="#Work-in-Progress-WIP" class="headerlink" title="Work in Progress (WIP)"></a>Work in Progress (WIP)</h3><p>These features allow to pause a branch development and switch to another one (<em>“Work in Progress”</em>,  or wip). When you want to go back to work, just unwip it.</p>
<table>
<thead>
<tr>
<th align="left">Command</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">work_in_progress</td>
<td align="left">Echoes a warning if the current branch is a wip</td>
</tr>
<tr>
<td align="left">gwip</td>
<td align="left">Commit wip branch</td>
</tr>
<tr>
<td align="left">gunwip</td>
<td align="left">Uncommit wip branch</td>
</tr>
</tbody></table>
<h3 id="Deprecated-functions"><a href="#Deprecated-functions" class="headerlink" title="Deprecated functions"></a>Deprecated functions</h3><table>
<thead>
<tr>
<th align="left">Command</th>
<th align="left">Description</th>
<th align="left">Reason</th>
</tr>
</thead>
<tbody><tr>
<td align="left">current_repository</td>
<td align="left">Return the names of the current remotes</td>
<td align="left">Didn’t work properly. Use <code>git remote -v</code> instead (<code>grv</code> alias)</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>附近wifi列表</title>
    <url>/2021/04/11/location-wifi-list%E5%A4%87%E6%B3%A8/</url>
    <content><![CDATA[<h5 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h5><ul>
<li>运行时需要申请 <code>定位</code>权限</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.ACCESS_FINE_LOCATION&quot;</span>/&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.ACCESS_COARSE_LOCATION&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>在<code>清单文件</code>声明权限</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.CHANGE_WIFI_STATE&quot;</span>/&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span>/&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ol>
<li>创建监听广播</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/***</span></span><br><span class="line"><span class="comment">    * 注册网络发生变化广播，理论上网络发生变化后都需要重新</span></span><br><span class="line"><span class="comment">    * 扫描一遍wifi列表</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> val mBroadcastReceiver: BroadcastReceiver = object : BroadcastReceiver() &#123;</span><br><span class="line">    <span class="function">override fun <span class="title">onReceive</span><span class="params">(context: Context, intent: Intent)</span> </span>&#123;</span><br><span class="line">        val action = intent.action</span><br><span class="line">        <span class="keyword">if</span> (action != <span class="keyword">null</span>) &#123;</span><br><span class="line">            when (action) &#123;</span><br><span class="line">                WifiManager.NETWORK_STATE_CHANGED_ACTION -&gt; &#123;</span><br><span class="line">                    val networkInfo =</span><br><span class="line">                        intent.getParcelableExtra&lt;NetworkInfo&gt;(WifiManager.EXTRA_NETWORK_INFO)</span><br><span class="line">                    println(<span class="string">&quot;networkInfo = $networkInfo\n\n\n\n&quot;</span>)</span><br><span class="line">                    scanLocationWifiList() <span class="comment">//网络状态发生变化后，重新扫描附近wifi列表</span></span><br><span class="line">                &#125;</span><br><span class="line">                WifiManager.SCAN_RESULTS_AVAILABLE_ACTION -&gt; &#123;</span><br><span class="line">                    <span class="keyword">var</span> wifiList = WifiUtils.getLocationWifiList(mActivity)</span><br><span class="line">                    mDataBinding.recyclerView.adapter =</span><br><span class="line">                        WifiListAdapter(wifiList, application)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                WifiManager.SUPPLICANT_STATE_CHANGED_ACTION -&gt; &#123;</span><br><span class="line">                    val error = intent.getIntExtra(WifiManager.EXTRA_SUPPLICANT_ERROR, -<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">if</span> (error == WifiManager.ERROR_AUTHENTICATING) &#123; <span class="comment">//密码不正确</span></span><br><span class="line">                        hintPwdError()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>注册广播监听</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">val intentFilter = IntentFilter()</span><br><span class="line">intentFilter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION) <span class="comment">// 监听网络状态发生变化</span></span><br><span class="line">intentFilter.addAction(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION) <span class="comment">// 附近wifi列表可以获取到</span></span><br><span class="line">intentFilter.addAction(WifiManager.SUPPLICANT_STATE_CHANGED_ACTION) <span class="comment">//wifi连接失败，例如密码不对</span></span><br><span class="line">registerReceiver(mBroadcastReceiver, intentFilter) <span class="comment">//注册广播监听</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>用到的方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">  * 扫描附近可用的wifi列表，备注需要定位权限</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> fun <span class="title">scanLocationWifiList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      val isWifiEnable = WifiUtils.isWifiNetworkAvailable(mActivity)</span><br><span class="line">      val hasLocationPermission =</span><br><span class="line">      PackageManager.PERMISSION_GRANTED == checkSelfPermission(</span><br><span class="line">            Manifest.permission.ACCESS_FINE_LOCATION)</span><br><span class="line">      <span class="keyword">if</span> (hasLocationPermission) &#123;</span><br><span class="line">            WifiUtils.scanLocationWifi(mActivity)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            requestPermissions(</span><br><span class="line">            arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),</span><br><span class="line">            REQUEST_LOCATION_CODE)</span><br><span class="line">        &#125;</span><br><span class="line">     println(<span class="string">&quot;wifi是否已经连接 = $isWifiEnable 是否有定位权限 = $hasLocationPermission&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>Wifi工具类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//wifi工具</span></span><br><span class="line">object WifiUtils &#123;</span><br><span class="line">   </span><br><span class="line">       <span class="comment">/***</span></span><br><span class="line"><span class="comment">        * 判断wifi网络是否可用</span></span><br><span class="line"><span class="comment">        * - wifi已开启</span></span><br><span class="line"><span class="comment">        * - WiFi已经连接</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function">fun <span class="title">isWifiNetworkAvailable</span><span class="params">(context: Context)</span>: Boolean </span>&#123;</span><br><span class="line">           val wifiManager = getWifiManager(context)</span><br><span class="line">           <span class="keyword">if</span> (wifiManager.isWifiEnabled) &#123;</span><br><span class="line">               val connectivityManager =</span><br><span class="line">                   context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager</span><br><span class="line">               <span class="keyword">var</span> networkInfo = connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI)</span><br><span class="line">   </span><br><span class="line">               <span class="keyword">return</span> networkInfo?.isConnected == <span class="keyword">true</span></span><br><span class="line">           &#125;</span><br><span class="line">   </span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span></span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="comment">/***</span></span><br><span class="line"><span class="comment">        * 获取附近开放的扫描的wifi列表</span></span><br><span class="line"><span class="comment">        * 备注：需要在&#123;<span class="doctag">@link</span> WifiManager#SCAN_RESULTS_AVAILABLE_ACTION&#125;广播之后获取</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function">fun <span class="title">getLocationWifiList</span><span class="params">(context: Context)</span>: MutableList&lt;WifiItem&gt; </span>&#123;</span><br><span class="line">         </span><br><span class="line">           <span class="keyword">var</span> wifiList = mutableListOf&lt;WifiItem&gt;()</span><br><span class="line">           val wifiManager = getWifiManager(context)</span><br><span class="line">           val resultList = wifiManager.scanResults</span><br><span class="line">   </span><br><span class="line">           resultList.sortWith(Comparator &#123; o1, o2 -&gt; o2.level.compareTo(o1.level) &#125;) <span class="comment">//根据WiFi信号强度排序</span></span><br><span class="line">   </span><br><span class="line">           resultList.forEach &#123;</span><br><span class="line">               val ssid = it.SSID</span><br><span class="line">               val level = WifiManager.calculateSignalLevel(it.level, <span class="number">4</span>)</span><br><span class="line">               <span class="keyword">if</span> (!TextUtils.isEmpty(ssid)) &#123;  <span class="comment">//去除wifi名称为空的热点</span></span><br><span class="line">                   val wifiItem = WifiItem(ssid, level)</span><br><span class="line">                   <span class="keyword">if</span> (!wifiList.contains(wifiItem)) &#123;</span><br><span class="line">                       wifiList.add(wifiItem)</span><br><span class="line">   </span><br><span class="line">                       println(<span class="string">&quot;wifiItem = $wifiItem&quot;</span>)</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> wifiList</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="function"><span class="keyword">private</span> fun <span class="title">getWifiManager</span><span class="params">(context: Context)</span>: WifiManager </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> context.getSystemService(Context.WIFI_SERVICE) as WifiManager</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="function"><span class="keyword">private</span> fun <span class="title">genWifiConfiguration</span><span class="params">(ssid: String, pws: String)</span>: WifiConfiguration </span>&#123;</span><br><span class="line">           val wifiConfiguration = WifiConfiguration()</span><br><span class="line">           wifiConfiguration.allowedAuthAlgorithms.clear()</span><br><span class="line">           wifiConfiguration.allowedGroupCiphers.clear()</span><br><span class="line">           wifiConfiguration.allowedKeyManagement.clear()</span><br><span class="line">           wifiConfiguration.allowedPairwiseCiphers.clear()</span><br><span class="line">           wifiConfiguration.allowedProtocols.clear()</span><br><span class="line">   </span><br><span class="line">           wifiConfiguration.SSID = <span class="string">&quot;\&quot;&quot;</span> + ssid + <span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line">   </span><br><span class="line">           wifiConfiguration.preSharedKey = <span class="string">&quot;\&quot;&quot;</span> + pws + <span class="string">&quot;\&quot;&quot;</span></span><br><span class="line">           wifiConfiguration.hiddenSSID = <span class="keyword">true</span></span><br><span class="line">           wifiConfiguration.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN)</span><br><span class="line">           wifiConfiguration.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP)</span><br><span class="line">           wifiConfiguration.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_PSK)</span><br><span class="line">           wifiConfiguration.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP)</span><br><span class="line">           wifiConfiguration.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP)</span><br><span class="line">           wifiConfiguration.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP)</span><br><span class="line">           wifiConfiguration.status = WifiConfiguration.Status.ENABLED</span><br><span class="line">   </span><br><span class="line">           <span class="keyword">return</span> wifiConfiguration</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 连接wifi</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> ssid:wifi名称</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> pwd:wifi密码</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function">fun <span class="title">connectWifiWithPwd</span><span class="params">(context: Context, ssid: String, pwd: String)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">var</span> wifiManager = getWifiManager(context)</span><br><span class="line">           <span class="keyword">var</span> networkId = wifiManager.addNetwork(genWifiConfiguration(ssid, pwd))</span><br><span class="line">           wifiManager.enableNetwork(networkId, <span class="keyword">true</span>)</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="comment">/***</span></span><br><span class="line"><span class="comment">        * 扫描附近wifi</span></span><br><span class="line"><span class="comment">        * 备注：wifi管理器扫描附近wifi列表后，wifi管理器会在扫描结束后</span></span><br><span class="line"><span class="comment">        * 发送一个广播action &#123;<span class="doctag">@link</span> SCAN_RESULTS_AVAILABLE_ACTION &#125;</span></span><br><span class="line"><span class="comment">        * 参考方法&#123;<span class="doctag">@link</span> getLocationWifiList()&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function">fun <span class="title">scanLocationWifi</span><span class="params">(context: Context)</span> </span>&#123;</span><br><span class="line">           getWifiManager(context).startScan()</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 跳转到系统wifi设置界面</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function">fun <span class="title">goToWifiSettings</span><span class="params">(context: Context)</span> </span>&#123;</span><br><span class="line">           context.startActivity(</span><br><span class="line">               Intent(Settings.ACTION_WIFI_SETTINGS)</span><br><span class="line">                   .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)</span><br><span class="line">           )</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="comment">/***</span></span><br><span class="line"><span class="comment">        * 直接打开wifi</span></span><br><span class="line"><span class="comment">        * 备注：如果targetSdkVersion 大于 28（P-9.0系统）即 29（Q-10.0系统）以及以上,此方法无效</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function">fun <span class="title">openWifi</span><span class="params">(context: Context)</span> </span>&#123;</span><br><span class="line">           getWifiManager(context).isWifiEnabled = <span class="keyword">true</span></span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 获取wifi的名称</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function">fun <span class="title">getWiFiName</span><span class="params">(context: Context)</span>: String? </span>&#123;</span><br><span class="line">           <span class="keyword">var</span> wifiName = <span class="string">&quot;&quot;</span></span><br><span class="line">           val wm = getWifiManager(context)</span><br><span class="line">           val wifiInfo = wm.connectionInfo</span><br><span class="line">           <span class="keyword">if</span> (wifiInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">               val s = wifiInfo.ssid</span><br><span class="line">               <span class="keyword">if</span> (s.length &gt; <span class="number">2</span> &amp;&amp; s[<span class="number">0</span>] == <span class="string">&#x27;&quot;&#x27;</span> &amp;&amp; s[s.length - <span class="number">1</span>] == <span class="string">&#x27;&quot;&#x27;</span>) &#123;</span><br><span class="line">                   wifiName = s.substring(<span class="number">1</span>, s.length - <span class="number">1</span>)</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> wifiName</span><br><span class="line">       &#125;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>WifiActivity类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">class WifiActivity : BaseVBActivity&lt;WifiActivityBinding&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    companion object &#123;</span><br><span class="line">        <span class="keyword">const</span> val REQUEST_LOCATION_CODE = <span class="number">0x34</span></span><br><span class="line">        <span class="function">fun <span class="title">actionWifiTest</span><span class="params">(context: Context)</span> </span>&#123;</span><br><span class="line">            val intent = Intent(context, WifiActivity::class.java)</span><br><span class="line">            context.startActivity(intent)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> lateinit <span class="keyword">var</span> mWifiManager: WifiManager</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> lateinit <span class="keyword">var</span> mConnectivityManager: ConnectivityManager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> val mBroadcastReceiver: BroadcastReceiver = object : BroadcastReceiver() &#123;</span><br><span class="line">        <span class="function">override fun <span class="title">onReceive</span><span class="params">(context: Context, intent: Intent)</span> </span>&#123;</span><br><span class="line">            val action = intent.action</span><br><span class="line">            <span class="keyword">if</span> (action != <span class="keyword">null</span>) &#123;</span><br><span class="line">                when (action) &#123;</span><br><span class="line">                    WifiManager.NETWORK_STATE_CHANGED_ACTION -&gt; &#123;</span><br><span class="line">                        val networkInfo =</span><br><span class="line">                            intent.getParcelableExtra&lt;NetworkInfo&gt;(WifiManager.EXTRA_NETWORK_INFO)</span><br><span class="line">                        println(<span class="string">&quot;networkInfo = $networkInfo\n\n\n\n&quot;</span>)</span><br><span class="line">                        scanLocationWifiList()</span><br><span class="line">                    &#125;</span><br><span class="line">                    WifiManager.SCAN_RESULTS_AVAILABLE_ACTION -&gt; &#123;</span><br><span class="line">                        <span class="keyword">var</span> wifiList = WifiUtils.getLocationWifiList(mActivity)</span><br><span class="line">                        mDataBinding.recyclerView.adapter =</span><br><span class="line">                            WifiListAdapter(wifiList, application)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    WifiManager.SUPPLICANT_STATE_CHANGED_ACTION -&gt; &#123;</span><br><span class="line">                        val error = intent.getIntExtra(WifiManager.EXTRA_SUPPLICANT_ERROR, -<span class="number">100</span>)</span><br><span class="line">                        println(<span class="string">&quot;error = $error&quot;</span>)</span><br><span class="line">                        <span class="keyword">if</span> (error == WifiManager.ERROR_AUTHENTICATING) &#123; <span class="comment">//密码不正确</span></span><br><span class="line">                            hintPwdError()</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 监听网络发生变化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> val mNetworkCallback: ConnectivityManager.NetworkCallback =</span><br><span class="line">        object : ConnectivityManager.NetworkCallback() &#123;</span><br><span class="line">            <span class="function">override fun <span class="title">onAvailable</span><span class="params">(network: Network)</span> </span>&#123; <span class="comment">//监听的网络类型可以使用</span></span><br><span class="line">                <span class="keyword">super</span>.onAvailable(network)</span><br><span class="line">                println(<span class="string">&quot;NetworkCallback onAvailable network = $network &quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function">override fun <span class="title">onCapabilitiesChanged</span><span class="params">( //监听的网络类型可以使用之后就会执行</span></span></span><br><span class="line"><span class="function"><span class="params">                network: Network,</span></span></span><br><span class="line"><span class="function"><span class="params">                networkCapabilities: NetworkCapabilities</span></span></span><br><span class="line"><span class="function"><span class="params">            )</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.onCapabilitiesChanged(network, networkCapabilities)</span><br><span class="line">                println(<span class="string">&quot;NetworkCallback onCapabilitiesChanged network = $network &quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function">override fun <span class="title">onUnavailable</span><span class="params">()</span> </span>&#123; <span class="comment">//网络不可用</span></span><br><span class="line">                <span class="keyword">super</span>.onUnavailable()</span><br><span class="line">                println(<span class="string">&quot;NetworkCallback onUnavailable &quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function">override fun <span class="title">onLost</span><span class="params">(network: Network)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.onLost(network)</span><br><span class="line">                println(<span class="string">&quot;NetworkCallback onLost network = $network &quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 提示密码不正确</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> fun <span class="title">hintPwdError</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Toast.makeText(mActivity, <span class="string">&quot;wifi密码错误&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">afterCreate</span><span class="params">(savedInstanceState: Bundle?)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.afterCreate(savedInstanceState)</span><br><span class="line"></span><br><span class="line">        mDataBinding.recyclerView.layoutManager = LinearLayoutManager(mActivity)</span><br><span class="line"></span><br><span class="line">        mWifiManager = application.getSystemService(Context.WIFI_SERVICE) as WifiManager</span><br><span class="line"></span><br><span class="line">        mConnectivityManager =</span><br><span class="line">            application.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        mDataBinding.btnOpen.visibility = View.GONE</span><br><span class="line">        mDataBinding.btnOpen.setOnClickListener &#123;</span><br><span class="line">            scanLocationWifiList()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        val request = NetworkRequest.Builder()</span><br><span class="line">            .addTransportType(NetworkCapabilities.TRANSPORT_WIFI).build()</span><br><span class="line">        mConnectivityManager.registerNetworkCallback(request, mNetworkCallback)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        val intentFilter = IntentFilter()</span><br><span class="line">        intentFilter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION) <span class="comment">// 监听网络状态发生变化</span></span><br><span class="line">        intentFilter.addAction(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION) <span class="comment">// 附近wifi列表可以获取到</span></span><br><span class="line">        intentFilter.addAction(WifiManager.SUPPLICANT_STATE_CHANGED_ACTION) <span class="comment">//wifi连接失败，例如密码不对</span></span><br><span class="line">        registerReceiver(mBroadcastReceiver, intentFilter)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 扫描附近可用的wifi列表，备注需要定位权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> fun <span class="title">scanLocationWifiList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        val isWifiEnable = WifiUtils.isWifiNetworkAvailable(mActivity)</span><br><span class="line">        val hasLocationPermission =</span><br><span class="line">            PackageManager.PERMISSION_GRANTED == checkSelfPermission(</span><br><span class="line">                Manifest.permission.ACCESS_FINE_LOCATION</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">if</span> (hasLocationPermission) &#123;</span><br><span class="line">            WifiUtils.scanLocationWifi(mActivity)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            requestPermissions(</span><br><span class="line">                arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),</span><br><span class="line">                REQUEST_LOCATION_CODE</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        println(<span class="string">&quot;wifi是否已经连接 = $isWifiEnable 是否有定位权限 = $hasLocationPermission&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">onRequestPermissionsResult</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        requestCode: Int,</span></span></span><br><span class="line"><span class="function"><span class="params">        permissions: Array&lt;out String&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">        grantResults: IntArray</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults)</span><br><span class="line">        <span class="keyword">if</span> (requestCode == REQUEST_LOCATION_CODE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                WifiUtils.scanLocationWifi(mActivity)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy()</span><br><span class="line">        unregisterReceiver(mBroadcastReceiver)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != mConnectivityManager) &#123;</span><br><span class="line">            mConnectivityManager.unregisterNetworkCallback(mNetworkCallback)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WifiListAdapter</span>(</span></span><br><span class="line">        private val itemList: List&lt;WifiItem&gt;, private val application: Application</span><br><span class="line">    ) : RecyclerView.Adapter&lt;WifiListAdapter.VH&gt;() &#123;</span><br><span class="line">        <span class="function">override fun <span class="title">onCreateViewHolder</span><span class="params">(parent: ViewGroup, viewType: Int)</span>: VH </span>&#123;</span><br><span class="line">            val childView = LayoutInflater.from(parent.context).inflate(R.layout.item_wifi, <span class="keyword">null</span>)</span><br><span class="line">            childView.layoutParams =</span><br><span class="line">                ViewGroup.LayoutParams(</span><br><span class="line">                    ViewGroup.LayoutParams.MATCH_PARENT,</span><br><span class="line">                    ViewGroup.LayoutParams.WRAP_CONTENT</span><br><span class="line">                )</span><br><span class="line">            <span class="keyword">return</span> VH(childView)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">override fun <span class="title">onBindViewHolder</span><span class="params">(holder: VH, position: Int)</span> </span>&#123;</span><br><span class="line">            val ssid = itemList[position].ssid</span><br><span class="line">            holder.tvName.text = ssid</span><br><span class="line">            holder.itemView.setOnClickListener &#123;</span><br><span class="line">                WifiUtils.connectWifiWithPwd(application, ssid, <span class="string">&quot;xxxx&quot;</span>)<span class="comment">//连接wifi,wifi名称，wifi密码</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">override fun <span class="title">getItemCount</span><span class="params">()</span>: Int </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> itemList.size</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        class VH(itemView: View) : ViewHolder(itemView) &#123;</span><br><span class="line">            <span class="keyword">var</span> tvName: TextView = itemView.findViewById(R.id.name)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">getLayoutId</span><span class="params">()</span>: Int </span>= R.layout.wifi_activity</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>wifi_activity</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;androidx.constraintlayout.widget.ConstraintLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/btn_open&quot;</span><br><span class="line">            style=&quot;?attr/borderlessButtonStyle&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;48dp&quot;</span><br><span class="line">            android:layout_margin=&quot;25dp&quot;</span><br><span class="line">            android:background=&quot;@drawable/selector_btn_background&quot;</span><br><span class="line">            android:text=&quot;扫描附近wifi&quot;</span><br><span class="line">            android:textColor=&quot;@color/white&quot;</span><br><span class="line">            android:textSize=&quot;18sp&quot;</span><br><span class="line">            android:textStyle=&quot;bold&quot;</span><br><span class="line">            app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class="line">            android:id=&quot;@+id/recycler_view&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;</span><br><span class="line">            android:paddingTop=&quot;10dp&quot;</span><br><span class="line">            android:paddingBottom=&quot;40dp&quot;</span><br><span class="line">            android:overScrollMode=&quot;never&quot;</span><br><span class="line">            app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintRight_toRightOf=&quot;parent&quot; /&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h5><p><code>WifiManager</code> 的方法 <code>setWifiEnabled</code> 如果targetSdkVersion 大于 28（P-9.0系统）即 29（Q-10.0系统）以及以上,此方法无效</p>
<p><code>WifiManager</code> 的方法 <code>startScan</code> 此方法可能会在后续版本中被移除 </p>
<p><code>WifiManager.NETWORK_STATE_CHANGED_ACTION</code>  -监听网络状态发生变化</p>
<p><code>WifiManager.SCAN_RESULTS_AVAILABLE_ACTION</code> -附近wifi列表可以获取到</p>
<p><code>WifiManager.SUPPLICANT_STATE_CHANGED_ACTION</code> -wifi连接失败，例如密码不对,具体查看 <code>WifiManager</code>以 ERROR开头的常量</p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://blog.csdn.net/Jm0218Xx/article/details/107055823?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-10.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-10.control">参考1</a></p>
<p><a href="https://my.oschina.net/u/4377926/blog/4275938">参考2</a></p>
<p><a href="https://github.com/zly394/WifiListDemo">参考3</a></p>
<p><a href="https://github.com/boundless1024/test_wifi">参考4</a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>wifi</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM 字节码指令表</title>
    <url>/2021/07/03/%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="JVM-字节码指令表"><a href="#JVM-字节码指令表" class="headerlink" title="JVM 字节码指令表"></a>JVM 字节码指令表</h4><table>
<thead>
<tr>
<th align="left">字节码</th>
<th align="left">助记符</th>
<th align="left">指令含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0x00</td>
<td align="left">nop</td>
<td align="left">什么都不做</td>
</tr>
<tr>
<td align="left">0x01</td>
<td align="left">aconst_null</td>
<td align="left">将 null 推送至栈顶</td>
</tr>
<tr>
<td align="left">0x02</td>
<td align="left">iconst_m1</td>
<td align="left">将 int 型 -1 推送至栈顶</td>
</tr>
<tr>
<td align="left">0x03</td>
<td align="left">iconst_0</td>
<td align="left">将 int 型 0 推送至栈顶</td>
</tr>
<tr>
<td align="left">0x04</td>
<td align="left">iconst_1</td>
<td align="left">将 int 型 1 推送至栈顶</td>
</tr>
<tr>
<td align="left">0x05</td>
<td align="left">iconst_2</td>
<td align="left">将 int 型 2 推送至栈顶</td>
</tr>
<tr>
<td align="left">0x06</td>
<td align="left">iconst_3</td>
<td align="left">将 int 型 3 推送至栈顶</td>
</tr>
<tr>
<td align="left">0x07</td>
<td align="left">iconst_4</td>
<td align="left">将 int 型 4 推送至栈顶</td>
</tr>
<tr>
<td align="left">0x08</td>
<td align="left">iconst_5</td>
<td align="left">将 int 型 5 推送至栈顶</td>
</tr>
<tr>
<td align="left">0x09</td>
<td align="left">lconst_0</td>
<td align="left">将 long 型 0 推送至栈顶</td>
</tr>
<tr>
<td align="left">0x0a</td>
<td align="left">lconst_1</td>
<td align="left">将 long 型 1 推送至栈顶</td>
</tr>
<tr>
<td align="left">0x0b</td>
<td align="left">fconst_0</td>
<td align="left">将 float 型 0 推送至栈顶</td>
</tr>
<tr>
<td align="left">0x0c</td>
<td align="left">fconst_1</td>
<td align="left">将 float 型 1 推送至栈顶</td>
</tr>
<tr>
<td align="left">0x0d</td>
<td align="left">fconst_2</td>
<td align="left">将 float 型 2 推送至栈顶</td>
</tr>
<tr>
<td align="left">0x0e</td>
<td align="left">dconst_0</td>
<td align="left">将 double 型 0 推送至栈顶</td>
</tr>
<tr>
<td align="left">0x0f</td>
<td align="left">dconst_1</td>
<td align="left">将 double 型 1 推送至栈顶</td>
</tr>
<tr>
<td align="left">0x10</td>
<td align="left">bipush</td>
<td align="left">将单字节的常量值（Byte.MIN_VALUE ～ Byte.MAX_VALUE，即 -128～127）推送至栈顶</td>
</tr>
<tr>
<td align="left">0x11</td>
<td align="left">sipush</td>
<td align="left">将短整型的常量值（Short.MIN_VALUE ～ Short.MAX_VALUE，即 -32768～32767）推送至栈顶</td>
</tr>
<tr>
<td align="left">0x12</td>
<td align="left">ldc</td>
<td align="left">将 int、float 或 String 型常量值从常量池中推送至栈顶</td>
</tr>
<tr>
<td align="left">0x13</td>
<td align="left">ldc_w</td>
<td align="left">将 int、float 或 String 型常量值从常量池中推送至栈顶（宽索引）</td>
</tr>
<tr>
<td align="left">0x14</td>
<td align="left">ldc2_w</td>
<td align="left">将 long 或 double 型常量值从常量池中推送至栈顶（宽索引）</td>
</tr>
<tr>
<td align="left">0x15</td>
<td align="left">iload</td>
<td align="left">将指定的 int 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x16</td>
<td align="left">lload</td>
<td align="left">将指定的 long 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x17</td>
<td align="left">fload</td>
<td align="left">将指定的 float 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x18</td>
<td align="left">dload</td>
<td align="left">将指定的 double 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x19</td>
<td align="left">aload</td>
<td align="left">将指定的 引用 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x1a</td>
<td align="left">iload_0</td>
<td align="left">将第一个 int 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x1b</td>
<td align="left">iload_1</td>
<td align="left">将第二个 int 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x1c</td>
<td align="left">iload_2</td>
<td align="left">将第三个 int 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x1d</td>
<td align="left">iload_3</td>
<td align="left">将第四个 int 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x1e</td>
<td align="left">lload_0</td>
<td align="left">将第一个 long 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x1f</td>
<td align="left">lload_1</td>
<td align="left">将第二个 long 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x20</td>
<td align="left">lload_2</td>
<td align="left">将第三个 long 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x21</td>
<td align="left">lload_3</td>
<td align="left">将第四个 long 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x22</td>
<td align="left">fload_0</td>
<td align="left">将第一个 float 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x23</td>
<td align="left">fload_1</td>
<td align="left">将第二个 float 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x24</td>
<td align="left">fload_2</td>
<td align="left">将第三个 float 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x25</td>
<td align="left">fload_3</td>
<td align="left">将第四个 float 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x26</td>
<td align="left">dload_0</td>
<td align="left">将第一个 double 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x27</td>
<td align="left">dload_1</td>
<td align="left">将第二个 double 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x28</td>
<td align="left">dload_2</td>
<td align="left">将第三个 double 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x29</td>
<td align="left">dload_3</td>
<td align="left">将第四个 double 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x2a</td>
<td align="left">aload_0</td>
<td align="left">将第一个 引用 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x2b</td>
<td align="left">aload_1</td>
<td align="left">将第二个 引用 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x2c</td>
<td align="left">aload_2</td>
<td align="left">将第三个 引用 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x2d</td>
<td align="left">aload_3</td>
<td align="left">将第四个 引用 型局部变量推送至栈顶</td>
</tr>
<tr>
<td align="left">0x2e</td>
<td align="left">iaload</td>
<td align="left">将 int 型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td align="left">0x2f</td>
<td align="left">laload</td>
<td align="left">将 long 型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td align="left">0x30</td>
<td align="left">faload</td>
<td align="left">将 float 型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td align="left">0x31</td>
<td align="left">daload</td>
<td align="left">将 double 型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td align="left">0x32</td>
<td align="left">aaload</td>
<td align="left">将 引用 型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td align="left">0x33</td>
<td align="left">baload</td>
<td align="left">将 boolean 或 byte 型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td align="left">0x34</td>
<td align="left">caload</td>
<td align="left">将 char 型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td align="left">0x35</td>
<td align="left">saload</td>
<td align="left">将 short 型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td align="left">0x36</td>
<td align="left">istore</td>
<td align="left">将栈顶 int 型数值存入指定局部变量</td>
</tr>
<tr>
<td align="left">0x37</td>
<td align="left">lstore</td>
<td align="left">将栈顶 long 型数值存入指定局部变量</td>
</tr>
<tr>
<td align="left">0x38</td>
<td align="left">fstore</td>
<td align="left">将栈顶 float 型数值存入指定局部变量</td>
</tr>
<tr>
<td align="left">0x39</td>
<td align="left">dstore</td>
<td align="left">将栈顶 double 型数值存入指定局部变量</td>
</tr>
<tr>
<td align="left">0x3a</td>
<td align="left">astore</td>
<td align="left">将栈顶 引用 型数值存入指定局部变量</td>
</tr>
<tr>
<td align="left">0x3b</td>
<td align="left">istore_0</td>
<td align="left">将栈顶 int 型数值存入第一个局部变量</td>
</tr>
<tr>
<td align="left">0x3c</td>
<td align="left">istore_1</td>
<td align="left">将栈顶 int 型数值存入第二个局部变量</td>
</tr>
<tr>
<td align="left">0x3d</td>
<td align="left">istore_2</td>
<td align="left">将栈顶 int 型数值存入第三个局部变量</td>
</tr>
<tr>
<td align="left">0x3e</td>
<td align="left">istore_3</td>
<td align="left">将栈顶 int 型数值存入第四个局部变量</td>
</tr>
<tr>
<td align="left">0x3f</td>
<td align="left">lstore_0</td>
<td align="left">将栈顶 long 型数值存入第一个局部变量</td>
</tr>
<tr>
<td align="left">0x40</td>
<td align="left">lstore_1</td>
<td align="left">将栈顶 long 型数值存入第二个局部变量</td>
</tr>
<tr>
<td align="left">0x41</td>
<td align="left">lstore_2</td>
<td align="left">将栈顶 long 型数值存入第三个局部变量</td>
</tr>
<tr>
<td align="left">0x42</td>
<td align="left">lstore_3</td>
<td align="left">将栈顶 long 型数值存入第四个局部变量</td>
</tr>
<tr>
<td align="left">0x43</td>
<td align="left">fstore_0</td>
<td align="left">将栈顶 float 型数值存入第一个局部变量</td>
</tr>
<tr>
<td align="left">0x44</td>
<td align="left">fstore_1</td>
<td align="left">将栈顶 float 型数值存入第二个局部变量</td>
</tr>
<tr>
<td align="left">0x45</td>
<td align="left">fstore_2</td>
<td align="left">将栈顶 float 型数值存入第三个局部变量</td>
</tr>
<tr>
<td align="left">0x46</td>
<td align="left">fstore_3</td>
<td align="left">将栈顶 float 型数值存入第四个局部变量</td>
</tr>
<tr>
<td align="left">0x47</td>
<td align="left">dstore_0</td>
<td align="left">将栈顶 double 型数值存入第一个局部变量</td>
</tr>
<tr>
<td align="left">0x48</td>
<td align="left">dstore_1</td>
<td align="left">将栈顶 double 型数值存入第二个局部变量</td>
</tr>
<tr>
<td align="left">0x49</td>
<td align="left">dstore_2</td>
<td align="left">将栈顶 double 型数值存入第三个局部变量</td>
</tr>
<tr>
<td align="left">0x4a</td>
<td align="left">dstore_3</td>
<td align="left">将栈顶 double 型数值存入第四个局部变量</td>
</tr>
<tr>
<td align="left">0x4b</td>
<td align="left">astore_0</td>
<td align="left">将栈顶 引用 型数值存入第一个局部变量</td>
</tr>
<tr>
<td align="left">0x4c</td>
<td align="left">astore_1</td>
<td align="left">将栈顶 引用 型数值存入第二个局部变量</td>
</tr>
<tr>
<td align="left">0x4d</td>
<td align="left">astore_2</td>
<td align="left">将栈顶 引用 型数值存入第三个局部变量</td>
</tr>
<tr>
<td align="left">0x4e</td>
<td align="left">astore_3</td>
<td align="left">将栈顶 引用 型数值存入第四个局部变量</td>
</tr>
<tr>
<td align="left">0x4f</td>
<td align="left">iastore</td>
<td align="left">将栈顶 int 型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td align="left">0x50</td>
<td align="left">lastore</td>
<td align="left">将栈顶 long 型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td align="left">0x51</td>
<td align="left">fastore</td>
<td align="left">将栈顶 float 型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td align="left">0x52</td>
<td align="left">dastore</td>
<td align="left">将栈顶 double 型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td align="left">0x53</td>
<td align="left">aastore</td>
<td align="left">将栈顶 引用 型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td align="left">0x54</td>
<td align="left">bastore</td>
<td align="left">将栈顶 boolean 或 byte 型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td align="left">0x55</td>
<td align="left">castore</td>
<td align="left">将栈顶 char 型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td align="left">0x56</td>
<td align="left">sastore</td>
<td align="left">将栈顶 short 型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td align="left">0x57</td>
<td align="left">pop</td>
<td align="left">将栈顶数值弹出（数值不能是 long 或 double 类型的）</td>
</tr>
<tr>
<td align="left">0x58</td>
<td align="left">pop2</td>
<td align="left">将栈顶的一个（对于 long 或 double 类型）或两个数值（对于非 long 或 double 的其他类型）弹出</td>
</tr>
<tr>
<td align="left">0x59</td>
<td align="left">dup</td>
<td align="left">复制栈顶数值并将复制值压入栈顶</td>
</tr>
<tr>
<td align="left">0x5a</td>
<td align="left">dup_x1</td>
<td align="left">复制栈顶数值并将两个复制值压入栈顶</td>
</tr>
<tr>
<td align="left">0x5b</td>
<td align="left">dup_x2</td>
<td align="left">复制栈顶数值并将三个（或两个）复制值压入栈顶</td>
</tr>
<tr>
<td align="left">0x5c</td>
<td align="left">dup2</td>
<td align="left">复制栈顶一个（对于 long 或 double 类型）或两个数值（对于非 long 或 double 的其他类型）并将复制值压入栈顶</td>
</tr>
<tr>
<td align="left">0x5d</td>
<td align="left">dup2_x1</td>
<td align="left">dup_x1 指令的双倍版本</td>
</tr>
<tr>
<td align="left">0x5e</td>
<td align="left">dup2_x2</td>
<td align="left">dup_x2 指令的双倍版本</td>
</tr>
<tr>
<td align="left">0x5f</td>
<td align="left">swap</td>
<td align="left">将栈最顶端的两个数值互换（数值不能是 long 或 double 类型）</td>
</tr>
<tr>
<td align="left">0x60</td>
<td align="left">iadd</td>
<td align="left">将栈顶两 int 型数值相加并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x61</td>
<td align="left">ladd</td>
<td align="left">将栈顶两 long 型数值相加并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x62</td>
<td align="left">fadd</td>
<td align="left">将栈顶两 float 型数值相加并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x63</td>
<td align="left">dadd</td>
<td align="left">将栈顶两 double 型数值相加并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x64</td>
<td align="left">isub</td>
<td align="left">将栈顶两 int 型数值相减并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x65</td>
<td align="left">lsub</td>
<td align="left">将栈顶两 long 型数值相减并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x66</td>
<td align="left">fsub</td>
<td align="left">将栈顶两 float 型数值相减并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x67</td>
<td align="left">dsub</td>
<td align="left">将栈顶两 double 型数值相减并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x68</td>
<td align="left">imul</td>
<td align="left">将栈顶两 int 型数值相乘并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x69</td>
<td align="left">lmul</td>
<td align="left">将栈顶两 long 型数值相乘并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x6a</td>
<td align="left">fmul</td>
<td align="left">将栈顶两 float 型数值相乘并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x6b</td>
<td align="left">dmul</td>
<td align="left">将栈顶两 double 型数值相乘并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x6c</td>
<td align="left">idiv</td>
<td align="left">将栈顶两 int 型数值相除并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x6d</td>
<td align="left">ldiv</td>
<td align="left">将栈顶两 long 型数值相除并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x6e</td>
<td align="left">fdiv</td>
<td align="left">将栈顶两 float 型数值相除并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x6f</td>
<td align="left">ddiv</td>
<td align="left">将栈顶两 double 型数值相除并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x70</td>
<td align="left">irem</td>
<td align="left">将栈顶两 int 型数值作取模运算并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x71</td>
<td align="left">lrem</td>
<td align="left">将栈顶两 long 型数值作取模运算并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x72</td>
<td align="left">frem</td>
<td align="left">将栈顶两 float 型数值作取模运算并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x73</td>
<td align="left">drem</td>
<td align="left">将栈顶两 double 型数值作取模运算并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x74</td>
<td align="left">ineg</td>
<td align="left">将栈顶两 int 型数值取负并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x75</td>
<td align="left">lneg</td>
<td align="left">将栈顶两 long 型数值取负并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x76</td>
<td align="left">fneg</td>
<td align="left">将栈顶两 float 型数值取负并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x77</td>
<td align="left">dneg</td>
<td align="left">将栈顶两 double 型数值取负并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x78</td>
<td align="left">ishl</td>
<td align="left">将 int 型数值左移指定位数并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x79</td>
<td align="left">lshl</td>
<td align="left">将 long 型数值左移指定位数并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x7a</td>
<td align="left">ishr</td>
<td align="left">将 int 型数值右（带符号）移指定位数并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x7b</td>
<td align="left">lshr</td>
<td align="left">将 long 型数值右（带符号）移指定位数并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x7c</td>
<td align="left">iushr</td>
<td align="left">将 int 型数值右（无符号）移指定位数并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x7d</td>
<td align="left">lushr</td>
<td align="left">将 long 型数值右（无符号）移指定位数并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x7e</td>
<td align="left">iand</td>
<td align="left">将栈顶两 int 型数值作“按位与”并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x7f</td>
<td align="left">land</td>
<td align="left">将栈顶两 long 型数值作“按位与”并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x80</td>
<td align="left">ior</td>
<td align="left">将栈顶两 int 型数值作“按位或”并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x81</td>
<td align="left">lor</td>
<td align="left">将栈顶两 long 型数值作“按位或”并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x82</td>
<td align="left">ixor</td>
<td align="left">将栈顶两 int 型数值作“按位异或”并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x83</td>
<td align="left">lxor</td>
<td align="left">将栈顶两 long 型数值作“按位异或”并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x84</td>
<td align="left">iinc M N</td>
<td align="left">（M 为非负整数，N 为整数）将局部变量数组的第 M 个单元中的 int 值增加 N，常用于 for 循环中自增量的更新</td>
</tr>
<tr>
<td align="left">0x85</td>
<td align="left">i2l</td>
<td align="left">将栈顶 int 型数值强制转换成 long 型数值，并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x86</td>
<td align="left">i2f</td>
<td align="left">将栈顶 int 型数值强制转换成 float 型数值，并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x87</td>
<td align="left">i2d</td>
<td align="left">将栈顶 int 型数值强制转换成 double 型数值，并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x88</td>
<td align="left">l2i</td>
<td align="left">将栈顶 long 型数值强制转换成 int 型数值，并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x89</td>
<td align="left">l2f</td>
<td align="left">将栈顶 long 型数值强制转换成 float 型数值，并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x8a</td>
<td align="left">l2d</td>
<td align="left">将栈顶 long 型数值强制转换成 double 型数值，并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x8b</td>
<td align="left">f2i</td>
<td align="left">将栈顶 float 型数值强制转换成 int 型数值，并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x8c</td>
<td align="left">f2l</td>
<td align="left">将栈顶 float 型数值强制转换成 long 型数值，并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x8d</td>
<td align="left">f2d</td>
<td align="left">将栈顶 float 型数值强制转换成 double 型数值，并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x8e</td>
<td align="left">d2i</td>
<td align="left">将栈顶 double 型数值强制转换成 int 型数值，并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x8f</td>
<td align="left">d2l</td>
<td align="left">将栈顶 double 型数值强制转换成 long 型数值，并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x90</td>
<td align="left">d2f</td>
<td align="left">将栈顶 double 型数值强制转换成 float 型数值，并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x91</td>
<td align="left">i2b</td>
<td align="left">将栈顶 int 型数值强制转换成 byte 型数值，并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x92</td>
<td align="left">i2c</td>
<td align="left">将栈顶 int 型数值强制转换成 char 型数值，并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x93</td>
<td align="left">i2s</td>
<td align="left">将栈顶 int 型数值强制转换成 short 型数值，并将结果压入栈顶</td>
</tr>
<tr>
<td align="left">0x94</td>
<td align="left">lcmp</td>
<td align="left">比较栈顶两 long 型数值的大小，并将结果（1、0 或 -1）压入栈顶</td>
</tr>
<tr>
<td align="left">0x95</td>
<td align="left">fcmpl</td>
<td align="left">比较栈顶两 float 型数值的大小，并将结果（1、0 或 -1）压入栈顶 ；当其中一个数值为 “NaN” 时，将 -1 压入栈顶</td>
</tr>
<tr>
<td align="left">0x96</td>
<td align="left">fcmpg</td>
<td align="left">比较栈顶两 float 型数值的大小，并将结果（1、0 或 -1）压入栈顶 ；当其中一个数值为 “NaN” 时，将 1 压入栈顶</td>
</tr>
<tr>
<td align="left">0x97</td>
<td align="left">dcmpl</td>
<td align="left">比较栈顶两 double 型数值的大小，并将结果（1、0 或 -1）压入栈顶 ；当其中一个数值为 “NaN” 时，将 -1 压入栈顶</td>
</tr>
<tr>
<td align="left">0x98</td>
<td align="left">dcmpg</td>
<td align="left">比较栈顶两 double 型数值的大小，并将结果（1、0 或 -1）压入栈顶 ；当其中一个数值为 “NaN” 时，将 1 压入栈顶</td>
</tr>
<tr>
<td align="left">0x99</td>
<td align="left">ifeq</td>
<td align="left">当栈顶 int 型数值等于 0 时跳转</td>
</tr>
<tr>
<td align="left">0x9a</td>
<td align="left">ifne</td>
<td align="left">当栈顶 int 型数值不等于 0 时跳转</td>
</tr>
<tr>
<td align="left">0x9b</td>
<td align="left">iflt</td>
<td align="left">当栈顶 int 型数值小于 0 时跳转</td>
</tr>
<tr>
<td align="left">0x9c</td>
<td align="left">ifge</td>
<td align="left">当栈顶 int 型数值大于或等于 0 时跳转</td>
</tr>
<tr>
<td align="left">0x9d</td>
<td align="left">ifgt</td>
<td align="left">当栈顶 int 型数值大于 0 时跳转</td>
</tr>
<tr>
<td align="left">0x9e</td>
<td align="left">ifle</td>
<td align="left">当栈顶 int 型数值小于或等于 0 时跳转</td>
</tr>
<tr>
<td align="left">0x9f</td>
<td align="left">if_icmpeq</td>
<td align="left">比较栈顶两 int 型数值的大小，当结果等于 0 时跳转</td>
</tr>
<tr>
<td align="left">0xa0</td>
<td align="left">if_icmpne</td>
<td align="left">比较栈顶两 int 型数值的大小，当结果不等于 0 时跳转</td>
</tr>
<tr>
<td align="left">0xa1</td>
<td align="left">if_icmplt</td>
<td align="left">比较栈顶两 int 型数值的大小，当结果小于 0 时跳转</td>
</tr>
<tr>
<td align="left">0xa2</td>
<td align="left">if_icmpge</td>
<td align="left">比较栈顶两 int 型数值的大小，当结果大于或等于 0 时跳转</td>
</tr>
<tr>
<td align="left">0xa3</td>
<td align="left">if_icmpgt</td>
<td align="left">比较栈顶两 int 型数值的大小，当结果大于 0 时跳转</td>
</tr>
<tr>
<td align="left">0xa4</td>
<td align="left">if_icmple</td>
<td align="left">比较栈顶两 int 型数值的大小，当结果小于或等于 0 时跳转</td>
</tr>
<tr>
<td align="left">0xa5</td>
<td align="left">if_acmpeq</td>
<td align="left">比较栈顶两 引用 型数值，当结果相等时跳转</td>
</tr>
<tr>
<td align="left">0xa6</td>
<td align="left">if_acmpne</td>
<td align="left">比较栈顶两 引用 型数值，当结果不相等时跳转</td>
</tr>
<tr>
<td align="left">0xa7</td>
<td align="left">goto</td>
<td align="left">无条件跳转</td>
</tr>
<tr>
<td align="left">0xa8</td>
<td align="left">jsr</td>
<td align="left">跳转至指定的 16 位 offset 位置，并将 jsr 的下一条指令地址压入栈顶</td>
</tr>
<tr>
<td align="left">0xa9</td>
<td align="left">ret</td>
<td align="left">返回至局部变量指定的 index 的指令位置（一般与 jsr 或 jsr_w 联合使用）</td>
</tr>
<tr>
<td align="left">0xaa</td>
<td align="left">tableswitch</td>
<td align="left">用于 switch 条件跳转，case 值连续（可变长度指令）</td>
</tr>
<tr>
<td align="left">0xab</td>
<td align="left">lookupswitch</td>
<td align="left">用于 switch 条件跳转，case 值不连续（可变长度指令）</td>
</tr>
<tr>
<td align="left">0xac</td>
<td align="left">ireturn</td>
<td align="left">从当前方法返回 int</td>
</tr>
<tr>
<td align="left">0xad</td>
<td align="left">lreturn</td>
<td align="left">从当前方法返回 long</td>
</tr>
<tr>
<td align="left">0xae</td>
<td align="left">freturn</td>
<td align="left">从当前方法返回 float</td>
</tr>
<tr>
<td align="left">0xaf</td>
<td align="left">dreturn</td>
<td align="left">从当前方法返回 double</td>
</tr>
<tr>
<td align="left">0xb0</td>
<td align="left">areturn</td>
<td align="left">从当前方法返回对象引用</td>
</tr>
<tr>
<td align="left">0xb1</td>
<td align="left">return</td>
<td align="left">从当前方法返回 void</td>
</tr>
<tr>
<td align="left">0xb2</td>
<td align="left">getstatic</td>
<td align="left">获取指定类的静态字段，并将其压入栈顶</td>
</tr>
<tr>
<td align="left">0xb3</td>
<td align="left">putstatic</td>
<td align="left">为指定类的静态字段赋值</td>
</tr>
<tr>
<td align="left">0xb4</td>
<td align="left">getfield</td>
<td align="left">获取指定类的实例字段，并将其压入栈顶</td>
</tr>
<tr>
<td align="left">0xb5</td>
<td align="left">putfield</td>
<td align="left">为指定类的实例字段赋值</td>
</tr>
<tr>
<td align="left">0xb6</td>
<td align="left">invokevirtual</td>
<td align="left">调用实例方法</td>
</tr>
<tr>
<td align="left">0xb7</td>
<td align="left">invokespecial</td>
<td align="left">调用超类构造方法，实例初始化方法，私有方法</td>
</tr>
<tr>
<td align="left">0xb8</td>
<td align="left">invokestatic</td>
<td align="left">调用静态方法</td>
</tr>
<tr>
<td align="left">0xb9</td>
<td align="left">invokeinterface</td>
<td align="left">调用接口方法</td>
</tr>
<tr>
<td align="left">0xba</td>
<td align="left">–</td>
<td align="left">无此指令</td>
</tr>
<tr>
<td align="left">0xbb</td>
<td align="left">new</td>
<td align="left">创建一个对象，并将其引用值压入栈顶</td>
</tr>
<tr>
<td align="left">0xbc</td>
<td align="left">newarray</td>
<td align="left">创建一个指定的原始类型（如 int、float、char 等）的数组，并将其引用值压入栈顶</td>
</tr>
<tr>
<td align="left">0xbd</td>
<td align="left">anewarray</td>
<td align="left">创建一个引用型（如类、接口、数组 等）的数组，并将其引用值压入栈顶</td>
</tr>
<tr>
<td align="left">0xbe</td>
<td align="left">arraylength</td>
<td align="left">获得数组的长度值并将其压入栈顶</td>
</tr>
<tr>
<td align="left">0xbf</td>
<td align="left">athrow</td>
<td align="left">将栈顶的异常抛出</td>
</tr>
<tr>
<td align="left">0xc0</td>
<td align="left">checkcast</td>
<td align="left">校验类型转换，校验未通过将抛出 ClassCastException</td>
</tr>
<tr>
<td align="left">0xc1</td>
<td align="left">instanceof</td>
<td align="left">校验对象是否是指定的类的实例，如果是则将 1 压入栈顶，否则将 0 压入栈顶</td>
</tr>
<tr>
<td align="left">0xc2</td>
<td align="left">monitorenter</td>
<td align="left">获得对象的锁，用于同步方法或同步块</td>
</tr>
<tr>
<td align="left">0xc3</td>
<td align="left">monitorexit</td>
<td align="left">释放对象的锁，用于同步方法或同步块</td>
</tr>
<tr>
<td align="left">0xc4</td>
<td align="left">wide</td>
<td align="left">扩展局部变量的宽度</td>
</tr>
<tr>
<td align="left">0xc5</td>
<td align="left">multianewarray</td>
<td align="left">创建指定类型和指定维度的多维数组（执行该指定时，操作数栈中必须包含各维度的长度），并将其引用值压入栈顶</td>
</tr>
<tr>
<td align="left">0xc6</td>
<td align="left">ifnull</td>
<td align="left">为 null 时跳转</td>
</tr>
<tr>
<td align="left">0xc7</td>
<td align="left">ifnonnull</td>
<td align="left">不为 null 时跳转</td>
</tr>
<tr>
<td align="left">0xc8</td>
<td align="left">goto_w</td>
<td align="left">无条件跳转（宽索引）</td>
</tr>
<tr>
<td align="left">0xc9</td>
<td align="left">jsr_w</td>
<td align="left">跳转至指定的 32 位 offset 位置，并将 jsr_w 的下一条指令地址压入栈顶</td>
</tr>
</tbody></table>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings">参考1</a></p>
<p><a href="https://cloud.tencent.com/developer/column/82294/tag-10688">参考2</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1543234">参考3</a></p>
<p><a href="https://blog.csdn.net/m0_58350991/article/details/117306764">字节码学习</a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
</search>
