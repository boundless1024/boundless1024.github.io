<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>apk代码混淆备注</title>
    <url>/2021/04/04/Apk%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="Apk代码混淆"><a href="#Apk代码混淆" class="headerlink" title="Apk代码混淆"></a>Apk代码混淆</h4><ul>
<li><p>增加反编译后代码阅读成本</p>
</li>
<li><p>代码压缩</p>
</li>
<li><p>代码优化</p>
<p><code>依赖 -&gt; main -&gt; 渠道 -&gt; 构建类型</code>  - 合并资源时顺序</p>
</li>
</ul>
<h4 id="开启混淆"><a href="#开启混淆" class="headerlink" title="开启混淆"></a>开启混淆</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在module项目中的build.gradle文件中配置minifyEnabled为true，混淆规则内容一般写在proguard-rules.pro</span><br><span class="line">一般proguard-rules.pro文件和build.gradle文件在同一目录</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/04/07/2Ulb7yq41I9NmE5.png" alt="iShot2021-04-07上午11.44.39.png"></p>
<h4 id="混淆参数说明"><a href="#混淆参数说明" class="headerlink" title="混淆参数说明"></a>混淆参数说明</h4><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-optimizationpasses</td>
<td align="center">代码混淆的压缩比例</td>
<td>值介于0-7</td>
</tr>
<tr>
<td align="center">-dontusemixedcaseclassnames</td>
<td align="center">混淆后类型都为小写</td>
<td></td>
</tr>
<tr>
<td align="center">-dontskipnonpubliclibraryclasses</td>
<td align="center">不去忽略非公共的库类</td>
<td></td>
</tr>
<tr>
<td align="center">-dontoptimize</td>
<td align="center">不优化输入的类文件</td>
<td></td>
</tr>
<tr>
<td align="center">-dontpreverify</td>
<td align="center">不做预校验的操作</td>
<td></td>
</tr>
<tr>
<td align="center">-ignorewarnings</td>
<td align="center">忽略警告</td>
<td></td>
</tr>
<tr>
<td align="center">-verbose</td>
<td align="center">混淆时是否记录日志</td>
<td></td>
</tr>
<tr>
<td align="center">-keepattributes <em>Annotation</em></td>
<td align="center">保护注解</td>
<td></td>
</tr>
<tr>
<td align="center">-printmapping proguardMapping.txt</td>
<td align="center">生成原类名和混淆后的类名的映射文件</td>
<td></td>
</tr>
<tr>
<td align="center">-optimizations !code/simplification/cast,!field/,!class/merging/</td>
<td align="center">指定混淆是采用的算法</td>
<td></td>
</tr>
</tbody></table>
<h4 id="keep说明"><a href="#keep说明" class="headerlink" title="keep说明"></a>keep说明</h4><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>-keep</td>
<td>防止类和成员被移除或者被重命名</td>
<td></td>
</tr>
<tr>
<td>-keepnames</td>
<td>防止类和成员被重命名</td>
<td></td>
</tr>
<tr>
<td>-keepclassmembers</td>
<td>防止成员被移除或者被重命名</td>
<td></td>
</tr>
<tr>
<td>-keepclassmembernames</td>
<td>防止成员被重命名</td>
<td></td>
</tr>
<tr>
<td>-keepclasseswithmembers</td>
<td>防止拥有该成员的类和成员被移除或者被重命名</td>
<td></td>
</tr>
<tr>
<td>-keepclasseswithmembernames</td>
<td>防止拥有该成员的类和成员被重命名</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">keep 类修饰符 class 类名称 限定符 类&#123;&#125;</span><br><span class="line">-keep public class * extends androidx.**</span><br></pre></td></tr></table></figure>
<ul>
<li>类修饰符：<code>public</code>、<code>protected</code>、<code>private</code></li>
<li><code>*</code> 匹配任意长度字符，但不含包名分隔符(.) </li>
<li><code>**</code> 匹配任意长度字符，并且包含包名分隔符(.) </li>
<li><code>extends</code> 可以指定类的基类 </li>
<li><code>implement</code> 匹配实现了某接口的类 </li>
<li><code>$</code> 内部类</li>
</ul>
<h4 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h4><p><code>-keep class com.xx.xx.**</code> 、<code>-keep class com.xx.xx.*</code></p>
<ul>
<li><code>**</code> 表示本包和所含子包下的类名都保持</li>
<li><code>*</code> 表示只是保持该包下的类名</li>
</ul>
<p><code>-keep class com.example.bean.** &#123; *; &#125;</code></p>
<ul>
<li>表示本包和所含子包下的类名都保持，方法名和变量名也都保持</li>
</ul>
<p><code>-keep public class com.xx.Test &#123; *; &#125;</code> 不混淆com.xx.Test类<br><code>-keep class com.xx.** &#123;*;&#125;</code> 不混淆com.xx包下所有类<br><code>-keep public class * extends com.xx.Test &#123; *; &#125;</code>  不混淆某个类的子类<br><code>-keep public class **.*model*.** &#123; *; &#125; </code> 不混淆所有类名中包含了“model”的类及其成员</p>
<p><code>-kepp class * implements com.xx.TestInterface &#123; *; &#125;</code> 不混淆TestInterface接口的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-keepclassmembers <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">xx</span>.<span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> ();</span><br><span class="line">&#125;</span><br><span class="line">不混淆Test的构造方法</span><br></pre></td></tr></table></figure>
<p><code>-keepclassmembers class com.xx.Test &#123; public void test( java.lang.String )&#125;</code> 不混淆Test的特定的test方法</p>
<p><code>-keep class com.xx.Test$* &#123; *; &#125;</code> 不混淆Test类的内部类</p>
<h4 id="资源保持规则"><a href="#资源保持规则" class="headerlink" title="资源保持规则"></a>资源保持规则</h4><p><code>shrinkResources true</code> 未被使用的资源默认被移除</p>
<p>在 <code>res/raw/</code> 路径下创建一个 xml 文件，例如 <code>keep.xml</code></p>
<ul>
<li><code>tools:keep</code> 定义哪些资源需要被保留（资源之间用“,”隔开） </li>
<li><code>tools:discard</code> 定义哪些资源需要被移除（资源之间用“,”隔开） </li>
<li><code>tools:shrinkMode</code> 开启严格模式</li>
</ul>
<h4 id="模板代码"><a href="#模板代码" class="headerlink" title="模板代码"></a>模板代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#############################################</span><br><span class="line">#</span><br><span class="line"># 对于一些基本指令的添加</span><br><span class="line">#</span><br><span class="line">#############################################</span><br><span class="line"># 代码混淆压缩比，在0~7之间，默认为5，一般不做修改</span><br><span class="line">-optimizationpasses <span class="number">5</span></span><br><span class="line"></span><br><span class="line"># 混合时不使用大小写混合，混合后的类名为小写</span><br><span class="line">-dontusemixedcaseclassnames</span><br><span class="line"></span><br><span class="line"># 指定不去忽略非公共库的类</span><br><span class="line">-dontskipnonpubliclibraryclasses</span><br><span class="line"></span><br><span class="line"># 这句话能够使我们的项目混淆后产生映射文件</span><br><span class="line"># 包含有类名-&gt;混淆后类名的映射关系</span><br><span class="line">-verbose</span><br><span class="line"></span><br><span class="line"># 指定不去忽略非公共库的类成员</span><br><span class="line">-dontskipnonpubliclibraryclassmembers</span><br><span class="line"></span><br><span class="line"># 不做预校验，preverify是proguard的四个步骤之一，Android不需要preverify，去掉这一步能够加快混淆速度。</span><br><span class="line">-dontpreverify</span><br><span class="line"></span><br><span class="line"># 保留Annotation不混淆</span><br><span class="line">-keepattributes *Annotation*,InnerClasses</span><br><span class="line"></span><br><span class="line"># 避免混淆泛型</span><br><span class="line">-keepattributes Signature</span><br><span class="line"></span><br><span class="line"># 抛出异常时保留代码行号</span><br><span class="line">-keepattributes SourceFile,LineNumberTable</span><br><span class="line"></span><br><span class="line"># 指定混淆是采用的算法，后面的参数是一个过滤器</span><br><span class="line"># 这个过滤器是谷歌推荐的算法，一般不做更改</span><br><span class="line">-optimizations !code/simplification/cast,!field<span class="comment">/*,!class/merging/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#############################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Android开发中一些需要保留的公共部分</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#############################################</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 保留我们使用的四大组件，自定义的Application等等这些类不被混淆</span></span><br><span class="line"><span class="comment"># 因为这些子类都有可能被外部调用</span></span><br><span class="line"><span class="comment">-keep public class * extends android.app.Activity</span></span><br><span class="line"><span class="comment">-keep public class * extends android.app.Appliction</span></span><br><span class="line"><span class="comment">-keep public class * extends android.app.Service</span></span><br><span class="line"><span class="comment">-keep public class * extends android.content.BroadcastReceiver</span></span><br><span class="line"><span class="comment">-keep public class * extends android.content.ContentProvider</span></span><br><span class="line"><span class="comment">-keep public class * extends android.app.backup.BackupAgentHelper</span></span><br><span class="line"><span class="comment">-keep public class * extends android.preference.Preference</span></span><br><span class="line"><span class="comment">-keep public class * extends android.view.View</span></span><br><span class="line"><span class="comment">-keep public class com.android.vending.licensing.ILicensingService</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 保留support下的所有类及其内部类</span></span><br><span class="line"><span class="comment">-keep class android.support.** &#123;*;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 保留继承的</span></span><br><span class="line"><span class="comment">-keep public class * extends android.support.v4.**</span></span><br><span class="line"><span class="comment">-keep public class * extends android.support.v7.**</span></span><br><span class="line"><span class="comment">-keep public class * extends android.support.annotation.**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 保留R下面的资源</span></span><br><span class="line"><span class="comment">-keep class **.R$* &#123;*;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 保留本地native方法不被混淆</span></span><br><span class="line"><span class="comment">-keepclasseswithmembernames class * &#123;</span></span><br><span class="line"><span class="comment">    native &lt;methods&gt;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 保留在Activity中的方法参数是view的方法，</span></span><br><span class="line"><span class="comment"># 这样以来我们在layout中写的onClick就不会被影响</span></span><br><span class="line"><span class="comment">-keepclassmembers class * extends android.app.Activity&#123;</span></span><br><span class="line"><span class="comment">    public void *(android.view.View);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 保留枚举类不被混淆</span></span><br><span class="line"><span class="comment">-keepclassmembers enum * &#123;</span></span><br><span class="line"><span class="comment">    public static **[] values();</span></span><br><span class="line"><span class="comment">    public static ** valueOf(java.lang.String);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 保留我们自定义控件（继承自View）不被混淆</span></span><br><span class="line"><span class="comment">-keep public class * extends android.view.View&#123;</span></span><br><span class="line"><span class="comment">    *** get*();</span></span><br><span class="line"><span class="comment">    void set*(***);</span></span><br><span class="line"><span class="comment">    public &lt;init&gt;(android.content.Context);</span></span><br><span class="line"><span class="comment">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);</span></span><br><span class="line"><span class="comment">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 保留Parcelable序列化类不被混淆</span></span><br><span class="line"><span class="comment">-keep class * implements android.os.Parcelable &#123;</span></span><br><span class="line"><span class="comment">    public static final android.os.Parcelable$Creator *;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 保留Serializable序列化的类不被混淆</span></span><br><span class="line"><span class="comment">-keepclassmembers class * implements java.io.Serializable &#123;</span></span><br><span class="line"><span class="comment">    static final long serialVersionUID;</span></span><br><span class="line"><span class="comment">    private static final java.io.ObjectStreamField[] serialPersistentFields;</span></span><br><span class="line"><span class="comment">    !static !transient &lt;fields&gt;;</span></span><br><span class="line"><span class="comment">    !private &lt;fields&gt;;</span></span><br><span class="line"><span class="comment">    !private &lt;methods&gt;;</span></span><br><span class="line"><span class="comment">    private void writeObject(java.io.ObjectOutputStream);</span></span><br><span class="line"><span class="comment">    private void readObject(java.io.ObjectInputStream);</span></span><br><span class="line"><span class="comment">    java.lang.Object writeReplace();</span></span><br><span class="line"><span class="comment">    java.lang.Object readResolve();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 对于带有回调函数的onXXEvent、**On*Listener的，不能被混淆</span></span><br><span class="line"><span class="comment">-keepclassmembers class * &#123;</span></span><br><span class="line"><span class="comment">    void *(**On*Event);</span></span><br><span class="line"><span class="comment">    void *(**On*Listener);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># webView处理，项目中没有使用到webView忽略即可</span></span><br><span class="line"><span class="comment">-keepclassmembers class fqcn.of.javascript.interface.for.webview &#123;</span></span><br><span class="line"><span class="comment">    public *;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">-keepclassmembers class * extends android.webkit.webViewClient &#123;</span></span><br><span class="line"><span class="comment">    public void *(android.webkit.WebView, java.lang.String, android.graphics.Bitmap);</span></span><br><span class="line"><span class="comment">    public boolean *(android.webkit.WebView, java.lang.String);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">-keepclassmembers class * extends android.webkit.webViewClient &#123;</span></span><br><span class="line"><span class="comment">    public void *(android.webkit.webView, jav.lang.String);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://www.huaweicloud.com/articles/ae151e2f60923097cefc473bd131addf.html">参考</a></p>
<p><a href="https://www.guardsquare.com/en/products/proguard">proguard官网</a></p>
<p><a href="https://blog.si-yee.com/2019/04/12/Android%E6%B7%B7%E6%B7%86-Proguard-%E8%AF%A6%E8%A7%A3/">参考2</a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>adb命令相关记录</title>
    <url>/2020/01/01/adb%E5%91%BD%E4%BB%A4%E7%9B%B8%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h5 id="设备相关"><a href="#设备相关" class="headerlink" title="设备相关"></a>设备相关</h5><ul>
<li>adb devices          <code>显示连接到计算机的设备</code></li>
<li>adb  [-s] shell        <code>进入设备的shell界面</code></li>
<li>adb kill-server       <code>终止adb服务进程</code></li>
<li>adb start-server     <code>重启adb服务进程</code></li>
<li>adb connect ip       <code>连接到指定的ip,配合无线调试</code></li>
</ul>
<h5 id="应用管理"><a href="#应用管理" class="headerlink" title="应用管理"></a>应用管理</h5><ul>
<li>adb  shell pm    <code>和包相关的操作</code></li>
<li>adb shell pm path 包名         <code>打印出给定包名对应应用的apk路径</code><pre><code>- adb shell pm list packages    ```列出包相关的信息，参考[-f] [-d] [-e] [-s] [-3] [-i] [-l] [-u] [-U]……```
- adb shell pm list permissions     ```列出权限相关的```
- adb install apk文件       ```安装apk```
- adb uninstall 包名        ```卸载apk```
- adb shell pm start 包名/启动activity       ```启动apk```
- adb shell pm clear 包名      ```清除apk数据```
</code></pre>
</li>
</ul>
<h5 id="内存、进程相关"><a href="#内存、进程相关" class="headerlink" title="内存、进程相关"></a>内存、进程相关</h5><ul>
<li>adb  shell dumpsys cupinfo     <code>查看CPU信息</code></li>
<li>adb shell dumpsys meminfo  [包名]   <code>查看应用的内存信息</code></li>
<li>adb shell top          <code>查看设备cpu和内存占用情况</code></li>
<li>adb shell top -m 2       <code>查看占用内存前2的app</code></li>
<li>adb shell ps | grep[findStr] 关键字         <code>查看某一程序进程</code></li>
<li>adb shell ps -x [PID]        <code>查看指定进程状态</code></li>
<li>adb shell kill [PID]        <code>杀死进程</code></li>
<li>adb shell top -n 1       <code>刷新一次内存信息，然后返回</code></li>
<li>adb shell cat /proc/meminfo     <code>查看当前内存占用</code></li>
</ul>
<h5 id="Android四大组件"><a href="#Android四大组件" class="headerlink" title="Android四大组件"></a>Android四大组件</h5><p>![image-20201022173705225](/Users/libo/Library/Application Support/typora-user-images/image-20201022173705225.png)</p>
<ul>
<li>adb shell dumpsys activity top      <code>查看栈顶Activity</code></li>
<li>adb shell dumpsys activity activities | grep mResumedActivity   <code>查看当前正在显示的activity</code></li>
<li>adb shell am      <code>和activity相关 start、force-stop 包名、kill-all、kill 包名</code></li>
<li>adb shell service list     <code>查看后台services信息</code></li>
<li>adb shell dumpsys notification      <code>获取通知信息</code></li>
</ul>
<h5 id="文件相关"><a href="#文件相关" class="headerlink" title="文件相关"></a>文件相关</h5><ul>
<li>adb shell cd  <code>进入某个目录</code></li>
<li>adb shell ls -a   <code>查看这个目录下的文件</code></li>
<li>adb pull 远程路径(手机) 本地路径(电脑) <code>手机复制文件出来</code></li>
<li>adb push 本地路径(电脑)  远程路径(手机)  <code>向手机发送文件</code></li>
<li>adb shell makedir   <code>创建一个文件夹</code></li>
<li>adb shell cat      ````查看文件内容```</li>
</ul>
<h5 id="屏幕截图"><a href="#屏幕截图" class="headerlink" title="屏幕截图"></a>屏幕截图</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell screencap -p &#x2F;sdcard&#x2F;sc.png</span><br></pre></td></tr></table></figure>
<h5 id="视频录制"><a href="#视频录制" class="headerlink" title="视频录制"></a>视频录制</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell screenrecord &#x2F;sdcard&#x2F;filename.mp4</span><br></pre></td></tr></table></figure>
<h5 id="获取手机中的apk"><a href="#获取手机中的apk" class="headerlink" title="获取手机中的apk"></a>获取手机中的apk</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys activity activities | grep mResumedActivity   --获取包名</span><br><span class="line">adb shell pm path com.aoyindsptv.phonelive --获取安装包地址</span><br><span class="line">adb pull 安装包地址  电脑地址</span><br></pre></td></tr></table></figure>
<h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys activity activities | grep mResumedActivity --查看包名和Activity</span><br><span class="line">adb shell dumpsys window | grep mCurrentFocus --同上</span><br></pre></td></tr></table></figure>


<p><a href="https://www.jianshu.com/p/0693b841c83b">参考</a></p>
<p><a href="https://weiwangqiang.github.io/2020/03/16/dumpsys-debug-detail/">参考2</a></p>
<div class="gallery-group-main">

  <figure class="gallery-group">
  <img class="gallery-group-img" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">壁紙</div>
  <p>收藏的一些壁紙</p>
  <a href='/Gallery/wallpaper'></a>
  </figcaption>
  </figure>
  

  <figure class="gallery-group">
  <img class="gallery-group-img" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">漫威</div>
  <p>關於漫威的圖片</p>
  <a href='/Gallery/marvel'></a>
  </figcaption>
  </figure>
  

  <figure class="gallery-group">
  <img class="gallery-group-img" src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg' alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">OH MY GIRL</div>
  <p>關於OH MY GIRL的圖片</p>
  <a href='/Gallery/ohmygirl'></a>
  </figcaption>
  </figure>
  
</div>

]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title>android library上传</title>
    <url>/2021/01/01/android-library%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h5 id="Android-Library上传"><a href="#Android-Library上传" class="headerlink" title="Android Library上传"></a>Android Library上传</h5><ol>
<li>登录注册账号  <a href="https://bintray.com/login?forwardedFrom=/">地址</a><img src="https://i.loli.net/2021/02/22/GDEqge4TCznH3Rb.png" alt="image-20201027185936082.png"></li>
<li>创建仓库  <img src="https://i.loli.net/2021/02/22/ig6aCvcEZ8M73WN.png" alt="image-20201027190240356.png"></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">说明：这里也可以不创建maven仓库， 那么在后续的库上传时需要指定仓库，repoName</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><p>创建自己的library库<img src="https://i.loli.net/2021/02/22/SVP1HCnsie5tE4w.png" alt="image-20201027190709179.png"><img src="https://i.loli.net/2021/02/22/j5LkmT4nKeCNytu.png" alt="image-20201027190546331.png"></p>
</li>
<li><p>获取上传时用到的apikey<img src="https://i.loli.net/2021/02/22/IbhcKMPYVkTeyol.png" alt="image-20201027190851669.png"></p>
</li>
<li><p>上传代码到library<img src="https://i.loli.net/2021/02/22/pTzOrf7xc31hGDZ.png" alt="image-20201027191204862.png"></p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;gradlew clean build bintrayUpload -PbintrayUser&#x3D;boundless1024 -PbintrayKey&#x3D;d59a0923f6a03320d40be3b8e36e407ec1fc7b4d -PdryRun&#x3D;false</span><br></pre></td></tr></table></figure>
<ol start="6">
<li><p> 使用library<img src="https://i.loli.net/2021/02/22/YLCpOvhSxca9flX.png" alt="image-20201027191733290.png"><img src="https://i.loli.net/2021/02/22/VsMvBKOopSZRx7q.png" alt="image-20201027191815006.png"></p>
</li>
<li><p>同步到jcenter<img src="https://i.loli.net/2021/02/22/KveaF5bEgAqfhTn.png" alt="image-20201027192049858.png"></p>
</li>
</ol>
<p>参考</p>
<ol>
<li><p><a href="https://bintray.com/">参考1</a></p>
</li>
<li><p><a href="https://github.com/ddnosh/ARabbit/blob/master/sdk/build.gradle">参考2</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/677601f192e5">参考3</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>library</tag>
      </tags>
  </entry>
  <entry>
    <title>Android跳转到Setting界面Action</title>
    <url>/2021/03/14/android-%E8%B7%B3%E8%BD%AC-settings%E7%95%8C%E9%9D%A2-intent/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">跳转到Android系统界面的action收集。</span><br></pre></td></tr></table></figure>


<h3 id="Action列表"><a href="#Action列表" class="headerlink" title="Action列表"></a>Action列表</h3><table>
<thead>
<tr>
<th>action</th>
<th>界面</th>
</tr>
</thead>
<tbody><tr>
<td>ACTION_SETTINGS</td>
<td>系统设置界面</td>
</tr>
<tr>
<td>ACTION_APN_SETTINGS</td>
<td>APN设置界面</td>
</tr>
<tr>
<td>ACTION_LOCATION_SOURCE_SETTINGS</td>
<td>定位设置界面</td>
</tr>
<tr>
<td>ACTION_AIRPLANE_MODE_SETTINGS</td>
<td>更多连接方式设置界面</td>
</tr>
<tr>
<td>ACTION_DATA_ROAMING_SETTINGS</td>
<td>双卡和移动网络设置界面</td>
</tr>
<tr>
<td>ACTION_ACCESSIBILITY_SETTINGS</td>
<td>无障碍设置界面/辅助功能界面</td>
</tr>
<tr>
<td>ACTION_SYNC_SETTINGS</td>
<td>同步设置界面</td>
</tr>
<tr>
<td>ACTION_ADD_ACCOUNT</td>
<td>添加账户界面</td>
</tr>
<tr>
<td>ACTION_NETWORK_OPERATOR_SETTINGS</td>
<td>选取运营商的界面</td>
</tr>
<tr>
<td>ACTION_SECURITY_SETTINGS</td>
<td>安全设置界面</td>
</tr>
<tr>
<td>ACTION_PRIVACY_SETTINGS</td>
<td>备份重置设置界面</td>
</tr>
<tr>
<td>ACTION_VPN_SETTINGS</td>
<td>VPN设置界面,可能不存在</td>
</tr>
<tr>
<td>ACTION_WIFI_SETTINGS</td>
<td>无线网设置界面</td>
</tr>
<tr>
<td>ACTION_WIFI_IP_SETTINGS</td>
<td>WIFI的IP设置</td>
</tr>
<tr>
<td>ACTION_BLUETOOTH_SETTINGS</td>
<td>蓝牙设置</td>
</tr>
<tr>
<td>ACTION_CAST_SETTINGS</td>
<td>投射设置</td>
</tr>
<tr>
<td>ACTION_DATE_SETTINGS</td>
<td>日期时间设置</td>
</tr>
<tr>
<td>ACTION_SOUND_SETTINGS</td>
<td>声音设置</td>
</tr>
<tr>
<td>ACTION_DISPLAY_SETTINGS</td>
<td>显示设置</td>
</tr>
<tr>
<td>ACTION_LOCALE_SETTINGS</td>
<td>语言设置</td>
</tr>
<tr>
<td>ACTION_VOICE_INPUT_SETTINGS</td>
<td>辅助应用和语音输入设置</td>
</tr>
<tr>
<td>ACTION_INPUT_METHOD_SETTINGS</td>
<td>语言和输入法设置</td>
</tr>
<tr>
<td>ACTION_USER_DICTIONARY_SETTINGS</td>
<td>个人字典设置界面</td>
</tr>
<tr>
<td>ACTION_INTERNAL_STORAGE_SETTINGS</td>
<td>存储空间设置的界面</td>
</tr>
<tr>
<td>ACTION_SEARCH_SETTINGS</td>
<td>搜索设置界面</td>
</tr>
<tr>
<td>ACTION_APPLICATION_DEVELOPMENT_SETTINGS</td>
<td>开发者选项</td>
</tr>
<tr>
<td>ACTION_DEVICE_INFO_SETTINGS</td>
<td>手机状态信息的界面</td>
</tr>
<tr>
<td>ACTION_DREAM_SETTINGS</td>
<td>互动屏保设置的界面</td>
</tr>
<tr>
<td>ACTION_NOTIFICATION_LISTENER_SETTINGS</td>
<td>通知使用权设置的界面</td>
</tr>
<tr>
<td>ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS</td>
<td>勿扰权限设置的界面</td>
</tr>
<tr>
<td>ACTION_CAPTIONING_SETTINGS</td>
<td>字幕设置的界面</td>
</tr>
<tr>
<td>ACTION_PRINT_SETTINGS</td>
<td>打印设置界面</td>
</tr>
<tr>
<td>ACTION_BATTERY_SAVER_SETTINGS</td>
<td>节电助手界面</td>
</tr>
<tr>
<td>ACTION_HOME_SETTINGS</td>
<td>主屏幕设置界面</td>
</tr>
<tr>
<td>ACTION_APPLICATION_DETAILS_SETTINGS</td>
<td>根据包名跳转到系统自带的应用程序信息</td>
</tr>
<tr>
<td>ACTION_APPLICATION_SETTINGS</td>
<td>应用程序列表</td>
</tr>
<tr>
<td>ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS</td>
<td>应用程序界面【所有的】</td>
</tr>
<tr>
<td>ACTION_MANAGE_APPLICATIONS_SETTINGS</td>
<td>应用程序列表界面【已安装的】</td>
</tr>
<tr>
<td>ACTION_INPUT_METHOD_SUBTYPE_SETTINGS</td>
<td>【API 11及以上】语言选择界面 【多国语言选择】</td>
</tr>
<tr>
<td>ACTION_NFCSHARING_SETTINGS</td>
<td>显示NFC共享设置【API 14及以上】</td>
</tr>
<tr>
<td>ACTION_NFC_SETTINGS</td>
<td>显示NFC设置【API 16及以上】</td>
</tr>
<tr>
<td>ACTION_QUICK_LAUNCH_SETTINGS</td>
<td>快速启动设置界面</td>
</tr>
</tbody></table>
<h3 id="样例代码"><a href="#样例代码" class="headerlink" title="样例代码"></a>样例代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);</span><br><span class="line">intent.setData(Uri.parse(requireActivity().getPackageName()));</span><br><span class="line">requireActivity().startActivity(intent);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>intent</tag>
      </tags>
  </entry>
  <entry>
    <title>android10创建文件失败</title>
    <url>/2021/01/11/android10-create-file/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">今天在练习通过xposed来改变app是否展示广告，遇到了【open failed: EACCES (Permission denied)】</span><br><span class="line">，已经提前申请好存储权限了，怎么还会报这个错？？,通过查看和学习了解到只有10及以上的系统才会有问题，</span><br><span class="line">做备注记录。</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/02/27/tQTKmborEf728gh.png" alt="iShot2021-02-27下午03.46.07.png"></p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p>在<code>AndroidManifest.xml</code>中 添加<code>requestLegacyExternalStorage=&quot;true&quot;</code> ,此时 <code>targetSdkVersion</code>版本不受约束。<br><img src="https://i.loli.net/2021/02/27/VpTFQ7G6icobMhI.png" alt="iShot2021-02-27下午03.55.30.png"></p>
<h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><p>在<code>build.gradle</code>中修改  <code>targetSdkVersion</code>在29以下<br><img src="https://i.loli.net/2021/02/27/kzdbB7rCFVK6YLX.png" alt="iShot2021-02-27下午03.59.08.png"></p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p><code>Android 10 不允许应用随意创建文件夹</code><br><code>Android 11 中的存储机制更新</code> </p>
<p><a href="https://blog.csdn.net/m0_37707561/article/details/105563569?utm_medium=distribute.pc_relevant_download.none-task-blog-baidujs-3.nonecase&depth_1-utm_source=distribute.pc_relevant_download.none-task-blog-baidujs-3.nonecase">参考1</a><br><a href="https://www.jianshu.com/p/0f1b18497ca1">参考2</a><br><a href="https://developer.android.com/training/data-storage/use-cases#if_your_app_targets">android10-停用分区存储</a><br><a href="https://developer.android.com/about/versions/11/privacy/storage?hl=zh-cn">Android11-中的存储机制更新</a> </p>
<p><img src="https://i.loli.net/2021/02/27/IHNS12T6jXblVzM.png" alt="iShot2021-02-27下午04.19.00.png"><br><img src="https://i.loli.net/2021/02/27/Dz3jJZ8OdQbsYwu.png" alt="iShot2021-02-27下午04.19.17.png"></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>frida安装</title>
    <url>/2021/01/02/frida-install/</url>
    <content><![CDATA[<h5 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mac系统自带python，但是版本比较低，可以自行安装新的版本。</span><br></pre></td></tr></table></figure>
<p><a href="https://www.python.org/getit/">python官网</a></p>
<p>下面的操作都在python3下操作</p>
<h5 id="安装frida"><a href="#安装frida" class="headerlink" title="安装frida"></a>安装frida</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install frida</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/02/22/bOXJuYajNCIGzxt.png" alt="image-20200729105621345.png"><br><img src="https://i.loli.net/2021/02/22/c2PzduwxK4GFlfM.png" alt="image-20200729105702901.png"></p>
<h5 id="安装frida-tools"><a href="#安装frida-tools" class="headerlink" title="安装frida-tools"></a>安装frida-tools</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install frida-tools</span><br></pre></td></tr></table></figure>
<h5 id="检测是否安装成功"><a href="#检测是否安装成功" class="headerlink" title="检测是否安装成功"></a>检测是否安装成功</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">frida-ps</span><br></pre></td></tr></table></figure>
<h5 id="下载frida-server"><a href="#下载frida-server" class="headerlink" title="下载frida-server"></a>下载frida-server</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Frida-server的版本必须跟你宿主机的Frida版本一致。</span><br></pre></td></tr></table></figure>
<p><a href="%5Bhttps://github.com/frida/frida/releases">下载地址</a></p>
<h5 id="推送frida-server到root过的手机"><a href="#推送frida-server到root过的手机" class="headerlink" title="推送frida-server到root过的手机"></a>推送frida-server到root过的手机</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载后解压文件，并将文件重命名为: frida-server，然后推送到手机</span><br><span class="line">adb push frida-server &#x2F;data&#x2F;local&#x2F;tmp&#x2F;</span><br></pre></td></tr></table></figure>
<h5 id="修改权限并运行frida-server"><a href="#修改权限并运行frida-server" class="headerlink" title="修改权限并运行frida-server"></a>修改权限并运行frida-server</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">cd &#x2F;data&#x2F;local&#x2F;tmp&#x2F;</span><br><span class="line">chmod 777 frida-server</span><br><span class="line">.&#x2F;frida-server</span><br></pre></td></tr></table></figure>


<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.jianshu.com/p/15a4bf14d0a5">参考1</a></p>
<p><a href="https://github.com/hluwa/FRIDA-DEXDump">参考2</a></p>
<p><a href="https://www.jianshu.com/p/5aa3f08736c5">参考3</a></p>
<p><a href="https://www.52pojie.cn/forum.php?mod=viewthread&tid=931872">frida hook java教程</a></p>
<p><a href="https://frida.re/docs/installation/">frida官网安装</a></p>
]]></content>
      <categories>
        <category>frida</category>
      </categories>
      <tags>
        <tag>frida</tag>
      </tags>
  </entry>
  <entry>
    <title>cross platform 个人认知</title>
    <url>/2021/01/02/cross-platform/</url>
    <content><![CDATA[<h2 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">目前流行的跨平台WebApp开发技术的特点,使用 HTML5 + CSS + JavaScript 开发、跨平台重用代码、丰富的</span><br><span class="line">UI库、提供访问设备原生API的 JavaScript API 包装器、提供打包、部署的工具或服务……，Cordova、Ionic、</span><br><span class="line">AppCan、DCloud、APICloud、React Native、Flutter</span><br></pre></td></tr></table></figure>


<h3 id="Cordova"><a href="#Cordova" class="headerlink" title="Cordova"></a>Cordova</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cordova是Apache软件基金会的一个产品。其前身是PhoneGap，由Nitobi开发，2011年10月，</span><br><span class="line">Adobe收购了Nitobi，并且PhoneGap项目也被贡献给Apache软件基金会。Apache在2012年12月，发布了Cordova。</span><br></pre></td></tr></table></figure>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>开源免费，发展早，社区生态成熟、资源多，插件丰富。</li>
<li>支持离线场景应用，开发工具选择空间大</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>在低端设备上，由于webview性能的原因，使用其他UI框架和JavaScript框架时，体验不好， 只提供基础访问设备的接口。</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://cordova.axuer.com/docs/zh-cn/latest/">中文文档</a> </p>
<h2 id="Ionic"><a href="#Ionic" class="headerlink" title="Ionic"></a>Ionic</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ionic是一个开源的移动应用程序开发框架，它可以轻松地使用web技术构建高质量的跨平台的移动应用。可以让我们</span><br><span class="line">快速开发移动App、移动端WEB页面、微信公众平台应用，混合app web页面。</span><br></pre></td></tr></table></figure>
<h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul>
<li>基于 Cordova</li>
<li>漂亮的界面，追求性能，专注原生，免费开源</li>
<li>Angular JS MVVM 开发理念，数据双向绑定</li>
<li>继承自 Cordova，可以使用 Cordova 的插件</li>
</ul>
<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>Angular JS 学习路线陡峭</li>
<li>Ionic 框架相比于原生的 Cordova 有所差异，Cordova 某些官方插件可能不适用于Ionic</li>
</ul>
<h4 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h4><p><a href="http://www.ionic.wang/">中文文档</a></p>
<h3 id="AppCan"><a href="#AppCan" class="headerlink" title="AppCan"></a>AppCan</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AppCan作为中国Hybrid混合应用开发、移动平台、移动云平台的倡导者，以“免费+开源+开放”的互联网模式，为广大</span><br><span class="line">开发者提供一站式的移动应用开发支持服务。通过AppCan IDE集成开发系统、云端打包器等，快速开发出Android、</span><br><span class="line">iOS、WP平台上的移动应用。</span><br></pre></td></tr></table></figure>
<h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ul>
<li>提供一体化解决方案，方便环境搭建、开发、调试、发布</li>
<li>框架自带UI包，包含常用控件样式，框架对UI、动画渲染进行过优化，反应速度快</li>
<li>支持本地打包、云端打包</li>
</ul>
<h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>不开源，无法修改、优化底层代码，文档偏少，分大众版和企业版，大众版免费，但功能有缺失</li>
<li>……</li>
</ul>
<h4 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.appcan.cn/">AppCan官网</a></p>
<h2 id="DCloud"><a href="#DCloud" class="headerlink" title="DCloud"></a>DCloud</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DCloud大部分产品开源，W3C会员单位，HTML5中国产业联盟的发起公司之一。旗下产品有：HBuilder、Uni-app、</span><br><span class="line">5+Runtime、MUI等</span><br></pre></td></tr></table></figure>
<h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><ul>
<li>国内厂商，中文文档，MUI 更贴近国内App使用习惯，提供模块的详细例子，如登录，个人中心</li>
<li>对HTML5的性能、工具、能力都做了深入扩展，提供 IDE 、云服务等帮助节省时间</li>
</ul>
<h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>部分操作需要具备原生开发经验，如离线打包App</li>
<li>新产品仍然有bug，还需改进</li>
</ul>
<h4 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h4><p><a href="https://dcloud.io/">DCloud官网</a><br><img src="https://i.loli.net/2021/02/24/3xCWRHbwt8p5JYV.png" alt="DCloud学习路线"></p>
<h3 id="APICloud"><a href="#APICloud" class="headerlink" title="APICloud"></a>APICloud</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">APICloud提供原生应用的功能模块（设备访问，界面布局，开放SDK等），开发者可以通过JS用。前端工程师负责页面</span><br><span class="line">布局，UI展现，及简单的交互，原生模块负责性能方面和功能实现，两者结合形成一个完整的应用。同时APICloud提供</span><br><span class="line">了云数据库的功能，前端不必了解PHP，Node.js等后端语言，通过JS接口或Restful API实现数据库的增删改查。 </span><br><span class="line">但是APICloud的更新速度很快，版本不太稳定。而且，它是为不懂APP开发的人士准备的，不适合科技公司和程序员。</span><br></pre></td></tr></table></figure>
<h4 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h4><ul>
<li>不懂原生开发，不懂后台语言就可完成APP</li>
</ul>
<h4 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>更新速度快，版本不够稳定</li>
<li>面向不懂App开发人群，不适合程序员和科技公司，过度依赖会降低技术水平</li>
<li>名声不好，涉嫌抄袭DCloud大量代码，<a href="https://www.zhihu.com/question/30994540?sort">参考</a></li>
</ul>
<h4 id="参考-4"><a href="#参考-4" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.apicloud.com/">APICloud</a></p>
<h2 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">能够在Javascript和React的基础上获得完全一致的开发体验，构建世界一流的原生APP。仅需学习一次，编写任何</span><br><span class="line">平台。(Learn once, write anywhere)。</span><br></pre></td></tr></table></figure>
<h4 id="优点-5"><a href="#优点-5" class="headerlink" title="优点"></a>优点</h4><ul>
<li>性能体验高于Hybrid,与原生体验差不多</li>
<li>开发人员可以做到,一次学习,跨平台开发</li>
</ul>
<h4 id="缺点-5"><a href="#缺点-5" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>初次学习成本高</li>
<li>必须在不同平台下写两套代码，依赖暴露的接口</li>
</ul>
<h4 id="参考-5"><a href="#参考-5" class="headerlink" title="参考"></a>参考</h4><p><a href="https://reactnative.cn/">RN中文</a></p>
<h3 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。 Flutter可以与现有的代码</span><br><span class="line">一起工作。在全世界，Flutter正在被越来越多的开发者和组织使用，并且Flutter是完全免费、开源的。</span><br></pre></td></tr></table></figure>
<h4 id="优点-6"><a href="#优点-6" class="headerlink" title="优点"></a>优点</h4><ul>
<li>性能与原生体验差不多</li>
<li>热重载，丰富的控件以及开发工具</li>
</ul>
<h4 id="缺点-6"><a href="#缺点-6" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>代码嵌套地狱，Dart语言虽然易学易用，也需要一定的学习成本</li>
<li>架构和状态管理模式还不够成熟</li>
</ul>
<h4 id="参考-6"><a href="#参考-6" class="headerlink" title="参考"></a>参考</h4><p><a href="https://flutterchina.club/">Flutter中文</a></p>
<h3 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a>其他参考</h3><p><a href="https://www.cnblogs.com/pangguoming/p/9296512.html">https://www.cnblogs.com/pangguoming/p/9296512.html</a></p>
<p><a href="https://www.cnblogs.com/songxingzheng/p/6482697.html">https://www.cnblogs.com/songxingzheng/p/6482697.html</a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>flutter</tag>
        <tag>dcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>frida测试-修改vip</title>
    <url>/2021/02/23/frida_test/</url>
    <content><![CDATA[<p>项目开发的过程中，需要用户不同的身份状态展示相对应的UI界面时，比如VIP用户展示更多的功能……。此时，我们可以有多种方式来做开发测试，下面通过frida动态修改用户的身份状态来实现，仅做测试。</p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><pre><code>frida -U -f com.dewu.sxttpjc -l vip.js
</code></pre>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改用户的vip状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> packageName = <span class="string">&quot;com.dewu.sxttpjc.util&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> className = <span class="string">&quot;UserUtils&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> UserUtils = Java.use(packageName+ <span class="string">&quot;.&quot;</span>+ className);</span><br><span class="line">        UserUtils.isVip.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">var</span> originValue =  <span class="built_in">this</span>.isVip();</span><br><span class="line">           <span class="built_in">console</span>.warn(<span class="string">&quot;originValue = &quot;</span> + originValue);</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(makeVip,<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://i.loli.net/2021/02/23/pBKbst26HNTkVX7.png" alt="2021-02-23-16-09.png"></p>
]]></content>
      <categories>
        <category>frida</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>frida</tag>
      </tags>
  </entry>
  <entry>
    <title>github无法访问</title>
    <url>/2021/03/14/github%E8%AE%BF%E9%97%AE%E6%85%A2or%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E5%A4%87%E6%B3%A8/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每到两会期间，github总是莫名其妙的访问慢，有时候直接无法访问，方法是参考github520大神的，</span><br><span class="line">在此只是做一个备注，以备不时之需。</span><br></pre></td></tr></table></figure>


<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="复制下面的内容"><a href="#复制下面的内容" class="headerlink" title="复制下面的内容"></a>复制下面的内容</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GitHub520 Host Start</span></span><br><span class="line">185.199.108.154               github.githubassets.com</span><br><span class="line">140.82.113.22                 central.github.com</span><br><span class="line">185.199.108.133               desktop.githubusercontent.com</span><br><span class="line">185.199.108.153               assets-cdn.github.com</span><br><span class="line">185.199.108.133               camo.githubusercontent.com</span><br><span class="line">185.199.108.133               github.map.fastly.net</span><br><span class="line">199.232.69.194                github.global.ssl.fastly.net</span><br><span class="line">140.82.114.3                  gist.github.com</span><br><span class="line">185.199.108.153               github.io</span><br><span class="line">140.82.112.3                  github.com</span><br><span class="line">140.82.113.6                  api.github.com</span><br><span class="line">185.199.108.133               raw.githubusercontent.com</span><br><span class="line">185.199.108.133               user-images.githubusercontent.com</span><br><span class="line">185.199.108.133               favicons.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars5.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars4.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars3.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars2.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars1.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars0.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars.githubusercontent.com</span><br><span class="line">140.82.113.9                  codeload.github.com</span><br><span class="line">52.217.87.140                 github-cloud.s3.amazonaws.com</span><br><span class="line">52.216.238.99                 github-com.s3.amazonaws.com</span><br><span class="line">52.216.138.163                github-production-release-asset-2e65be.s3.amazonaws.com</span><br><span class="line">52.217.101.68                 github-production-user-asset-6210df.s3.amazonaws.com</span><br><span class="line">52.217.48.84                  github-production-repository-file-5c1aeb.s3.amazonaws.com</span><br><span class="line">185.199.108.153               githubstatus.com</span><br><span class="line">64.71.168.201                 github.community</span><br><span class="line">185.199.108.133               media.githubusercontent.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Update time: 2021-03-17T16:23:14+08:00</span></span><br><span class="line"><span class="comment"># Star me GitHub url: https://github.com/521xueweihan/GitHub520</span></span><br><span class="line"><span class="comment"># GitHub520 Host End</span></span><br></pre></td></tr></table></figure>
<h4 id="手动修改host文件"><a href="#手动修改host文件" class="headerlink" title="手动修改host文件"></a>手动修改host文件</h4><ul>
<li>Windows 系统：<code>C:\Windows\System32\drivers\etc\hosts</code></li>
<li>Linux 系统：<code>/etc/hosts</code></li>
<li>Mac（苹果电脑）系统：<code>/etc/hosts</code></li>
<li>Android（安卓）系统：<code>/system/etc/hosts</code></li>
<li>iPhone（iOS）系统：<code>/etc/hosts</code></li>
</ul>
<h4 id="自动模式"><a href="#自动模式" class="headerlink" title="自动模式"></a>自动模式</h4><p>推荐 <a href="https://github.com/oldj/SwitchHosts">SwitchHosts</a> 工具管理 hosts</p>
<p><img src="https://i.loli.net/2021/03/17/S3VDhs4RgIrbMAE.png" alt="iShot2021-03-17下午06.10.01.png"></p>
<p><a href="https://github.com/521xueweihan/GitHub520/blob/main/README.md">参考</a></p>
<p><a href="http://k61.org/cc80e540.html">参考2</a></p>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>git相关记录</title>
    <url>/2021/02/28/git%E7%9B%B8%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="建立分支追踪关系方法"><a href="#建立分支追踪关系方法" class="headerlink" title="建立分支追踪关系方法"></a>建立分支追踪关系方法</h3><ul>
<li><p>手动建立追踪关系</p>
<pre><code>  git branch --set-upstream-to=&lt;远程主机名&gt;/&lt;远程分支名&gt; &lt;本地分支名&gt;
  git branch --set-upstream-to=origin/dev dev 
</code></pre>
</li>
<li><p>push时建立追踪关系</p>
<pre><code>  git push -u &lt;远程主机名&gt; &lt;本地分支名&gt;
  git push -u origin dev 
</code></pre>
</li>
<li><p>建分支时建立跟踪关系</p>
<pre><code>  git checkout -b &lt;本地分支名&gt; &lt;远程主机名&gt;/&lt;远程分支名&gt;
  git checkout -b dev  origin/dev
</code></pre>
</li>
<li><p>查看追踪关系</p>
<pre><code>  git branch -vv
</code></pre>
</li>
<li><p>查看所有的分支信息</p>
<pre><code>  git branch -va
</code></pre>
</li>
</ul>
<p><a href="https://blog.csdn.net/qq_42780289/article/details/97762596">参考</a></p>
<h3 id="git忽略文件"><a href="#git忽略文件" class="headerlink" title="git忽略文件"></a>git忽略文件</h3><ul>
<li><p>从未提交过的文件可以用.gitignore</p>
</li>
<li><p>已经推送（push）过的文件1</p>
<pre><code>  git rm --cached Xml/config.xml
  --想从git远程库中删除，并在以后的提交中忽略，但是却还想在本地保留这个文件。
</code></pre>
</li>
<li><p>已经推送（push）过的文件2</p>
<pre><code>  git update-index --assume-unchanged Xml/config.xml
  --想在以后的提交时忽略此文件，即使本地已经修改过，而且不删除git远程库中相应文件。
</code></pre>
</li>
</ul>
<p><a href="https://blog.csdn.net/HaHa_Sir/article/details/80628545">参考</a> </p>
<h3 id="git-暂存修改"><a href="#git-暂存修改" class="headerlink" title="git 暂存修改"></a>git 暂存修改</h3><ul>
<li><p>git stash     </p>
<pre><code>  将当前所有修改项(未提交的)暂存，压栈。
</code></pre>
</li>
<li><p>git stash save 【message】</p>
<pre><code>  给 stash 存储的修改起个名字。
</code></pre>
</li>
<li><p>git stash list</p>
<pre><code>  列出所有暂存项，查看暂存区的所有暂存修改。
</code></pre>
</li>
<li><p>git stash apply stash@{X} </p>
<pre><code>  取出相应的暂存。
</code></pre>
</li>
<li><p>git stash drop stash@{X} </p>
<pre><code>  将记录列表中取出的对应暂存记录删除。
</code></pre>
</li>
<li><p>git stash clear </p>
<pre><code>  清除所有暂存项。
</code></pre>
</li>
<li><p>git stash apply </p>
<pre><code>  将暂存的修改重新应用，使用git status可以看到以前暂存的修改又回来了。
</code></pre>
</li>
<li><p>git stash pop</p>
<pre><code>  取出最近一次暂存并删除记录列表中对应记录。
</code></pre>
</li>
<li><p>git stash pop 冲突处理</p>
<ul>
<li><p>第一步：git  stash pop</p>
</li>
<li><p>第二步：处理冲突</p>
</li>
<li><p>第三步：git reset</p>
</li>
<li><p>第四步：git stash drop</p>
</li>
</ul>
</li>
</ul>
<p><a href="https://stackoverflow.com/questions/7751555/how-to-resolve-git-stash-conflict-without-commit">参考</a> </p>
<p><a href="https://blog.csdn.net/youzhouliu/article/details/101673732">参考1</a></p>
<p><a href="https://www.cnblogs.com/mzy520/p/11282751.html">参考2</a> </p>
<h3 id="git拉取失败"><a href="#git拉取失败" class="headerlink" title="git拉取失败"></a>git拉取失败</h3><ul>
<li>解决办法<pre><code>  1.保留你本地的修改
  git merge --abort
  git reset --merge
  合并后记得一定要提交这个本地的合并
  然后在获取线上仓库
  git pull
</code></pre>
</li>
</ul>
<p><a href="http://yijiebuyi.com/blog/5b55eb51ad49ce41e2de9c85dd4513ca.html">参考</a><br><a href="https://blog.csdn.net/u013190088/article/details/82026442?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase">git修改最后一次提交</a> </p>
<h3 id="git-删除分支"><a href="#git-删除分支" class="headerlink" title="git 删除分支"></a>git 删除分支</h3><ul>
<li>删除远程分支<pre><code>  git push origin --delete [远程分支名]
  git branch -d [本地分支名]
</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Hexo</title>
    <url>/2020/12/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<div class="justified-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg"><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg"><br><img src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg"><br><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg"><br><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg"><br><img src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg"><br><img src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg"><br><img src="https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg"></p>
          </div>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown 常用语法学习备注</title>
    <url>/2018/03/12/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1. 斜体和粗体"></a>1. 斜体和粗体</h3><p>使用 * 和 ** 表示斜体和粗体。</p>
<p>示例：</p>
<p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p>
<h3 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h3><p>使用 === 表示一级标题，使用 — 表示二级标题。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是一个一级标题</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">这是一个二级标题</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">### 这是一个三级标题</span><br></pre></td></tr></table></figure>
<p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</p>
<h3 id="3-外链接"><a href="#3-外链接" class="headerlink" title="3. 外链接"></a>3. 外链接</h3><p>使用 [描述](链接地址) 为文字增加外链接。</p>
<p>示例：</p>
<p>这是去往 <a href="https://boundless1024.com/">本人博客</a> 的链接。</p>
<h3 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4. 无序列表"></a>4. 无序列表</h3><p>使用 *，+，- 表示无序列表。</p>
<p>示例：</p>
<ul>
<li>无序列表项 一</li>
<li>无序列表项 二</li>
<li>无序列表项 三</li>
</ul>
<h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5. 有序列表"></a>5. 有序列表</h3><p>使用数字和点表示有序列表。</p>
<p>示例：</p>
<ol>
<li>有序列表项 一</li>
<li>有序列表项 二</li>
<li>有序列表项 三</li>
</ol>
<h3 id="6-文字引用"><a href="#6-文字引用" class="headerlink" title="6. 文字引用"></a>6. 文字引用</h3><p>使用 &gt; 表示文字引用。</p>
<p>示例：</p>
<blockquote>
<p>野火烧不尽，春风吹又生。</p>
</blockquote>
<h3 id="7-行内代码块"><a href="#7-行内代码块" class="headerlink" title="7. 行内代码块"></a>7. 行内代码块</h3><p>使用 `代码` 表示行内代码块。</p>
<p>示例：</p>
<p>让我们聊聊 <code>html</code>。</p>
<h3 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8.  代码块"></a>8.  代码块</h3><p>使用 四个缩进空格 表示代码块。</p>
<p>示例：</p>
<pre><code>这是一个代码块，此行左侧有四个不可见的空格。
</code></pre>
<h3 id="9-插入图像"><a href="#9-插入图像" class="headerlink" title="9.  插入图像"></a>9.  插入图像</h3><p>使用 ![描述](图片链接地址) 插入图像。</p>
<p>示例：</p>
<p><img src="https://i.loli.net/2021/02/22/JnUYy8q6ZvfTcVs.jpg" alt="我的头像"></p>
<h1 id="高阶语法手册"><a href="#高阶语法手册" class="headerlink" title="高阶语法手册"></a>高阶语法手册</h1><h3 id="1-内容目录"><a href="#1-内容目录" class="headerlink" title="1. 内容目录"></a>1. 内容目录</h3><p>在段落中填写 <code>[TOC]</code> 以显示全文内容的目录结构。</p>
<p>[TOC]</p>
<h3 id="2-标签分类"><a href="#2-标签分类" class="headerlink" title="2. 标签分类"></a>2. 标签分类</h3><p>在编辑区任意行的列首位置输入以下代码给文稿标签：</p>
<p>标签： 数学 英语 Markdown</p>
<p>或者</p>
<p>Tags： 数学 英语 Markdown</p>
<h3 id="3-删除线"><a href="#3-删除线" class="headerlink" title="3. 删除线"></a>3. 删除线</h3><p>使用 ~~ 表示删除线。</p>
<p><del>这是一段错误的文本。</del></p>
<h3 id="4-注脚"><a href="#4-注脚" class="headerlink" title="4. 注脚"></a>4. 注脚</h3><p>使用 [^keyword] 表示注脚。</p>
<p>这是一个注脚[^footnote]的样例。</p>
<p>这是第二个注脚[^footnote2]的样例。</p>
<h3 id="5-LaTeX-公式"><a href="#5-LaTeX-公式" class="headerlink" title="5. LaTeX 公式"></a>5. LaTeX 公式</h3><p>$ 表示行内公式：</p>
<p>质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。</p>
<p>$$ 表示整行公式：</p>
<p>$$\sum_{i=1}^n a_i=0$$</p>
<p>$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</p>
<p>$$\sum^{j-1}<em>{k=0}{\widehat{\gamma}</em>{kj} z_k}$$</p>
<p>访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">MathJax</a> 参考更多使用方法。</p>
<h3 id="6-加强的代码块"><a href="#6-加强的代码块" class="headerlink" title="6. 加强的代码块"></a>6. 加强的代码块</h3><p>支持四十一种编程语言的语法高亮的显示，行号显示。</p>
<p>非代码示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install vim-gnome</span><br></pre></td></tr></table></figure>
<p>Python 示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span>(<span class="params">param1=<span class="string">&#x27;&#x27;</span>, param2=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;A docstring&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;Greater&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">&#x27;&#x27;&#x27;interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>JavaScript 示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* nth element in the fibonacci series.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>n &gt;= 0</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return </span>the nth element, &gt;= 0.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> tmp;</span><br><span class="line">  <span class="keyword">while</span> (--n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    tmp = a;</span><br><span class="line">    a += b;</span><br><span class="line">    b = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(fib(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>
<h3 id="7-流程图"><a href="#7-流程图" class="headerlink" title="7. 流程图"></a>7. 流程图</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: Start:&gt;https:&#x2F;&#x2F;www.zybuluo.com</span><br><span class="line">io&#x3D;&gt;inputoutput: verification</span><br><span class="line">op&#x3D;&gt;operation: Your Operation</span><br><span class="line">cond&#x3D;&gt;condition: Yes or No?</span><br><span class="line">sub&#x3D;&gt;subroutine: Your Subroutine</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;io-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;sub-&gt;io</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考：流程图语法参考"><a href="#更多语法参考：流程图语法参考" class="headerlink" title="更多语法参考：流程图语法参考"></a>更多语法参考：<a href="http://adrai.github.io/flowchart.js/">流程图语法参考</a></h4><h3 id="8-序列图"><a href="#8-序列图" class="headerlink" title="8. 序列图"></a>8. 序列图</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>
<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Title: Here is a title</span><br><span class="line">A-&gt;B: Normal line</span><br><span class="line">B--&gt;C: Dashed line</span><br><span class="line">C-&gt;&gt;D: Open arrow</span><br><span class="line">D--&gt;&gt;A: Dashed open arrow</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考：序列图语法参考"><a href="#更多语法参考：序列图语法参考" class="headerlink" title="更多语法参考：序列图语法参考"></a>更多语法参考：<a href="http://bramp.github.io/js-sequence-diagrams/">序列图语法参考</a></h4><h3 id="9-甘特图"><a href="#9-甘特图" class="headerlink" title="9. 甘特图"></a>9. 甘特图</h3><p>甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%% 语法示例</span><br><span class="line">        gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title 软件开发甘特图</span><br><span class="line">        section 设计</span><br><span class="line">        需求                      :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        原型                      :active,  des2, 2014-01-09, 3d</span><br><span class="line">        UI设计                     :         des3, after des2, 5d</span><br><span class="line">    未来任务                     :         des4, after des3, 5d</span><br><span class="line">        section 开发</span><br><span class="line">        学习准备理解需求                      :crit, done, 2014-01-06,24h</span><br><span class="line">        设计框架                             :crit, done, after des2, 2d</span><br><span class="line">        开发                                 :crit, active, 3d</span><br><span class="line">        未来任务                              :crit, 5d</span><br><span class="line">        耍                                   :2d</span><br><span class="line">        section 测试</span><br><span class="line">        功能测试                              :active, a1, after des3, 3d</span><br><span class="line">        压力测试                               :after a1  , 20h</span><br><span class="line">        测试报告                               : 48h</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考：甘特图语法参考"><a href="#更多语法参考：甘特图语法参考" class="headerlink" title="更多语法参考：甘特图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#gant-diagrams">甘特图语法参考</a></h4><h3 id="10-Mermaid-流程图"><a href="#10-Mermaid-流程图" class="headerlink" title="10. Mermaid 流程图"></a>10. Mermaid 流程图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A[Hard edge] --&gt;|Link text| B(Round edge)</span><br><span class="line">B --&gt; C&#123;Decision&#125;</span><br><span class="line">C --&gt;|One| D[Result one]</span><br><span class="line">C --&gt;|Two| E[Result two]</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考：Mermaid-流程图语法参考"><a href="#更多语法参考：Mermaid-流程图语法参考" class="headerlink" title="更多语法参考：Mermaid 流程图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#flowcharts-basic-syntax">Mermaid 流程图语法参考</a></h4><h3 id="11-Mermaid-序列图"><a href="#11-Mermaid-序列图" class="headerlink" title="11. Mermaid 序列图"></a>11. Mermaid 序列图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Alice-&gt;John: Hello John, how are you?</span><br><span class="line">loop every minute</span><br><span class="line">    John--&gt;Alice: Great!</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考：Mermaid-序列图语法参考"><a href="#更多语法参考：Mermaid-序列图语法参考" class="headerlink" title="更多语法参考：Mermaid 序列图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#sequence-diagrams">Mermaid 序列图语法参考</a></h4><h3 id="12-表格支持"><a href="#12-表格支持" class="headerlink" title="12. 表格支持"></a>12. 表格支持</h3><table>
<thead>
<tr>
<th>项目</th>
<th align="right">价格</th>
<th align="center">数量</th>
</tr>
</thead>
<tbody><tr>
<td>计算机</td>
<td align="right">$1600</td>
<td align="center">5</td>
</tr>
<tr>
<td>手机</td>
<td align="right">$12</td>
<td align="center">12</td>
</tr>
<tr>
<td>管线</td>
<td align="right">$1</td>
<td align="center">234</td>
</tr>
</tbody></table>
<h3 id="13-定义型列表"><a href="#13-定义型列表" class="headerlink" title="13. 定义型列表"></a>13. 定义型列表</h3><dl><dt>名词 1</dt><dd>定义 1（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><dl><dt>代码块 2</dt><dd>这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><pre><code>    代码块（左侧有八个不可见的空格）
</code></pre>
<h3 id="14-Html-标签"><a href="#14-Html-标签" class="headerlink" title="14. Html 标签"></a>14. Html 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p>
<pre><code>&lt;table&gt;
    &lt;tr&gt;
        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;
        &lt;th&gt;星期一&lt;/th&gt;
        &lt;th&gt;星期二&lt;/th&gt;
        &lt;th&gt;星期三&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;李强&lt;/td&gt;
        &lt;td&gt;张明&lt;/td&gt;
        &lt;td&gt;王平&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
</code></pre>
<table>
    <tr>
        <th rowspan="2">值班人员</th>
        <th>星期一</th>
        <th>星期二</th>
        <th>星期三</th>
    </tr>
    <tr>
        <td>李强</td>
        <td>张明</td>
        <td>王平</td>
    </tr>
</table>

<h3 id="15-内嵌图标"><a href="#15-内嵌图标" class="headerlink" title="15. 内嵌图标"></a>15. 内嵌图标</h3><p>本站的图标系统对外开放，在文档中输入</p>
<pre><code>&lt;i class=&quot;icon-weibo&quot;&gt;&lt;/i&gt;
</code></pre>
<p>即显示微博的图标： <i class="icon-weibo icon-2x"></i></p>
<p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code> 以显示不同的图标，例如：</p>
<pre><code>&lt;i class=&quot;icon-renren&quot;&gt;&lt;/i&gt;
</code></pre>
<p>即显示人人的图标： <i class="icon-renren icon-2x"></i></p>
<p>更多的图标和玩法可以参看 <a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/">font-awesome</a> 官方网站。</p>
<h3 id="16-待办事宜-Todo-列表"><a href="#16-待办事宜-Todo-列表" class="headerlink" title="16. 待办事宜 Todo 列表"></a>16. 待办事宜 Todo 列表</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p>
<pre><code>- [ ] ** Markdown 开发**
    - [ ] 改进 xxxx 渲染算法，使用局部渲染技术提高渲染效率
    - [ ] 支持以 PDF 格式导出文稿
    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)
    - [x] 改进 LaTex 功能
        - [x] 修复 LaTex 公式渲染问题
        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)
- [ ] **七月旅行准备**
    - [ ] 准备邮轮上需要携带的物品
    - [ ] 浏览日本免税店的物品
    - [x] 购买蓝宝石公主号七月一日的船票
</code></pre>
<p>对应显示如下待办事宜 Todo 列表：</p>
<ul>
<li><input disabled="" type="checkbox"> ** Markdown 开发**<ul>
<li><input disabled="" type="checkbox"> 改进 xxxx 渲染算法，使用局部渲染技术提高渲染效率</li>
<li><input disabled="" type="checkbox"> 支持以 PDF 格式导出文稿</li>
<li><input checked="" disabled="" type="checkbox"> 新增Todo列表功能 <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments">语法参考</a></li>
<li><input checked="" disabled="" type="checkbox"> 改进 LaTex 功能<ul>
<li><input checked="" disabled="" type="checkbox"> 修复 LaTex 公式渲染问题</li>
<li><input checked="" disabled="" type="checkbox"> 新增 LaTex 公式编号功能 <a href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers">语法参考</a></li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <strong>七月旅行准备</strong><ul>
<li><input disabled="" type="checkbox"> 准备邮轮上需要携带的物品</li>
<li><input disabled="" type="checkbox"> 浏览日本免税店的物品</li>
<li><input checked="" disabled="" type="checkbox"> 购买蓝宝石公主号七月一日的船票</li>
</ul>
</li>
</ul>
<p>[^footnote]: 这是一个 <em>注脚</em> 的 <strong>文本</strong>。</p>
<p>[^footnote2]: 这是另一个 <em>注脚</em> 的 <strong>文本</strong>。</p>
<p><a href="https://www.runoob.com/markdown/md-advance.html">mermaid参考</a></p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>md</tag>
      </tags>
  </entry>
  <entry>
    <title>okhttp请求记录</title>
    <url>/2021/03/07/okhttp-%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<ul>
<li><p>OkHttp请求</p>
<ol>
<li><p>创建Request对象</p>
<p><code>Request对象的创建通过Builder模式创建</code> </p>
<p><img src="https://i.loli.net/2021/03/06/3QG4lKkuFVfXzyA.png" alt="iShot2021-03-06下午05.30.12.png"></p>
</li>
<li><p>创建OkHttpClient对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder().build();</span><br></pre></td></tr></table></figure>
</li>
<li><p>异步方式http请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">client.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    v.post(() -&gt; &#123;</span><br><span class="line">                        TextView textView = (TextView) v;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            textView.setText(response.body().string());</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException exception) &#123;</span><br><span class="line">                            exception.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码</p>
</li>
</ol>
</li>
</ul>
<p><img src="https://i.loli.net/2021/03/06/uRUrCxn92BDJEAP.png" alt="iShot2021-03-06下午05.24.24.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">okhttp.newCall -&gt; realCall</span><br><span class="line">realCall.enqueue -&gt; asyncCall</span><br><span class="line">asyncCall.execute -&gt; getResponseWithInterceptorChain -&gt; chain.proceed</span><br><span class="line">realInterceptorChain.process -&gt; ……</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li><p>OkHttp 拦截器</p>
<p><img src="https://i.loli.net/2021/03/06/Okm1cglFZznp6bx.png" alt="iShot2021-03-06下午05.21.32.png"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>okhttp</tag>
      </tags>
  </entry>
  <entry>
    <title>xposed模块 hello world编写</title>
    <url>/2021/03/18/xposed%E6%A8%A1%E5%9D%97%E5%85%A5%E9%97%A8%E5%A4%87%E6%B3%A8/</url>
    <content><![CDATA[<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>Xposed的执行原理，可以参考<a href="https://www.bilibili.com/read/cv884141?from=category_17">这篇文章</a>的介绍。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xposed劫持了Zygote进程。原本是zygote调用【app_process】来运行程序，现在有了xposed后，zygote调用</span><br><span class="line">【被xposed替换后的app_process】来运行程序，使得程序在开启时，额外加载一个jar包，从而改变APP的运行结果。</span><br><span class="line">我们通过xposed框架编写hook代码，这些hook代码实际上是运行在宿主app进程内的，所以如果想要调试hook代码，</span><br><span class="line">需要以debug模式运行宿主app。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">手机最好有root权限，确保上安装magsik和EdXposed等相关框架（测试设备是一加8 android 10系统），</span><br><span class="line">xposed框架在android 8.0之后就不再维护更新，都转战到magisk和EdXposed上了，具体的安装方式自行百度。</span><br></pre></td></tr></table></figure>
<h3 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过Android Studio 新建一个Android Application项目，模板自行选择。</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/03/18/BtnzoJ3waXuvMbC.png" alt="iShot2021-03-18下午04.23.04.png"></p>
<h3 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修改新建的Android项目中AndroidManifest.xml文件，在application标签下增加下面三句话，以让xposed框架识别</span><br><span class="line">  &lt;meta-data</span><br><span class="line">      android:name=<span class="string">&quot;xposedmodule&quot;</span></span><br><span class="line">      android:value=<span class="string">&quot;true&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;meta-data</span><br><span class="line">      android:name=<span class="string">&quot;xposeddescription&quot;</span></span><br><span class="line">      android:value=<span class="string">&quot;Hello Xposed&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;meta-data</span><br><span class="line">      android:name=<span class="string">&quot;xposedminversion&quot;</span></span><br><span class="line">      android:value=<span class="string">&quot;53&quot;</span> /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/03/18/BOSXHbMqo1rvLZj.png" alt="iShot2021-03-18下午04.29.17.png"></p>
<h3 id="步骤3"><a href="#步骤3" class="headerlink" title="步骤3"></a>步骤3</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">在app项目中增加xposed相应的jar包支持</span><br><span class="line">  </span><br><span class="line"> compileOnly<span class="string">&#x27;de.robv.android.xposed:api:82&#x27;</span></span><br><span class="line"> compileOnly <span class="string">&#x27;de.robv.android.xposed:api:82:sources&#x27;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/03/18/IYfhPDkeb73wNGW.png" alt="iShot2021-03-18下午04.35.12.png"></p>
<h3 id="步骤4"><a href="#步骤4" class="headerlink" title="步骤4"></a>步骤4</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">编写xposed模块的入口，新建一个java类实现xposed框架中的接口 `IXposedHookLoadPackage` </span><br><span class="line">  中的`handleLoadPackage`,在`handleLoadPackage`处理相关的逻辑</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IXposedHookLoadPackage</span> <span class="keyword">extends</span> <span class="title">IXposedMod</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * This method is called when an app is loaded. It&#x27;s called very early, even before</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> Application#onCreate&#125; is called.</span></span><br><span class="line"><span class="comment">	 * Modules can set up their app-specific hooks here.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> lpparam Information about the app.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Throwable Everything the callback throws is caught and logged.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line">	<span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span> <span class="keyword">extends</span> <span class="title">XC_LoadPackage</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> IXposedHookLoadPackage instance;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Wrapper</span><span class="params">(IXposedHookLoadPackage instance)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.instance = instance;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">			instance.handleLoadPackage(lpparam);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/03/18/g4crnvSKlA3ZoMC.png" alt="iShot2021-03-18下午04.42.16.png"></p>
<h3 id="步骤4-1"><a href="#步骤4-1" class="headerlink" title="步骤4"></a>步骤4</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">告诉xposed框架入口class,在android项目中的资产目录(asset)中新建一个文件 &#96;xposed_init&#96; 没有扩展名，</span><br><span class="line">在 &#96;xposed_init&#96; 中写入上面实现 &#96;IXposedHookLoadPackage&#96; 接口类的全路径(包名+类名)</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/03/18/HLAa9k7qjh1RpWG.png" alt="iShot2021-03-18下午04.49.42.png"></p>
<h3 id="步骤5"><a href="#步骤5" class="headerlink" title="步骤5"></a>步骤5</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">运行安装到手机上， 在EdXposed中找到刚才编写的模块，打开模块开关，必要时可以重启一下手机</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/03/18/P2Fy8CY5dsEnwZV.png" alt="iShot2021-03-18下午04.52.25.png"></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过xposed框架，只有你愿意并研究，可以写成很多实用的东西，比如禁用广告，绕过vip才能使用的功能……，例如下面</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/03/18/cVEwdeY9CshTlOP.png" alt="iShot2021-03-18下午05.03.59.png"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.xda-developers.com/how-to-install-magisk/">how-to-install-magisk</a></p>
<p><a href="https://github.com/topjohnwu/Magisk">Magisk</a></p>
<p><a href="https://github.com/ElderDrivers/EdXposed">EdXposed</a></p>
<p><a href="https://repo.xposed.info/module-overview">xposed仓库</a></p>
<p><a href="http://blog.fuguicun.com/articles/2020/12/31/1609386370453.html">Xposed用于生产部署实践</a></p>
<p><a href="https://github.com/NanoHttpd/nanohttpd">NanoHTTPD</a></p>
<p><a href="http://91fans.com.cn/post/zysignfour/">参考</a></p>
<p><a href="https://my.oschina.net/u/4579293/blog/4345442">参考2</a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>xposed</tag>
      </tags>
  </entry>
  <entry>
    <title>通知栏使用备注</title>
    <url>/2021/03/27/%E9%80%9A%E7%9F%A5%E6%A0%8F%E4%BD%BF%E7%94%A8%E5%A4%87%E6%B3%A8/</url>
    <content><![CDATA[<h3 id="通知栏使用备注"><a href="#通知栏使用备注" class="headerlink" title="通知栏使用备注"></a>通知栏使用备注</h3><h4 id="RemoteViews"><a href="#RemoteViews" class="headerlink" title="RemoteViews"></a>RemoteViews</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个能够被显示在其他进程中的View。该View的层次结构来自资源文件，并且此类提供了一下基础的操作来帮助修改View的内容。</span><br><span class="line">RemoteViews运行在另一个进程中， RemoteViews在开发中主要会作用于两个方面通知栏和桌面小部件。因为View是存在于另一个进程中的，</span><br><span class="line">所以我们不能够像直接操作View的那样来操作RemoteView，为了帮助我们操作RemoteView呢，Google为我们提供了 RemoteViews 类来帮助我们操作。提示，提供的资源文件中，只能包含部分ViewGroup和View,不支持扩展，不支持自定义View。支持的ViewGroup有：GridView</span><br><span class="line">AdapterViewFlipper、FrameLayout、GridLayout、LinearLayout、ListView、RelativeLayout、StackView、ViewFlipper。</span><br><span class="line">支持的View有：AnalogClock、Button、Chronometer、ImageButton、ImageView、ProgressBar、TextClock、TextView</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="PendingIntent"><a href="#PendingIntent" class="headerlink" title="PendingIntent"></a>PendingIntent</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PendingIntent 是一种特殊的 Intent， 作用和 Intent 一样是用于启动一个 Activity或者Service，或发送一条 Broadcast。</span><br><span class="line">通知响应用户动作便是用这个， 当对通知做出一个动作后，系统便会调用 PendingIntent，启动一个活动，服务或广播，这取决于你获取的是那种 PendingIntent。</span><br><span class="line"></span><br><span class="line">在 PendingIntent 中传入的 Context 销毁以后，PendingIntent 依旧有效，它一般使用在当 Context 销毁后需要执行 Intent的地方，一般不是用于立即执行的时候，比如在点击通知后唤醒一个 Activity。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取用于启动 Activity </span><br><span class="line">PendingIntent.getActivity(Context context, int requestCode, Intent intent, int flags);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取用于发送 Broadcast</span><br><span class="line">PendingIntent.getBroadcast(Context context, int requestCode, Intent intent, int flags);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取用于启动服务</span><br><span class="line">PendingIntent.getService(Context context, int requestCode, Intent intent, int flags);</span><br><span class="line"></span><br><span class="line">PendingIntent.getActivities(Context context, int reqeustCode, Intent[] intents, int flags);</span><br><span class="line"></span><br><span class="line">PendingIntent.getForgroundService(Context, int reqeustCode, Intent intent, int flags)</span><br><span class="line"></span><br><span class="line">PendingIntent.FLAG_CANCEL_CURRENT，如果当前已存在则取消当前的并返回一个新的 PendingIntent</span><br><span class="line"></span><br><span class="line">PendingIntent.FLAG_UPDATE_CURRENT，如果已存在则更新之前的</span><br><span class="line"></span><br><span class="line">PendingIntent.FLAG_NO_CREATE，如果已存在则返回当前存在的，否则返回 null</span><br><span class="line"></span><br><span class="line">PendingIntent.FLAG_ONE_SHOT，表明这个 PendingIntent 只能用一次，触发一次后自动 cancel</span><br><span class="line"></span><br><span class="line">PendingIntent.FLAG_IMMUTABLE，表明这个PendingIntent 不可变</span><br><span class="line"></span><br><span class="line">requestCode 和 flags 是相关联的，如果多次获取 PendingIntent 时 requestCode 相同，此时返回的结果就需要参考 flags 的值。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">- 创建Notification，配置参数</span><br><span class="line">- 获取NotificationManager，发送通知</span><br><span class="line">- Android <span class="number">8.0</span>之后，注意添加 NotificationChannel</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 创建通知栏</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Notification <span class="title">createNotification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String channelId = CHANNEL_ID + <span class="string">&quot;&quot;</span>; <span class="comment">//channel id</span></span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123; <span class="comment">//8.0系统之后 增加 NotificationChannel</span></span><br><span class="line">            CharSequence channelName = getString(R.string.app_name);</span><br><span class="line">            <span class="keyword">int</span> importance = NotificationManager.IMPORTANCE_HIGH;</span><br><span class="line">            NotificationChannel mChannel = <span class="keyword">new</span> NotificationChannel(channelId, channelName, importance);</span><br><span class="line">            mNotificationManager.createNotificationChannel(mChannel);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == mRemoteViews) &#123; <span class="comment">//自定义通知栏view ,创建RemoteViews</span></span><br><span class="line">            mRemoteViews = <span class="keyword">new</span> RemoteViews(getPackageName(), R.layout.layout_notification_bar_tool);</span><br><span class="line">            initRemoteViews(mRemoteViews); <span class="comment">//初始化自定义view </span></span><br><span class="line">        &#125;</span><br><span class="line">        Notification notification = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>, channelId)</span><br><span class="line">                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)</span><br><span class="line"><span class="comment">//                .setOngoing(true) //前台显示</span></span><br><span class="line">                .setSmallIcon(R.drawable.ic_launcher)</span><br><span class="line">                .setContent(mRemoteViews)</span><br><span class="line">                .build();</span><br><span class="line">        </span><br><span class="line">        notification.when = System.currentTimeMillis();</span><br><span class="line">        IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter(ACTION_DK);</span><br><span class="line">        registerReceiver(mBroadcastReceiver, intentFilter);</span><br><span class="line">        <span class="keyword">return</span> notification;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 发送通知栏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">sendNotification</span><span class="params">()</span></span>&#123;</span><br><span class="line">        mNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">        mNotification = createNotification(); <span class="comment">//上面方法，创建一个通知栏对象</span></span><br><span class="line">        mNotificationManager.notify(CHANNEL_ID ,mNotification);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="Demo-实现类似360清理大师常驻通知栏"><a href="#Demo-实现类似360清理大师常驻通知栏" class="headerlink" title="Demo,实现类似360清理大师常驻通知栏"></a>Demo,实现类似360清理大师常驻通知栏</h4><p><img src="https://i.loli.net/2021/03/27/gmPSRtKFEifnzlL.png" alt="iShot2021-03-27上午10.25.23.png"></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>adb</tag>
      </tags>
  </entry>
</search>
